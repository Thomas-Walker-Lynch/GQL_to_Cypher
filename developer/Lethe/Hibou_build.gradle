task setup {
  doLast {
    def dirs = [
      "$(ANTLR_IN_PRIMARY_DIR)",
      "$(JAVA_COMP_IN_DIR)",
      "$(JAVA_COMP_IN_PRIMARY_DIR)",
      "$(JAVA_COMP_IN_ANTLR_DIR)",
      "$(JAVA_COMP_IN_SYN_DIR)",
      "$(JVM_IN_DIR)",
      "$(EXECUTOR_IN_DIR)",
      "test",
      "deprecated",
      "experiment",
      "ologist",
      "temporary"
    ]
    dirs.each { dir ->
      if (!file(dir).exists()) {
        mkdir dir
      }
    }
  }
}

def compileJava(source, target) {
  tasks.create(name: "compile${source}", type: Exec) {
    commandLine '$(JAVA_COMP)', '-d', '$(JAVA_COMP_OUT_DIR)', '-sourcepath', '$(JAVA_COMP_IN_DL)', source
    doLast {
      println "Compiled ${source} to ${target}"
    }
  }
}

def createJar(source, target) {
  tasks.create(name: "jar${source}", type: Exec) {
    commandLine '$(JAVA_ARCHIVE)', 'cf', target, '-C', '$(JAVA_COMP_OUT_DIR)', source
    doLast {
      println "Created ${target}"
    }
  }
}

def createWrapper(source, target) {
  tasks.create(name: "wrapper${source}", type: Exec) {
    doLast {
      def script = new File(target)
      script.text = "#!/usr/bin/env bash\n$(JAVA_INTERP) -cp ${CLASSPATH}:${JVM_IN_DP}:${JVM_IN_DP}/${source}.jar ${source} \$@"
      script.setExecutable(true)
      println "Created program ${target}"
    }
  }
}

task ANTLR_OUT_FL {
  dependsOn setup
  doLast {
    println "Building ANTLR_OUT_FL..."
    // Add specific build steps for ANTLR_OUT_FL here
  }
}

task all {
  dependsOn ANTLR_OUT_FL
  doLast {
    println "Building all targets..."
  }
}

task clean {
  doLast {
    println "Use the command `clean <option>` instead of make."
  }
}

task version {
  doLast {
    println "ANTLR_JAR is '${notdir(ANTLR_JAR)}'"
    exec {
      commandLine '$(JAVA_COMP)', '--version'
    }
    exec {
      commandLine '$(JAVA_ARCHIVE)', '--version'
    }
    exec {
      commandLine 'make', '-v'
    }
    println "makefile 0.4"
  }
}

task nothing {
  doLast {
    // useful for distinguishing between make syntax errors and build errors
  }
}

tasks.withType(Exec) {
  doFirst {
    println "Executing $name"
  }
}

// Example usage
compileJava('$(JAVA_COMP_IN_PRIMARY_DIR)/Example.java', '$(JAVA_COMP_OUT_DIR)/Example.class')
createJar('Example.class', '$(JAVA_COMP_OUT_DIR)/Example.jar')
createWrapper('Example', '$(EXECUTOR_IN_DIR)/Example')
