/*--------------------------------------------------------------------------------
 build_from_leaf

 Accepts `build_result_fpl` and `leaf_dependency_fpl` (fpl = file path list). 
 Typically, `build_result_fpl` will hold a single item, representing the target 
 to be built, and `leaf_dependency_fpl` contains the leaf dependencies for that 
 target.

 This function checks the build status of the target relative to its dependencies.

 It returns a dictionary with the following fields based on the result of the check:

     type   -> A string indicating the result type:
               'no_build_target_specified', 'non_existent_build_target',
               'up_to_date', or 'need_to_build'.

     message -> A string message describing the result (optional).

     missing -> If type is 'non_existent_build_target', this field contains the 
                list of missing build targets.

     build_result -> If type is 'need_to_build', this field contains the list 
                     of build result filenames that need to be rebuilt.
*/

def build_from_leaf(build_result_fpl ,leaf_dependency_fpl) {

  if( !build_result_fpl || build_result_fpl.isEmpty() ){
    return [
      type: "no_build_target_specified"
      ,message: "No build target specified"
    ]
  }

  // Check if any build result file does not exist
  def missing_build_fpl = build_result_fpl.findAll{ file_path ->
    !new File(file_path).exists()
  }
  
  if( !missing_build_fpl.isEmpty() ){
    return [
      type: "non_existent_build_target"
      ,message: "Missing build targets"
      ,missing: missing_build_fpl
    ]
  }

  // Check if any dependency is newer than the build result files
  def all_up_to_date_bool = build_result_fpl.every{ result_file_path ->
    def result_file = new File(result_file_path)
    !leaf_dependency_fpl.any{ dep_path ->
      new File(dep_path).lastModified() > result_file.lastModified()
    }
  }

  if( all_up_to_date_bool ){
    return [
      type: "up_to_date"
      ,message: "Build result is up to date"
    ]
  }else{
    return [
      type: "need_to_build"
      ,message: "Build result needs to be rebuilt"
      ,build_result: build_result_fpl
    ]
  }
}
