#!/usr/bin/env bash
#!/usr/bin/env bash

# Clean targets:
#
# 1. > clean temp[orary] - removes files from ./temporary except for .githolder
#
# 2. General clean targets:
#
#    > clean all # removes all things make built, and thus can be replaced by running make again.
#    > clean program # removes all built executor scripts and corresponding jar files
#    > clean class # removes the class files
#    > clean grammar # removes the generated java grammar files
#
# 3. Specific clean targets:
#
#    > clean all <program_name> # cleans all files built while building the program
#    > clean program <program_name> # removes the script and jar file for the given program
#    > clean grammar <grammar_name> - similar to clean:grammar, but only for the named grammar

# Function to display usage message
display_usage() {
  echo "Usage: clean <all [<program_name>] | program [<program_name>] | grammar [<name>] | class | temp[orary]>"
}

# Command parser
clean_command_parser() {
  local token_list=($@)
  local token_count=${#token_list[@]}
  local command=${token_list[0]}
  local arg=${token_list[1]}

  if [ "$token_count" -eq 0 ]; then
    display_usage
  elif [ "$token_count" -eq 1 ]; then
    case "$command" in
      "temporary" | "temp")
        clean_directory "$TEMP_DIR"
        ;;
      "all")
        clean_directory "$TEMP_DIR"
        clean_grammar
        clean_file_list "JAVA_COMP_OUT_FPL"
        clean_file_list "JAR_OUT_FPL"
        clean_file_list "PROGRAM_FPL"
        ;;
      "program")
        clean_file_list "JAR_OUT_FPL"
        clean_file_list "PROGRAM_FPL"
        ;;
      "class")
        clean_file_list "JAVA_COMP_OUT_FPL"
        ;;
      "grammar")
        clean_grammar
        ;;
      *)
        echo "Unknown clean option: $command"
        ;;
    esac
  elif [ "$token_count" -eq 2 ]; then
    case "$command" in
      "all")
        clean_file_list "executor/$arg $JAVA_COMP_OUT_DIR/$arg.jar $JAVA_COMP_OUT_DIR/$arg.class"
        # program specific cleaning
        case "$arg" in
          "SyntaxTree_Test")
            clean_grammar "GQL_Test"
            ;;
          "SyntaxTree_20240412")
            clean_grammar "GQL_20240412"
            ;;
          "PrintRuleNameList")
            : 
            ;;
          *)
            echo "Unknown program: $arg"
            ;;
        esac
        ;;
      "program")
        clean_file_list "executor/$arg"
        clean_file_list "$JAVA_COMP_OUT_DIR/$arg.jar"
        ;;
      "grammar")
        clean_grammar "$arg"
        ;;
      *)
        echo "Unknown clean command: $command"
        ;;
    esac
  else
    echo "Clean commands are at most two tokens, but we found: $token_count"
  fi
}

clean_command_parser $@
