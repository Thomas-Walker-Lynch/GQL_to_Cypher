#!/usr/bin/env bash

# Clean targets:
#
# 1. > clean temp[orary] - removes files from ./temporary except for .githolder
#
# 2. General clean targets:
#
#    > clean all # removes all things make built, and thus can be replaced by running make again.
#    > clean program # removes all built ${EXECUTOR_IN_DIR} scripts and corresponding jar files
#    > clean class # removes the class files
#    > clean grammar # removes the generated java grammar files
#
# 3. Specific clean targets:
#
#    > clean all <program_name> # cleans all files built while building the program
#    > clean program <program_name> # removes the script and jar file for the given program
#    > clean grammar <grammar_name> - similar to clean:grammar, but only for the named grammar

# Function to display usage message
display_usage() {
  echo "Usage: clean <all [<program_name>] | program [<program_name>] | grammar [<name>] | class | temp[orary]>"
}

# Function to check if a program is in EXECUTOR_IN_FPL
is_program_in_fpl() {
  local program="$1"
  for prog in $EXECUTOR_IN_FPL; do
    if [[ "$prog" == *"$program"* ]]; then
      return 0
    fi
  done
  return 1
}

# Function to delete a program
delete_program() {
  local program="$1"
  if is_program_in_fpl "$program"; then
    echo "Deleting program files for '$program'"
    rm -f "${EXECUTOR_IN_DIR}/$program" "$JAVA_COMP_OUT_DIR/$program.jar" "$JAVA_COMP_OUT_DIR/$program.class"
  else
    echo "Error: Program '$program' is not recognized or is not listed in EXECUTOR_IN_FPL."
    return 1
  fi
}

# Command parser
clean_command_parser() {
  local token_list=($@)
  local token_count=${#token_list[@]}
  local command=${token_list[0]}
  local arg=${token_list[1]}

  if [ "$token_count" -eq 0 ]; then
    display_usage
  elif [ "$token_count" -eq 1 ]; then
    case "$command" in
      "temporary" | "temp")
        ${EXECUTOR_IN_DIR}/clean_directory "$TEMP_DIR"
        ;;
      "all")
        ${EXECUTOR_IN_DIR}/clean_directory "$TEMP_DIR"
        ${EXECUTOR_IN_DIR}/clean_grammar
        ${EXECUTOR_IN_DIR}/clean_file_list "JAVA_COMP_OUT_FPL"
        ${EXECUTOR_IN_DIR}/clean_file_list "JAR_OUT_FPL"
        ${EXECUTOR_IN_DIR}/clean_file_list "EXECUTOR_IN_FPL"
        ;;
      "program")
        ${EXECUTOR_IN_DIR}/clean_file_list "JAR_OUT_FPL"
        ${EXECUTOR_IN_DIR}/clean_file_list "EXECUTOR_IN_FPL"
        ;;
      "class")
        ${EXECUTOR_IN_DIR}/clean_file_list "JAVA_COMP_OUT_FPL"
        ;;
      "grammar")
        ${EXECUTOR_IN_DIR}/clean_grammar
        ;;
      *)
        echo "Unknown clean option: $command"
        ;;
    esac
  elif [ "$token_count" -eq 2 ]; then
    case "$command" in
      "all")
        # Program name is $arg.
        delete_program "$arg"
        # Custom cleaning for each program.
        case "$arg" in
          "Tree_Test")
            ${EXECUTOR_IN_DIR}/clean_grammar "GQL_Test"
            ;;
          "Tree_20240412")
            ${EXECUTOR_IN_DIR}/clean_grammar "GQL_20240412"
            ;;
          "PrintRuleNameList")
            : 
            ;;
          *)
            echo "Unknown program: $arg"
            ;;
        esac
        ;;
      "program")
        # Program name is $arg.
        delete_program "$arg"
        ;;
      "grammar")
        # Grammar name is $arg.
        ${EXECUTOR_IN_DIR}/clean_grammar "$arg"
        ;;
      *)
        echo "Unknown clean command: $command"
        ;;
    esac
  else
    echo "Clean commands are at most two tokens, but we found: $token_count"
  fi
}

cd "$DEVELOPER_HOME" || { echo "Failed to change directory to" "$DEVELOPER_HOME"; exit 1; }
source ${EXECUTOR_IN_DIR}/env_build
clean_command_parser $@
