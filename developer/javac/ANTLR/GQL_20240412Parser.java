// Generated from java-escape by ANTLR 4.11.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class GQL_20240412Parser extends Parser {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IMPLIES=1, BOOLEAN_LITERAL=2, SINGLE_QUOTED_CHARACTER_SEQUENCE=3, DOUBLE_QUOTED_CHARACTER_SEQUENCE=4, 
		ACCENT_QUOTED_CHARACTER_SEQUENCE=5, NO_ESCAPE=6, BYTE_STRING_LITERAL=7, 
		UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX=8, UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX=9, 
		UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX=10, 
		UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX=11, UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX=12, 
		UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX=13, 
		UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX=14, UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX=15, 
		UNSIGNED_DECIMAL_INTEGER=16, UNSIGNED_HEXADECIMAL_INTEGER=17, UNSIGNED_OCTAL_INTEGER=18, 
		UNSIGNED_BINARY_INTEGER=19, ABS=20, ACOS=21, ALL=22, ALL_DIFFERENT=23, 
		AND=24, ANY=25, ARRAY=26, AS=27, ASC=28, ASCENDING=29, ASIN=30, AT=31, 
		ATAN=32, AVG=33, BIG=34, BIGINT=35, BINARY=36, BOOL=37, BOOLEAN=38, BOTH=39, 
		BTRIM=40, BY=41, BYTE_LENGTH=42, BYTES=43, CALL=44, CARDINALITY=45, CASE=46, 
		CAST=47, CEIL=48, CEILING=49, CHAR=50, CHAR_LENGTH=51, CHARACTER_LENGTH=52, 
		CHARACTERISTICS=53, CLOSE=54, COALESCE=55, COLLECT_LIST=56, COMMIT=57, 
		COPY=58, COS=59, COSH=60, COT=61, COUNT=62, CREATE=63, CURRENT_DATE=64, 
		CURRENT_GRAPH=65, CURRENT_PROPERTY_GRAPH=66, CURRENT_SCHEMA=67, CURRENT_TIME=68, 
		CURRENT_TIMESTAMP=69, DATE=70, DATETIME=71, DAY=72, DEC=73, DECIMAL=74, 
		DEGREES=75, DELETE=76, DESC=77, DESCENDING=78, DETACH=79, DISTINCT=80, 
		DOUBLE=81, DROP=82, DURATION=83, DURATION_BETWEEN=84, ELEMENT_ID=85, ELSE=86, 
		END=87, EXCEPT=88, EXISTS=89, EXP=90, FILTER=91, FINISH=92, FLOAT=93, 
		FLOAT16=94, FLOAT32=95, FLOAT64=96, FLOAT128=97, FLOAT256=98, FLOOR=99, 
		FOR=100, FROM=101, GROUP=102, HAVING=103, HOME_GRAPH=104, HOME_PROPERTY_GRAPH=105, 
		HOME_SCHEMA=106, HOUR=107, IF=108, IN=109, INSERT=110, INT=111, INTEGER=112, 
		INT8=113, INTEGER8=114, INT16=115, INTEGER16=116, INT32=117, INTEGER32=118, 
		INT64=119, INTEGER64=120, INT128=121, INTEGER128=122, INT256=123, INTEGER256=124, 
		INTERSECT=125, INTERVAL=126, IS=127, LEADING=128, LEFT=129, LET=130, LIKE=131, 
		LIMIT=132, LIST=133, LN=134, LOCAL=135, LOCAL_DATETIME=136, LOCAL_TIME=137, 
		LOCAL_TIMESTAMP=138, LOG=139, LOG10=140, LOWER=141, LTRIM=142, MATCH=143, 
		MAX=144, MIN=145, MINUTE=146, MOD=147, MONTH=148, NEXT=149, NODETACH=150, 
		NORMALIZE=151, NOT=152, NOTHING=153, NULL=154, NULLS=155, NULLIF=156, 
		OCTET_LENGTH=157, OF=158, OFFSET=159, OPTIONAL=160, OR=161, ORDER=162, 
		OTHERWISE=163, PARAMETER=164, PARAMETERS=165, PATH=166, PATH_LENGTH=167, 
		PATHS=168, PERCENTILE_CONT=169, PERCENTILE_DISC=170, POWER=171, PRECISION=172, 
		PROPERTY_EXISTS=173, RADIANS=174, REAL=175, RECORD=176, REMOVE=177, REPLACE=178, 
		RESET=179, RETURN=180, RIGHT=181, ROLLBACK=182, RTRIM=183, SAME=184, SCHEMA=185, 
		SECOND=186, SELECT=187, SESSION=188, SESSION_USER=189, SET=190, SIGNED=191, 
		SIN=192, SINH=193, SIZE=194, SKIP_RESERVED_WORD=195, SMALL=196, SMALLINT=197, 
		SQRT=198, START=199, STDDEV_POP=200, STDDEV_SAMP=201, STRING=202, SUM=203, 
		TAN=204, TANH=205, THEN=206, TIME=207, TIMESTAMP=208, TRAILING=209, TRIM=210, 
		TYPED=211, UBIGINT=212, UINT=213, UINT8=214, UINT16=215, UINT32=216, UINT64=217, 
		UINT128=218, UINT256=219, UNION=220, UNSIGNED=221, UPPER=222, USE=223, 
		USMALLINT=224, VALUE=225, VARBINARY=226, VARCHAR=227, VARIABLE=228, WHEN=229, 
		WHERE=230, WITH=231, XOR=232, YEAR=233, YIELD=234, ZONED=235, ZONED_DATETIME=236, 
		ZONED_TIME=237, ABSTRACT=238, AGGREGATE=239, AGGREGATES=240, ALTER=241, 
		CATALOG=242, CLEAR=243, CLONE=244, CONSTRAINT=245, CURRENT_ROLE=246, CURRENT_USER=247, 
		DATA=248, DIRECTORY=249, DRYRUN=250, EXACT=251, EXISTING=252, FUNCTION=253, 
		GQLSTATUS=254, GRANT=255, INSTANT=256, INFINITY=257, NUMBER=258, NUMERIC=259, 
		ON=260, OPEN=261, PARTITION=262, PROCEDURE=263, PRODUCT=264, PROJECT=265, 
		QUERY=266, RECORDS=267, REFERENCE=268, RENAME=269, REVOKE=270, SUBSTRING=271, 
		SYSTEM_USER=272, TEMPORAL=273, UNIQUE=274, UNIT=275, VALUES=276, ACYCLIC=277, 
		BINDING=278, BINDINGS=279, CONNECTING=280, DESTINATION=281, DIFFERENT=282, 
		DIRECTED=283, EDGE=284, EDGES=285, ELEMENT=286, ELEMENTS=287, FIRST=288, 
		GRAPH=289, GROUPS=290, KEEP=291, LABEL=292, LABELED=293, LABELS=294, LAST=295, 
		NFC=296, NFD=297, NFKC=298, NFKD=299, NO=300, NODE=301, NORMALIZED=302, 
		ONLY=303, ORDINALITY=304, PROPERTY=305, READ=306, RELATIONSHIP=307, RELATIONSHIPS=308, 
		REPEATABLE=309, SHORTEST=310, SIMPLE=311, SOURCE=312, TABLE=313, TEMP=314, 
		TO=315, TRAIL=316, TRANSACTION=317, TYPE=318, UNDIRECTED=319, VERTEX=320, 
		WALK=321, WITHOUT=322, WRITE=323, ZONE=324, REGULAR_IDENTIFIER=325, SUBSTITUTED_PARAMETER_REFERENCE=326, 
		GENERAL_PARAMETER_REFERENCE=327, MULTISET_ALTERNATION_OPERATOR=328, BRACKET_RIGHT_ARROW=329, 
		BRACKET_TILDE_RIGHT_ARROW=330, CONCATENATION_OPERATOR=331, DOUBLE_COLON=332, 
		DOUBLE_DOLLAR_SIGN=333, DOUBLE_PERIOD=334, GREATER_THAN_OR_EQUALS_OPERATOR=335, 
		LEFT_ARROW=336, LEFT_ARROW_TILDE=337, LEFT_ARROW_BRACKET=338, LEFT_ARROW_TILDE_BRACKET=339, 
		LEFT_MINUS_RIGHT=340, LEFT_MINUS_SLASH=341, LEFT_TILDE_SLASH=342, LESS_THAN_OR_EQUALS_OPERATOR=343, 
		MINUS_LEFT_BRACKET=344, MINUS_SLASH=345, NOT_EQUALS_OPERATOR=346, RIGHT_ARROW=347, 
		RIGHT_BRACKET_MINUS=348, RIGHT_BRACKET_TILDE=349, RIGHT_DOUBLE_ARROW=350, 
		SLASH_MINUS=351, SLASH_MINUS_RIGHT=352, SLASH_TILDE=353, SLASH_TILDE_RIGHT=354, 
		TILDE_LEFT_BRACKET=355, TILDE_RIGHT_ARROW=356, TILDE_SLASH=357, AMPERSAND=358, 
		ASTERISK=359, COLON=360, COMMA=361, COMMERCIAL_AT=362, DOLLAR_SIGN=363, 
		DOUBLE_QUOTE=364, EQUALS_OPERATOR=365, EXCLAMATION_MARK=366, RIGHT_ANGLE_BRACKET=367, 
		GRAVE_ACCENT=368, LEFT_BRACE=369, LEFT_BRACKET=370, LEFT_PAREN=371, LEFT_ANGLE_BRACKET=372, 
		MINUS_SIGN=373, PERCENT=374, PERIOD=375, PLUS_SIGN=376, QUESTION_MARK=377, 
		QUOTE=378, REVERSE_SOLIDUS=379, RIGHT_BRACE=380, RIGHT_BRACKET=381, RIGHT_PAREN=382, 
		SOLIDUS=383, TILDE=384, UNDERSCORE=385, VERTICAL_BAR=386, SP=387, WHITESPACE=388, 
		BRACKETED_COMMENT=389, SIMPLE_COMMENT_SOLIDUS=390, SIMPLE_COMMENT_MINUS=391;
	public static final int
		RULE_gqlProgram = 0, RULE_programActivity = 1, RULE_sessionActivity = 2, 
		RULE_transactionActivity = 3, RULE_endTransactionCommand = 4, RULE_sessionSetCommand = 5, 
		RULE_sessionSetSchemaClause = 6, RULE_sessionSetGraphClause = 7, RULE_sessionSetTimeZoneClause = 8, 
		RULE_setTimeZoneValue = 9, RULE_sessionSetParameterClause = 10, RULE_sessionSetGraphParameterClause = 11, 
		RULE_sessionSetBindingTableParameterClause = 12, RULE_sessionSetValueParameterClause = 13, 
		RULE_sessionSetParameterName = 14, RULE_sessionResetCommand = 15, RULE_sessionResetArguments = 16, 
		RULE_sessionCloseCommand = 17, RULE_sessionParameterSpecification = 18, 
		RULE_startTransactionCommand = 19, RULE_transactionCharacteristics = 20, 
		RULE_transactionMode = 21, RULE_transactionAccessMode = 22, RULE_rollbackCommand = 23, 
		RULE_commitCommand = 24, RULE_nestedProcedureSpecification = 25, RULE_procedureSpecification = 26, 
		RULE_nestedDataModifyingProcedureSpecification = 27, RULE_nestedQuerySpecification = 28, 
		RULE_procedureBody = 29, RULE_bindingVariableDefinitionBlock = 30, RULE_bindingVariableDefinition = 31, 
		RULE_statementBlock = 32, RULE_statement = 33, RULE_nextStatement = 34, 
		RULE_graphVariableDefinition = 35, RULE_optTypedGraphInitializer = 36, 
		RULE_graphInitializer = 37, RULE_bindingTableVariableDefinition = 38, 
		RULE_optTypedBindingTableInitializer = 39, RULE_bindingTableInitializer = 40, 
		RULE_valueVariableDefinition = 41, RULE_optTypedValueInitializer = 42, 
		RULE_valueInitializer = 43, RULE_graphExpression = 44, RULE_currentGraph = 45, 
		RULE_bindingTableExpression = 46, RULE_nestedBindingTableQuerySpecification = 47, 
		RULE_objectExpressionPrimary = 48, RULE_linearCatalogModifyingStatement = 49, 
		RULE_simpleCatalogModifyingStatement = 50, RULE_primitiveCatalogModifyingStatement = 51, 
		RULE_createSchemaStatement = 52, RULE_dropSchemaStatement = 53, RULE_createGraphStatement = 54, 
		RULE_openGraphType = 55, RULE_ofGraphType = 56, RULE_graphTypeLikeGraph = 57, 
		RULE_graphSource = 58, RULE_dropGraphStatement = 59, RULE_createGraphTypeStatement = 60, 
		RULE_graphTypeSource = 61, RULE_copyOfGraphType = 62, RULE_dropGraphTypeStatement = 63, 
		RULE_callCatalogModifyingProcedureStatement = 64, RULE_linearDataModifyingStatement = 65, 
		RULE_focusedLinearDataModifyingStatement = 66, RULE_focusedLinearDataModifyingStatementBody = 67, 
		RULE_focusedNestedDataModifyingProcedureSpecification = 68, RULE_ambientLinearDataModifyingStatement = 69, 
		RULE_ambientLinearDataModifyingStatementBody = 70, RULE_simpleLinearDataAccessingStatement = 71, 
		RULE_simpleDataModifyingStatement = 72, RULE_primitiveDataModifyingStatement = 73, 
		RULE_insertStatement = 74, RULE_setStatement = 75, RULE_setItemList = 76, 
		RULE_setItem = 77, RULE_setPropertyItem = 78, RULE_setAllPropertiesItem = 79, 
		RULE_setLabelItem = 80, RULE_removeStatement = 81, RULE_removeItemList = 82, 
		RULE_removeItem = 83, RULE_removePropertyItem = 84, RULE_removeLabelItem = 85, 
		RULE_deleteStatement = 86, RULE_deleteItemList = 87, RULE_deleteItem = 88, 
		RULE_callDataModifyingProcedureStatement = 89, RULE_compositeQueryStatement = 90, 
		RULE_compositeQueryExpression = 91, RULE_queryConjunction = 92, RULE_setOperator = 93, 
		RULE_compositeQueryPrimary = 94, RULE_linearQueryStatement = 95, RULE_focusedLinearQueryStatement = 96, 
		RULE_focusedLinearQueryStatementPart = 97, RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 98, 
		RULE_focusedPrimitiveResultStatement = 99, RULE_focusedNestedQuerySpecification = 100, 
		RULE_ambientLinearQueryStatement = 101, RULE_simpleLinearQueryStatement = 102, 
		RULE_simpleQueryStatement = 103, RULE_primitiveQueryStatement = 104, RULE_matchStatement = 105, 
		RULE_simpleMatchStatement = 106, RULE_optionalMatchStatement = 107, RULE_optionalOperand = 108, 
		RULE_matchStatementBlock = 109, RULE_callQueryStatement = 110, RULE_filterStatement = 111, 
		RULE_letStatement = 112, RULE_letVariableDefinitionList = 113, RULE_letVariableDefinition = 114, 
		RULE_forStatement = 115, RULE_forItem = 116, RULE_forItemAlias = 117, 
		RULE_forItemSource = 118, RULE_forOrdinalityOrOffset = 119, RULE_orderByAndPageStatement = 120, 
		RULE_primitiveResultStatement = 121, RULE_returnStatement = 122, RULE_returnStatementBody = 123, 
		RULE_returnItemList = 124, RULE_returnItem = 125, RULE_returnItemAlias = 126, 
		RULE_selectStatement = 127, RULE_selectItemList = 128, RULE_selectItem = 129, 
		RULE_selectItemAlias = 130, RULE_havingClause = 131, RULE_selectStatementBody = 132, 
		RULE_selectGraphMatchList = 133, RULE_selectGraphMatch = 134, RULE_selectQuerySpecification = 135, 
		RULE_callProcedureStatement = 136, RULE_procedureCall = 137, RULE_inlineProcedureCall = 138, 
		RULE_variableScopeClause = 139, RULE_bindingVariableReferenceList = 140, 
		RULE_namedProcedureCall = 141, RULE_procedureArgumentList = 142, RULE_procedureArgument = 143, 
		RULE_atSchemaClause = 144, RULE_useGraphClause = 145, RULE_graphPatternBindingTable = 146, 
		RULE_graphPatternYieldClause = 147, RULE_graphPatternYieldItemList = 148, 
		RULE_graphPatternYieldItem = 149, RULE_graphPattern = 150, RULE_matchMode = 151, 
		RULE_repeatableElementsMatchMode = 152, RULE_differentEdgesMatchMode = 153, 
		RULE_elementBindingsOrElements = 154, RULE_edgeBindingsOrEdges = 155, 
		RULE_pathPatternList = 156, RULE_pathPattern = 157, RULE_pathVariableDeclaration = 158, 
		RULE_keepClause = 159, RULE_graphPatternWhereClause = 160, RULE_insertGraphPattern = 161, 
		RULE_insertPathPatternList = 162, RULE_insertPathPattern = 163, RULE_insertNodePattern = 164, 
		RULE_insertEdgePattern = 165, RULE_insertEdgePointingLeft = 166, RULE_insertEdgePointingRight = 167, 
		RULE_insertEdgeUndirected = 168, RULE_insertElementPatternFiller = 169, 
		RULE_labelAndPropertySetSpecification = 170, RULE_pathPatternPrefix = 171, 
		RULE_pathModePrefix = 172, RULE_pathMode = 173, RULE_pathSearchPrefix = 174, 
		RULE_allPathSearch = 175, RULE_pathOrPaths = 176, RULE_anyPathSearch = 177, 
		RULE_numberOfPaths = 178, RULE_shortestPathSearch = 179, RULE_allShortestPathSearch = 180, 
		RULE_anyShortestPathSearch = 181, RULE_countedShortestPathSearch = 182, 
		RULE_countedShortestGroupSearch = 183, RULE_numberOfGroups = 184, RULE_pathPatternExpression = 185, 
		RULE_pathTerm = 186, RULE_pathFactor = 187, RULE_pathPrimary = 188, RULE_elementPattern = 189, 
		RULE_nodePattern = 190, RULE_elementPatternFiller = 191, RULE_elementVariableDeclaration = 192, 
		RULE_isLabelExpression = 193, RULE_isOrColon = 194, RULE_elementPatternPredicate = 195, 
		RULE_elementPatternWhereClause = 196, RULE_elementPropertySpecification = 197, 
		RULE_propertyKeyValuePairList = 198, RULE_propertyKeyValuePair = 199, 
		RULE_edgePattern = 200, RULE_fullEdgePattern = 201, RULE_fullEdgePointingLeft = 202, 
		RULE_fullEdgeUndirected = 203, RULE_fullEdgePointingRight = 204, RULE_fullEdgeLeftOrUndirected = 205, 
		RULE_fullEdgeUndirectedOrRight = 206, RULE_fullEdgeLeftOrRight = 207, 
		RULE_fullEdgeAnyDirection = 208, RULE_abbreviatedEdgePattern = 209, RULE_parenthesizedPathPatternExpression = 210, 
		RULE_subpathVariableDeclaration = 211, RULE_parenthesizedPathPatternWhereClause = 212, 
		RULE_labelExpression = 213, RULE_pathVariableReference = 214, RULE_elementVariableReference = 215, 
		RULE_graphPatternQuantifier = 216, RULE_fixedQuantifier = 217, RULE_generalQuantifier = 218, 
		RULE_lowerBound = 219, RULE_upperBound = 220, RULE_simplifiedPathPatternExpression = 221, 
		RULE_simplifiedDefaultingLeft = 222, RULE_simplifiedDefaultingUndirected = 223, 
		RULE_simplifiedDefaultingRight = 224, RULE_simplifiedDefaultingLeftOrUndirected = 225, 
		RULE_simplifiedDefaultingUndirectedOrRight = 226, RULE_simplifiedDefaultingLeftOrRight = 227, 
		RULE_simplifiedDefaultingAnyDirection = 228, RULE_simplifiedContents = 229, 
		RULE_simplifiedPathUnion = 230, RULE_simplifiedMultisetAlternation = 231, 
		RULE_simplifiedTerm = 232, RULE_simplifiedFactorLow = 233, RULE_simplifiedFactorHigh = 234, 
		RULE_simplifiedQuantified = 235, RULE_simplifiedQuestioned = 236, RULE_simplifiedTertiary = 237, 
		RULE_simplifiedDirectionOverride = 238, RULE_simplifiedOverrideLeft = 239, 
		RULE_simplifiedOverrideUndirected = 240, RULE_simplifiedOverrideRight = 241, 
		RULE_simplifiedOverrideLeftOrUndirected = 242, RULE_simplifiedOverrideUndirectedOrRight = 243, 
		RULE_simplifiedOverrideLeftOrRight = 244, RULE_simplifiedOverrideAnyDirection = 245, 
		RULE_simplifiedSecondary = 246, RULE_simplifiedNegation = 247, RULE_simplifiedPrimary = 248, 
		RULE_whereClause = 249, RULE_yieldClause = 250, RULE_yieldItemList = 251, 
		RULE_yieldItem = 252, RULE_yieldItemName = 253, RULE_yieldItemAlias = 254, 
		RULE_groupByClause = 255, RULE_groupingElementList = 256, RULE_groupingElement = 257, 
		RULE_emptyGroupingSet = 258, RULE_orderByClause = 259, RULE_sortSpecificationList = 260, 
		RULE_sortSpecification = 261, RULE_sortKey = 262, RULE_orderingSpecification = 263, 
		RULE_nullOrdering = 264, RULE_limitClause = 265, RULE_offsetClause = 266, 
		RULE_offsetSynonym = 267, RULE_schemaReference = 268, RULE_absoluteCatalogSchemaReference = 269, 
		RULE_catalogSchemaParentAndName = 270, RULE_relativeCatalogSchemaReference = 271, 
		RULE_predefinedSchemaReference = 272, RULE_absoluteDirectoryPath = 273, 
		RULE_relativeDirectoryPath = 274, RULE_simpleDirectoryPath = 275, RULE_graphReference = 276, 
		RULE_catalogGraphParentAndName = 277, RULE_homeGraph = 278, RULE_graphTypeReference = 279, 
		RULE_catalogGraphTypeParentAndName = 280, RULE_bindingTableReference = 281, 
		RULE_procedureReference = 282, RULE_catalogProcedureParentAndName = 283, 
		RULE_catalogObjectParentReference = 284, RULE_referenceParameterSpecification = 285, 
		RULE_nestedGraphTypeSpecification = 286, RULE_graphTypeSpecificationBody = 287, 
		RULE_elementTypeList = 288, RULE_elementTypeSpecification = 289, RULE_nodeTypeSpecification = 290, 
		RULE_nodeTypePattern = 291, RULE_nodeTypePhrase = 292, RULE_nodeTypePhraseFiller = 293, 
		RULE_nodeTypeFiller = 294, RULE_localNodeTypeAlias = 295, RULE_nodeTypeImpliedContent = 296, 
		RULE_nodeTypeKeyLabelSet = 297, RULE_nodeTypeLabelSet = 298, RULE_nodeTypePropertyTypes = 299, 
		RULE_edgeTypeSpecification = 300, RULE_edgeTypePattern = 301, RULE_edgeTypePhrase = 302, 
		RULE_edgeTypePhraseFiller = 303, RULE_edgeTypeFiller = 304, RULE_edgeTypeImpliedContent = 305, 
		RULE_edgeTypeKeyLabelSet = 306, RULE_edgeTypeLabelSet = 307, RULE_edgeTypePropertyTypes = 308, 
		RULE_edgeTypePatternDirected = 309, RULE_edgeTypePatternPointingRight = 310, 
		RULE_edgeTypePatternPointingLeft = 311, RULE_edgeTypePatternUndirected = 312, 
		RULE_arcTypePointingRight = 313, RULE_arcTypePointingLeft = 314, RULE_arcTypeUndirected = 315, 
		RULE_sourceNodeTypeReference = 316, RULE_destinationNodeTypeReference = 317, 
		RULE_edgeKind = 318, RULE_endpointPairPhrase = 319, RULE_endpointPair = 320, 
		RULE_endpointPairDirected = 321, RULE_endpointPairPointingRight = 322, 
		RULE_endpointPairPointingLeft = 323, RULE_endpointPairUndirected = 324, 
		RULE_connectorPointingRight = 325, RULE_connectorUndirected = 326, RULE_sourceNodeTypeAlias = 327, 
		RULE_destinationNodeTypeAlias = 328, RULE_labelSetPhrase = 329, RULE_labelSetSpecification = 330, 
		RULE_propertyTypesSpecification = 331, RULE_propertyTypeList = 332, RULE_propertyType = 333, 
		RULE_propertyValueType = 334, RULE_bindingTableType = 335, RULE_valueType = 336, 
		RULE_typed = 337, RULE_predefinedType = 338, RULE_booleanType = 339, RULE_characterStringType = 340, 
		RULE_byteStringType = 341, RULE_minLength = 342, RULE_maxLength = 343, 
		RULE_fixedLength = 344, RULE_numericType = 345, RULE_exactNumericType = 346, 
		RULE_binaryExactNumericType = 347, RULE_signedBinaryExactNumericType = 348, 
		RULE_unsignedBinaryExactNumericType = 349, RULE_verboseBinaryExactNumericType = 350, 
		RULE_decimalExactNumericType = 351, RULE_precision = 352, RULE_scale = 353, 
		RULE_approximateNumericType = 354, RULE_temporalType = 355, RULE_temporalInstantType = 356, 
		RULE_datetimeType = 357, RULE_localdatetimeType = 358, RULE_dateType = 359, 
		RULE_timeType = 360, RULE_localtimeType = 361, RULE_temporalDurationType = 362, 
		RULE_temporalDurationQualifier = 363, RULE_referenceValueType = 364, RULE_immaterialValueType = 365, 
		RULE_nullType = 366, RULE_emptyType = 367, RULE_graphReferenceValueType = 368, 
		RULE_closedGraphReferenceValueType = 369, RULE_openGraphReferenceValueType = 370, 
		RULE_bindingTableReferenceValueType = 371, RULE_nodeReferenceValueType = 372, 
		RULE_closedNodeReferenceValueType = 373, RULE_openNodeReferenceValueType = 374, 
		RULE_edgeReferenceValueType = 375, RULE_closedEdgeReferenceValueType = 376, 
		RULE_openEdgeReferenceValueType = 377, RULE_pathValueType = 378, RULE_listValueTypeName = 379, 
		RULE_listValueTypeNameSynonym = 380, RULE_recordType = 381, RULE_fieldTypesSpecification = 382, 
		RULE_fieldTypeList = 383, RULE_notNull = 384, RULE_fieldType = 385, RULE_searchCondition = 386, 
		RULE_predicate = 387, RULE_comparisonPredicatePart2 = 388, RULE_compOp = 389, 
		RULE_existsPredicate = 390, RULE_nullPredicate = 391, RULE_nullPredicatePart2 = 392, 
		RULE_valueTypePredicate = 393, RULE_valueTypePredicatePart2 = 394, RULE_normalizedPredicatePart2 = 395, 
		RULE_directedPredicate = 396, RULE_directedPredicatePart2 = 397, RULE_labeledPredicate = 398, 
		RULE_labeledPredicatePart2 = 399, RULE_isLabeledOrColon = 400, RULE_sourceDestinationPredicate = 401, 
		RULE_nodeReference = 402, RULE_sourcePredicatePart2 = 403, RULE_destinationPredicatePart2 = 404, 
		RULE_edgeReference = 405, RULE_all_differentPredicate = 406, RULE_samePredicate = 407, 
		RULE_property_existsPredicate = 408, RULE_valueExpression = 409, RULE_valueFunction = 410, 
		RULE_booleanValueExpression = 411, RULE_characterOrByteStringFunction = 412, 
		RULE_subCharacterOrByteString = 413, RULE_trimSingleCharacterOrByteString = 414, 
		RULE_foldCharacterString = 415, RULE_trimMultiCharacterCharacterString = 416, 
		RULE_normalizeCharacterString = 417, RULE_nodeReferenceValueExpression = 418, 
		RULE_edgeReferenceValueExpression = 419, RULE_aggregatingValueExpression = 420, 
		RULE_valueExpressionPrimary = 421, RULE_parenthesizedValueExpression = 422, 
		RULE_nonParenthesizedValueExpressionPrimary = 423, RULE_nonParenthesizedValueExpressionPrimarySpecialCase = 424, 
		RULE_unsignedValueSpecification = 425, RULE_nonNegativeIntegerSpecification = 426, 
		RULE_generalValueSpecification = 427, RULE_dynamicParameterSpecification = 428, 
		RULE_letValueExpression = 429, RULE_valueQueryExpression = 430, RULE_caseExpression = 431, 
		RULE_caseAbbreviation = 432, RULE_caseSpecification = 433, RULE_simpleCase = 434, 
		RULE_searchedCase = 435, RULE_simpleWhenClause = 436, RULE_searchedWhenClause = 437, 
		RULE_elseClause = 438, RULE_caseOperand = 439, RULE_whenOperandList = 440, 
		RULE_whenOperand = 441, RULE_result = 442, RULE_resultExpression = 443, 
		RULE_castSpecification = 444, RULE_castOperand = 445, RULE_castTarget = 446, 
		RULE_aggregateFunction = 447, RULE_generalSetFunction = 448, RULE_binarySetFunction = 449, 
		RULE_generalSetFunctionType = 450, RULE_setQuantifier = 451, RULE_binarySetFunctionType = 452, 
		RULE_dependentValueExpression = 453, RULE_independentValueExpression = 454, 
		RULE_element_idFunction = 455, RULE_bindingVariableReference = 456, RULE_pathValueExpression = 457, 
		RULE_pathValueConstructor = 458, RULE_pathValueConstructorByEnumeration = 459, 
		RULE_pathElementList = 460, RULE_pathElementListStart = 461, RULE_pathElementListStep = 462, 
		RULE_listValueExpression = 463, RULE_listValueFunction = 464, RULE_trimListFunction = 465, 
		RULE_elementsFunction = 466, RULE_listValueConstructor = 467, RULE_listValueConstructorByEnumeration = 468, 
		RULE_listElementList = 469, RULE_listElement = 470, RULE_recordConstructor = 471, 
		RULE_fieldsSpecification = 472, RULE_fieldList = 473, RULE_field = 474, 
		RULE_truthValue = 475, RULE_numericValueExpression = 476, RULE_numericValueFunction = 477, 
		RULE_lengthExpression = 478, RULE_cardinalityExpression = 479, RULE_cardinalityExpressionArgument = 480, 
		RULE_charLengthExpression = 481, RULE_byteLengthExpression = 482, RULE_pathLengthExpression = 483, 
		RULE_absoluteValueExpression = 484, RULE_modulusExpression = 485, RULE_numericValueExpressionDividend = 486, 
		RULE_numericValueExpressionDivisor = 487, RULE_trigonometricFunction = 488, 
		RULE_trigonometricFunctionName = 489, RULE_generalLogarithmFunction = 490, 
		RULE_generalLogarithmBase = 491, RULE_generalLogarithmArgument = 492, 
		RULE_commonLogarithm = 493, RULE_naturalLogarithm = 494, RULE_exponentialFunction = 495, 
		RULE_powerFunction = 496, RULE_numericValueExpressionBase = 497, RULE_numericValueExpressionExponent = 498, 
		RULE_squareRoot = 499, RULE_floorFunction = 500, RULE_ceilingFunction = 501, 
		RULE_characterStringValueExpression = 502, RULE_byteStringValueExpression = 503, 
		RULE_trimOperands = 504, RULE_trimCharacterOrByteStringSource = 505, RULE_trimSpecification = 506, 
		RULE_trimCharacterOrByteString = 507, RULE_normalForm = 508, RULE_stringLength = 509, 
		RULE_datetimeValueExpression = 510, RULE_datetimeValueFunction = 511, 
		RULE_dateFunction = 512, RULE_timeFunction = 513, RULE_localtimeFunction = 514, 
		RULE_datetimeFunction = 515, RULE_localdatetimeFunction = 516, RULE_dateFunctionParameters = 517, 
		RULE_timeFunctionParameters = 518, RULE_datetimeFunctionParameters = 519, 
		RULE_durationValueExpression = 520, RULE_datetimeSubtraction = 521, RULE_datetimeSubtractionParameters = 522, 
		RULE_datetimeValueExpression1 = 523, RULE_datetimeValueExpression2 = 524, 
		RULE_durationValueFunction = 525, RULE_durationFunction = 526, RULE_durationFunctionParameters = 527, 
		RULE_objectName = 528, RULE_objectNameOrBindingVariable = 529, RULE_directoryName = 530, 
		RULE_schemaName = 531, RULE_graphName = 532, RULE_delimitedGraphName = 533, 
		RULE_graphTypeName = 534, RULE_nodeTypeName = 535, RULE_edgeTypeName = 536, 
		RULE_bindingTableName = 537, RULE_delimitedBindingTableName = 538, RULE_procedureName = 539, 
		RULE_labelName = 540, RULE_propertyName = 541, RULE_fieldName = 542, RULE_elementVariable = 543, 
		RULE_pathVariable = 544, RULE_subpathVariable = 545, RULE_bindingVariable = 546, 
		RULE_unsignedLiteral = 547, RULE_generalLiteral = 548, RULE_temporalLiteral = 549, 
		RULE_dateLiteral = 550, RULE_timeLiteral = 551, RULE_datetimeLiteral = 552, 
		RULE_listLiteral = 553, RULE_recordLiteral = 554, RULE_identifier = 555, 
		RULE_regularIdentifier = 556, RULE_timeZoneString = 557, RULE_characterStringLiteral = 558, 
		RULE_unsignedNumericLiteral = 559, RULE_exactNumericLiteral = 560, RULE_approximateNumericLiteral = 561, 
		RULE_unsignedInteger = 562, RULE_unsignedDecimalInteger = 563, RULE_nullLiteral = 564, 
		RULE_dateString = 565, RULE_timeString = 566, RULE_datetimeString = 567, 
		RULE_durationLiteral = 568, RULE_durationString = 569, RULE_nodeSynonym = 570, 
		RULE_edgesSynonym = 571, RULE_edgeSynonym = 572, RULE_nonReservedWords = 573;
	private static String[] makeRuleNames() {
		return new String[] {
			"gqlProgram", "programActivity", "sessionActivity", "transactionActivity", 
			"endTransactionCommand", "sessionSetCommand", "sessionSetSchemaClause", 
			"sessionSetGraphClause", "sessionSetTimeZoneClause", "setTimeZoneValue", 
			"sessionSetParameterClause", "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
			"sessionSetValueParameterClause", "sessionSetParameterName", "sessionResetCommand", 
			"sessionResetArguments", "sessionCloseCommand", "sessionParameterSpecification", 
			"startTransactionCommand", "transactionCharacteristics", "transactionMode", 
			"transactionAccessMode", "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
			"procedureSpecification", "nestedDataModifyingProcedureSpecification", 
			"nestedQuerySpecification", "procedureBody", "bindingVariableDefinitionBlock", 
			"bindingVariableDefinition", "statementBlock", "statement", "nextStatement", 
			"graphVariableDefinition", "optTypedGraphInitializer", "graphInitializer", 
			"bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
			"bindingTableInitializer", "valueVariableDefinition", "optTypedValueInitializer", 
			"valueInitializer", "graphExpression", "currentGraph", "bindingTableExpression", 
			"nestedBindingTableQuerySpecification", "objectExpressionPrimary", "linearCatalogModifyingStatement", 
			"simpleCatalogModifyingStatement", "primitiveCatalogModifyingStatement", 
			"createSchemaStatement", "dropSchemaStatement", "createGraphStatement", 
			"openGraphType", "ofGraphType", "graphTypeLikeGraph", "graphSource", 
			"dropGraphStatement", "createGraphTypeStatement", "graphTypeSource", 
			"copyOfGraphType", "dropGraphTypeStatement", "callCatalogModifyingProcedureStatement", 
			"linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
			"focusedLinearDataModifyingStatementBody", "focusedNestedDataModifyingProcedureSpecification", 
			"ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
			"simpleLinearDataAccessingStatement", "simpleDataModifyingStatement", 
			"primitiveDataModifyingStatement", "insertStatement", "setStatement", 
			"setItemList", "setItem", "setPropertyItem", "setAllPropertiesItem", 
			"setLabelItem", "removeStatement", "removeItemList", "removeItem", "removePropertyItem", 
			"removeLabelItem", "deleteStatement", "deleteItemList", "deleteItem", 
			"callDataModifyingProcedureStatement", "compositeQueryStatement", "compositeQueryExpression", 
			"queryConjunction", "setOperator", "compositeQueryPrimary", "linearQueryStatement", 
			"focusedLinearQueryStatement", "focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
			"focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
			"ambientLinearQueryStatement", "simpleLinearQueryStatement", "simpleQueryStatement", 
			"primitiveQueryStatement", "matchStatement", "simpleMatchStatement", 
			"optionalMatchStatement", "optionalOperand", "matchStatementBlock", "callQueryStatement", 
			"filterStatement", "letStatement", "letVariableDefinitionList", "letVariableDefinition", 
			"forStatement", "forItem", "forItemAlias", "forItemSource", "forOrdinalityOrOffset", 
			"orderByAndPageStatement", "primitiveResultStatement", "returnStatement", 
			"returnStatementBody", "returnItemList", "returnItem", "returnItemAlias", 
			"selectStatement", "selectItemList", "selectItem", "selectItemAlias", 
			"havingClause", "selectStatementBody", "selectGraphMatchList", "selectGraphMatch", 
			"selectQuerySpecification", "callProcedureStatement", "procedureCall", 
			"inlineProcedureCall", "variableScopeClause", "bindingVariableReferenceList", 
			"namedProcedureCall", "procedureArgumentList", "procedureArgument", "atSchemaClause", 
			"useGraphClause", "graphPatternBindingTable", "graphPatternYieldClause", 
			"graphPatternYieldItemList", "graphPatternYieldItem", "graphPattern", 
			"matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
			"elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
			"pathPattern", "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
			"insertGraphPattern", "insertPathPatternList", "insertPathPattern", "insertNodePattern", 
			"insertEdgePattern", "insertEdgePointingLeft", "insertEdgePointingRight", 
			"insertEdgeUndirected", "insertElementPatternFiller", "labelAndPropertySetSpecification", 
			"pathPatternPrefix", "pathModePrefix", "pathMode", "pathSearchPrefix", 
			"allPathSearch", "pathOrPaths", "anyPathSearch", "numberOfPaths", "shortestPathSearch", 
			"allShortestPathSearch", "anyShortestPathSearch", "countedShortestPathSearch", 
			"countedShortestGroupSearch", "numberOfGroups", "pathPatternExpression", 
			"pathTerm", "pathFactor", "pathPrimary", "elementPattern", "nodePattern", 
			"elementPatternFiller", "elementVariableDeclaration", "isLabelExpression", 
			"isOrColon", "elementPatternPredicate", "elementPatternWhereClause", 
			"elementPropertySpecification", "propertyKeyValuePairList", "propertyKeyValuePair", 
			"edgePattern", "fullEdgePattern", "fullEdgePointingLeft", "fullEdgeUndirected", 
			"fullEdgePointingRight", "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
			"fullEdgeLeftOrRight", "fullEdgeAnyDirection", "abbreviatedEdgePattern", 
			"parenthesizedPathPatternExpression", "subpathVariableDeclaration", "parenthesizedPathPatternWhereClause", 
			"labelExpression", "pathVariableReference", "elementVariableReference", 
			"graphPatternQuantifier", "fixedQuantifier", "generalQuantifier", "lowerBound", 
			"upperBound", "simplifiedPathPatternExpression", "simplifiedDefaultingLeft", 
			"simplifiedDefaultingUndirected", "simplifiedDefaultingRight", "simplifiedDefaultingLeftOrUndirected", 
			"simplifiedDefaultingUndirectedOrRight", "simplifiedDefaultingLeftOrRight", 
			"simplifiedDefaultingAnyDirection", "simplifiedContents", "simplifiedPathUnion", 
			"simplifiedMultisetAlternation", "simplifiedTerm", "simplifiedFactorLow", 
			"simplifiedFactorHigh", "simplifiedQuantified", "simplifiedQuestioned", 
			"simplifiedTertiary", "simplifiedDirectionOverride", "simplifiedOverrideLeft", 
			"simplifiedOverrideUndirected", "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
			"simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
			"simplifiedOverrideAnyDirection", "simplifiedSecondary", "simplifiedNegation", 
			"simplifiedPrimary", "whereClause", "yieldClause", "yieldItemList", "yieldItem", 
			"yieldItemName", "yieldItemAlias", "groupByClause", "groupingElementList", 
			"groupingElement", "emptyGroupingSet", "orderByClause", "sortSpecificationList", 
			"sortSpecification", "sortKey", "orderingSpecification", "nullOrdering", 
			"limitClause", "offsetClause", "offsetSynonym", "schemaReference", "absoluteCatalogSchemaReference", 
			"catalogSchemaParentAndName", "relativeCatalogSchemaReference", "predefinedSchemaReference", 
			"absoluteDirectoryPath", "relativeDirectoryPath", "simpleDirectoryPath", 
			"graphReference", "catalogGraphParentAndName", "homeGraph", "graphTypeReference", 
			"catalogGraphTypeParentAndName", "bindingTableReference", "procedureReference", 
			"catalogProcedureParentAndName", "catalogObjectParentReference", "referenceParameterSpecification", 
			"nestedGraphTypeSpecification", "graphTypeSpecificationBody", "elementTypeList", 
			"elementTypeSpecification", "nodeTypeSpecification", "nodeTypePattern", 
			"nodeTypePhrase", "nodeTypePhraseFiller", "nodeTypeFiller", "localNodeTypeAlias", 
			"nodeTypeImpliedContent", "nodeTypeKeyLabelSet", "nodeTypeLabelSet", 
			"nodeTypePropertyTypes", "edgeTypeSpecification", "edgeTypePattern", 
			"edgeTypePhrase", "edgeTypePhraseFiller", "edgeTypeFiller", "edgeTypeImpliedContent", 
			"edgeTypeKeyLabelSet", "edgeTypeLabelSet", "edgeTypePropertyTypes", "edgeTypePatternDirected", 
			"edgeTypePatternPointingRight", "edgeTypePatternPointingLeft", "edgeTypePatternUndirected", 
			"arcTypePointingRight", "arcTypePointingLeft", "arcTypeUndirected", "sourceNodeTypeReference", 
			"destinationNodeTypeReference", "edgeKind", "endpointPairPhrase", "endpointPair", 
			"endpointPairDirected", "endpointPairPointingRight", "endpointPairPointingLeft", 
			"endpointPairUndirected", "connectorPointingRight", "connectorUndirected", 
			"sourceNodeTypeAlias", "destinationNodeTypeAlias", "labelSetPhrase", 
			"labelSetSpecification", "propertyTypesSpecification", "propertyTypeList", 
			"propertyType", "propertyValueType", "bindingTableType", "valueType", 
			"typed", "predefinedType", "booleanType", "characterStringType", "byteStringType", 
			"minLength", "maxLength", "fixedLength", "numericType", "exactNumericType", 
			"binaryExactNumericType", "signedBinaryExactNumericType", "unsignedBinaryExactNumericType", 
			"verboseBinaryExactNumericType", "decimalExactNumericType", "precision", 
			"scale", "approximateNumericType", "temporalType", "temporalInstantType", 
			"datetimeType", "localdatetimeType", "dateType", "timeType", "localtimeType", 
			"temporalDurationType", "temporalDurationQualifier", "referenceValueType", 
			"immaterialValueType", "nullType", "emptyType", "graphReferenceValueType", 
			"closedGraphReferenceValueType", "openGraphReferenceValueType", "bindingTableReferenceValueType", 
			"nodeReferenceValueType", "closedNodeReferenceValueType", "openNodeReferenceValueType", 
			"edgeReferenceValueType", "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
			"pathValueType", "listValueTypeName", "listValueTypeNameSynonym", "recordType", 
			"fieldTypesSpecification", "fieldTypeList", "notNull", "fieldType", "searchCondition", 
			"predicate", "comparisonPredicatePart2", "compOp", "existsPredicate", 
			"nullPredicate", "nullPredicatePart2", "valueTypePredicate", "valueTypePredicatePart2", 
			"normalizedPredicatePart2", "directedPredicate", "directedPredicatePart2", 
			"labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", "sourceDestinationPredicate", 
			"nodeReference", "sourcePredicatePart2", "destinationPredicatePart2", 
			"edgeReference", "all_differentPredicate", "samePredicate", "property_existsPredicate", 
			"valueExpression", "valueFunction", "booleanValueExpression", "characterOrByteStringFunction", 
			"subCharacterOrByteString", "trimSingleCharacterOrByteString", "foldCharacterString", 
			"trimMultiCharacterCharacterString", "normalizeCharacterString", "nodeReferenceValueExpression", 
			"edgeReferenceValueExpression", "aggregatingValueExpression", "valueExpressionPrimary", 
			"parenthesizedValueExpression", "nonParenthesizedValueExpressionPrimary", 
			"nonParenthesizedValueExpressionPrimarySpecialCase", "unsignedValueSpecification", 
			"nonNegativeIntegerSpecification", "generalValueSpecification", "dynamicParameterSpecification", 
			"letValueExpression", "valueQueryExpression", "caseExpression", "caseAbbreviation", 
			"caseSpecification", "simpleCase", "searchedCase", "simpleWhenClause", 
			"searchedWhenClause", "elseClause", "caseOperand", "whenOperandList", 
			"whenOperand", "result", "resultExpression", "castSpecification", "castOperand", 
			"castTarget", "aggregateFunction", "generalSetFunction", "binarySetFunction", 
			"generalSetFunctionType", "setQuantifier", "binarySetFunctionType", "dependentValueExpression", 
			"independentValueExpression", "element_idFunction", "bindingVariableReference", 
			"pathValueExpression", "pathValueConstructor", "pathValueConstructorByEnumeration", 
			"pathElementList", "pathElementListStart", "pathElementListStep", "listValueExpression", 
			"listValueFunction", "trimListFunction", "elementsFunction", "listValueConstructor", 
			"listValueConstructorByEnumeration", "listElementList", "listElement", 
			"recordConstructor", "fieldsSpecification", "fieldList", "field", "truthValue", 
			"numericValueExpression", "numericValueFunction", "lengthExpression", 
			"cardinalityExpression", "cardinalityExpressionArgument", "charLengthExpression", 
			"byteLengthExpression", "pathLengthExpression", "absoluteValueExpression", 
			"modulusExpression", "numericValueExpressionDividend", "numericValueExpressionDivisor", 
			"trigonometricFunction", "trigonometricFunctionName", "generalLogarithmFunction", 
			"generalLogarithmBase", "generalLogarithmArgument", "commonLogarithm", 
			"naturalLogarithm", "exponentialFunction", "powerFunction", "numericValueExpressionBase", 
			"numericValueExpressionExponent", "squareRoot", "floorFunction", "ceilingFunction", 
			"characterStringValueExpression", "byteStringValueExpression", "trimOperands", 
			"trimCharacterOrByteStringSource", "trimSpecification", "trimCharacterOrByteString", 
			"normalForm", "stringLength", "datetimeValueExpression", "datetimeValueFunction", 
			"dateFunction", "timeFunction", "localtimeFunction", "datetimeFunction", 
			"localdatetimeFunction", "dateFunctionParameters", "timeFunctionParameters", 
			"datetimeFunctionParameters", "durationValueExpression", "datetimeSubtraction", 
			"datetimeSubtractionParameters", "datetimeValueExpression1", "datetimeValueExpression2", 
			"durationValueFunction", "durationFunction", "durationFunctionParameters", 
			"objectName", "objectNameOrBindingVariable", "directoryName", "schemaName", 
			"graphName", "delimitedGraphName", "graphTypeName", "nodeTypeName", "edgeTypeName", 
			"bindingTableName", "delimitedBindingTableName", "procedureName", "labelName", 
			"propertyName", "fieldName", "elementVariable", "pathVariable", "subpathVariable", 
			"bindingVariable", "unsignedLiteral", "generalLiteral", "temporalLiteral", 
			"dateLiteral", "timeLiteral", "datetimeLiteral", "listLiteral", "recordLiteral", 
			"identifier", "regularIdentifier", "timeZoneString", "characterStringLiteral", 
			"unsignedNumericLiteral", "exactNumericLiteral", "approximateNumericLiteral", 
			"unsignedInteger", "unsignedDecimalInteger", "nullLiteral", "dateString", 
			"timeString", "datetimeString", "durationLiteral", "durationString", 
			"nodeSynonym", "edgesSynonym", "edgeSynonym", "nonReservedWords"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, "'ABS'", "'ACOS'", "'ALL'", 
			"'ALL_DIFFERENT'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASCENDING'", 
			"'ASIN'", "'AT'", "'ATAN'", "'AVG'", "'BIG'", "'BIGINT'", "'BINARY'", 
			"'BOOL'", "'BOOLEAN'", "'BOTH'", "'BTRIM'", "'BY'", "'BYTE_LENGTH'", 
			"'BYTES'", "'CALL'", "'CARDINALITY'", "'CASE'", "'CAST'", "'CEIL'", "'CEILING'", 
			"'CHAR'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", "'CHARACTERISTICS'", 
			"'CLOSE'", "'COALESCE'", "'COLLECT_LIST'", "'COMMIT'", "'COPY'", "'COS'", 
			"'COSH'", "'COT'", "'COUNT'", "'CREATE'", "'CURRENT_DATE'", "'CURRENT_GRAPH'", 
			"'CURRENT_PROPERTY_GRAPH'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'DATE'", "'DATETIME'", "'DAY'", "'DEC'", "'DECIMAL'", "'DEGREES'", "'DELETE'", 
			"'DESC'", "'DESCENDING'", "'DETACH'", "'DISTINCT'", "'DOUBLE'", "'DROP'", 
			"'DURATION'", "'DURATION_BETWEEN'", "'ELEMENT_ID'", "'ELSE'", "'END'", 
			"'EXCEPT'", "'EXISTS'", "'EXP'", "'FILTER'", "'FINISH'", "'FLOAT'", "'FLOAT16'", 
			"'FLOAT32'", "'FLOAT64'", "'FLOAT128'", "'FLOAT256'", "'FLOOR'", "'FOR'", 
			"'FROM'", "'GROUP'", "'HAVING'", "'HOME_GRAPH'", "'HOME_PROPERTY_GRAPH'", 
			"'HOME_SCHEMA'", "'HOUR'", "'IF'", "'IN'", "'INSERT'", "'INT'", "'INTEGER'", 
			"'INT8'", "'INTEGER8'", "'INT16'", "'INTEGER16'", "'INT32'", "'INTEGER32'", 
			"'INT64'", "'INTEGER64'", "'INT128'", "'INTEGER128'", "'INT256'", "'INTEGER256'", 
			"'INTERSECT'", "'INTERVAL'", "'IS'", "'LEADING'", "'LEFT'", "'LET'", 
			"'LIKE'", "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", 
			"'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", "'LOG'", "'LOG10'", "'LOWER'", "'LTRIM'", 
			"'MATCH'", "'MAX'", "'MIN'", "'MINUTE'", "'MOD'", "'MONTH'", "'NEXT'", 
			"'NODETACH'", "'NORMALIZE'", "'NOT'", "'NOTHING'", "'NULL'", "'NULLS'", 
			"'NULLIF'", "'OCTET_LENGTH'", "'OF'", "'OFFSET'", "'OPTIONAL'", "'OR'", 
			"'ORDER'", "'OTHERWISE'", "'PARAMETER'", "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", 
			"'PATHS'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POWER'", "'PRECISION'", 
			"'PROPERTY_EXISTS'", "'RADIANS'", "'REAL'", "'RECORD'", "'REMOVE'", "'REPLACE'", 
			"'RESET'", "'RETURN'", "'RIGHT'", "'ROLLBACK'", "'RTRIM'", "'SAME'", 
			"'SCHEMA'", "'SECOND'", "'SELECT'", "'SESSION'", "'SESSION_USER'", "'SET'", 
			"'SIGNED'", "'SIN'", "'SINH'", "'SIZE'", "'SKIP'", "'SMALL'", "'SMALLINT'", 
			"'SQRT'", "'START'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'STRING'", "'SUM'", 
			"'TAN'", "'TANH'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TRAILING'", "'TRIM'", 
			"'TYPED'", "'UBIGINT'", "'UINT'", "'UINT8'", "'UINT16'", "'UINT32'", 
			"'UINT64'", "'UINT128'", "'UINT256'", "'UNION'", "'UNSIGNED'", "'UPPER'", 
			"'USE'", "'USMALLINT'", "'VALUE'", "'VARBINARY'", "'VARCHAR'", "'VARIABLE'", 
			"'WHEN'", "'WHERE'", "'WITH'", "'XOR'", "'YEAR'", "'YIELD'", "'ZONED'", 
			"'ZONED_DATETIME'", "'ZONED_TIME'", "'ABSTRACT'", "'AGGREGATE'", "'AGGREGATES'", 
			"'ALTER'", "'CATALOG'", "'CLEAR'", "'CLONE'", "'CONSTRAINT'", "'CURRENT_ROLE'", 
			"'CURRENT_USER'", "'DATA'", "'DIRECTORY'", "'DRYRUN'", "'EXACT'", "'EXISTING'", 
			"'FUNCTION'", "'GQLSTATUS'", "'GRANT'", "'INSTANT'", "'INFINITY'", "'NUMBER'", 
			"'NUMERIC'", "'ON'", "'OPEN'", "'PARTITION'", "'PROCEDURE'", "'PRODUCT'", 
			"'PROJECT'", "'QUERY'", "'RECORDS'", "'REFERENCE'", "'RENAME'", "'REVOKE'", 
			"'SUBSTRING'", "'SYSTEM_USER'", "'TEMPORAL'", "'UNIQUE'", "'UNIT'", "'VALUES'", 
			"'ACYCLIC'", "'BINDING'", "'BINDINGS'", "'CONNECTING'", "'DESTINATION'", 
			"'DIFFERENT'", "'DIRECTED'", "'EDGE'", "'EDGES'", "'ELEMENT'", "'ELEMENTS'", 
			"'FIRST'", "'GRAPH'", "'GROUPS'", "'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", 
			"'LAST'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODE'", "'NORMALIZED'", 
			"'ONLY'", "'ORDINALITY'", "'PROPERTY'", "'READ'", "'RELATIONSHIP'", "'RELATIONSHIPS'", 
			"'REPEATABLE'", "'SHORTEST'", "'SIMPLE'", "'SOURCE'", "'TABLE'", "'TEMP'", 
			"'TO'", "'TRAIL'", "'TRANSACTION'", "'TYPE'", "'UNDIRECTED'", "'VERTEX'", 
			"'WALK'", "'WITHOUT'", "'WRITE'", "'ZONE'", null, null, null, "'|+|'", 
			"']->'", "']~>'", "'||'", "'::'", "'$$'", "'..'", "'>='", "'<-'", "'<~'", 
			"'<-['", "'<~['", "'<->'", "'<-/'", "'<~/'", "'<='", "'-['", "'-/'", 
			"'<>'", "'->'", "']-'", "']~'", "'=>'", "'/-'", "'/->'", "'/~'", "'/~>'", 
			"'~['", "'~>'", "'~/'", "'&'", "'*'", "':'", "','", "'@'", "'$'", "'\"'", 
			"'='", "'!'", "'>'", "'`'", "'{'", "'['", "'('", "'<'", "'-'", "'%'", 
			"'.'", "'+'", "'?'", "'''", "'\\'", "'}'", "']'", "')'", "'/'", "'~'", 
			"'_'", "'|'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "IMPLIES", "BOOLEAN_LITERAL", "SINGLE_QUOTED_CHARACTER_SEQUENCE", 
			"DOUBLE_QUOTED_CHARACTER_SEQUENCE", "ACCENT_QUOTED_CHARACTER_SEQUENCE", 
			"NO_ESCAPE", "BYTE_STRING_LITERAL", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
			"UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
			"UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX", 
			"UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
			"UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX", "UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX", 
			"UNSIGNED_DECIMAL_INTEGER", "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", 
			"UNSIGNED_BINARY_INTEGER", "ABS", "ACOS", "ALL", "ALL_DIFFERENT", "AND", 
			"ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", "AT", "ATAN", "AVG", 
			"BIG", "BIGINT", "BINARY", "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", 
			"BYTE_LENGTH", "BYTES", "CALL", "CARDINALITY", "CASE", "CAST", "CEIL", 
			"CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
			"CLOSE", "COALESCE", "COLLECT_LIST", "COMMIT", "COPY", "COS", "COSH", 
			"COT", "COUNT", "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
			"CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE", "DATETIME", 
			"DAY", "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", "DETACH", 
			"DISTINCT", "DOUBLE", "DROP", "DURATION", "DURATION_BETWEEN", "ELEMENT_ID", 
			"ELSE", "END", "EXCEPT", "EXISTS", "EXP", "FILTER", "FINISH", "FLOAT", 
			"FLOAT16", "FLOAT32", "FLOAT64", "FLOAT128", "FLOAT256", "FLOOR", "FOR", 
			"FROM", "GROUP", "HAVING", "HOME_GRAPH", "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", 
			"HOUR", "IF", "IN", "INSERT", "INT", "INTEGER", "INT8", "INTEGER8", "INT16", 
			"INTEGER16", "INT32", "INTEGER32", "INT64", "INTEGER64", "INT128", "INTEGER128", 
			"INT256", "INTEGER256", "INTERSECT", "INTERVAL", "IS", "LEADING", "LEFT", 
			"LET", "LIKE", "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", "LOCAL_TIME", 
			"LOCAL_TIMESTAMP", "LOG", "LOG10", "LOWER", "LTRIM", "MATCH", "MAX", 
			"MIN", "MINUTE", "MOD", "MONTH", "NEXT", "NODETACH", "NORMALIZE", "NOT", 
			"NOTHING", "NULL", "NULLS", "NULLIF", "OCTET_LENGTH", "OF", "OFFSET", 
			"OPTIONAL", "OR", "ORDER", "OTHERWISE", "PARAMETER", "PARAMETERS", "PATH", 
			"PATH_LENGTH", "PATHS", "PERCENTILE_CONT", "PERCENTILE_DISC", "POWER", 
			"PRECISION", "PROPERTY_EXISTS", "RADIANS", "REAL", "RECORD", "REMOVE", 
			"REPLACE", "RESET", "RETURN", "RIGHT", "ROLLBACK", "RTRIM", "SAME", "SCHEMA", 
			"SECOND", "SELECT", "SESSION", "SESSION_USER", "SET", "SIGNED", "SIN", 
			"SINH", "SIZE", "SKIP_RESERVED_WORD", "SMALL", "SMALLINT", "SQRT", "START", 
			"STDDEV_POP", "STDDEV_SAMP", "STRING", "SUM", "TAN", "TANH", "THEN", 
			"TIME", "TIMESTAMP", "TRAILING", "TRIM", "TYPED", "UBIGINT", "UINT", 
			"UINT8", "UINT16", "UINT32", "UINT64", "UINT128", "UINT256", "UNION", 
			"UNSIGNED", "UPPER", "USE", "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", 
			"VARIABLE", "WHEN", "WHERE", "WITH", "XOR", "YEAR", "YIELD", "ZONED", 
			"ZONED_DATETIME", "ZONED_TIME", "ABSTRACT", "AGGREGATE", "AGGREGATES", 
			"ALTER", "CATALOG", "CLEAR", "CLONE", "CONSTRAINT", "CURRENT_ROLE", "CURRENT_USER", 
			"DATA", "DIRECTORY", "DRYRUN", "EXACT", "EXISTING", "FUNCTION", "GQLSTATUS", 
			"GRANT", "INSTANT", "INFINITY", "NUMBER", "NUMERIC", "ON", "OPEN", "PARTITION", 
			"PROCEDURE", "PRODUCT", "PROJECT", "QUERY", "RECORDS", "REFERENCE", "RENAME", 
			"REVOKE", "SUBSTRING", "SYSTEM_USER", "TEMPORAL", "UNIQUE", "UNIT", "VALUES", 
			"ACYCLIC", "BINDING", "BINDINGS", "CONNECTING", "DESTINATION", "DIFFERENT", 
			"DIRECTED", "EDGE", "EDGES", "ELEMENT", "ELEMENTS", "FIRST", "GRAPH", 
			"GROUPS", "KEEP", "LABEL", "LABELED", "LABELS", "LAST", "NFC", "NFD", 
			"NFKC", "NFKD", "NO", "NODE", "NORMALIZED", "ONLY", "ORDINALITY", "PROPERTY", 
			"READ", "RELATIONSHIP", "RELATIONSHIPS", "REPEATABLE", "SHORTEST", "SIMPLE", 
			"SOURCE", "TABLE", "TEMP", "TO", "TRAIL", "TRANSACTION", "TYPE", "UNDIRECTED", 
			"VERTEX", "WALK", "WITHOUT", "WRITE", "ZONE", "REGULAR_IDENTIFIER", "SUBSTITUTED_PARAMETER_REFERENCE", 
			"GENERAL_PARAMETER_REFERENCE", "MULTISET_ALTERNATION_OPERATOR", "BRACKET_RIGHT_ARROW", 
			"BRACKET_TILDE_RIGHT_ARROW", "CONCATENATION_OPERATOR", "DOUBLE_COLON", 
			"DOUBLE_DOLLAR_SIGN", "DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", 
			"LEFT_ARROW", "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", "LEFT_ARROW_TILDE_BRACKET", 
			"LEFT_MINUS_RIGHT", "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
			"MINUS_LEFT_BRACKET", "MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", 
			"RIGHT_BRACKET_MINUS", "RIGHT_BRACKET_TILDE", "RIGHT_DOUBLE_ARROW", "SLASH_MINUS", 
			"SLASH_MINUS_RIGHT", "SLASH_TILDE", "SLASH_TILDE_RIGHT", "TILDE_LEFT_BRACKET", 
			"TILDE_RIGHT_ARROW", "TILDE_SLASH", "AMPERSAND", "ASTERISK", "COLON", 
			"COMMA", "COMMERCIAL_AT", "DOLLAR_SIGN", "DOUBLE_QUOTE", "EQUALS_OPERATOR", 
			"EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "GRAVE_ACCENT", "LEFT_BRACE", 
			"LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", "MINUS_SIGN", "PERCENT", 
			"PERIOD", "PLUS_SIGN", "QUESTION_MARK", "QUOTE", "REVERSE_SOLIDUS", "RIGHT_BRACE", 
			"RIGHT_BRACKET", "RIGHT_PAREN", "SOLIDUS", "TILDE", "UNDERSCORE", "VERTICAL_BAR", 
			"SP", "WHITESPACE", "BRACKETED_COMMENT", "SIMPLE_COMMENT_SOLIDUS", "SIMPLE_COMMENT_MINUS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "java-escape"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GQL_20240412Parser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GqlProgramContext extends ParserRuleContext {
		public ProgramActivityContext programActivity() {
			return getRuleContext(ProgramActivityContext.class,0);
		}
		public TerminalNode EOF() { return getToken(GQL_20240412Parser.EOF, 0); }
		public SessionCloseCommandContext sessionCloseCommand() {
			return getRuleContext(SessionCloseCommandContext.class,0);
		}
		public GqlProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gqlProgram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGqlProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGqlProgram(this);
		}
	}

	public final GqlProgramContext gqlProgram() throws RecognitionException {
		GqlProgramContext _localctx = new GqlProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_gqlProgram);
		int _la;
		try {
			setState(1157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1148);
				programActivity();
				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SESSION) {
					{
					setState(1149);
					sessionCloseCommand();
					}
				}

				setState(1152);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1154);
				sessionCloseCommand();
				setState(1155);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProgramActivityContext extends ParserRuleContext {
		public SessionActivityContext sessionActivity() {
			return getRuleContext(SessionActivityContext.class,0);
		}
		public TransactionActivityContext transactionActivity() {
			return getRuleContext(TransactionActivityContext.class,0);
		}
		public ProgramActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProgramActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProgramActivity(this);
		}
	}

	public final ProgramActivityContext programActivity() throws RecognitionException {
		ProgramActivityContext _localctx = new ProgramActivityContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_programActivity);
		try {
			setState(1161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SESSION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1159);
				sessionActivity();
				}
				break;
			case AT:
			case CALL:
			case COMMIT:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case FILTER:
			case FINISH:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case RETURN:
			case ROLLBACK:
			case SELECT:
			case SET:
			case SKIP_RESERVED_WORD:
			case START:
			case USE:
			case VALUE:
			case BINDING:
			case GRAPH:
			case PROPERTY:
			case TABLE:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1160);
				transactionActivity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionActivityContext extends ParserRuleContext {
		public List<SessionResetCommandContext> sessionResetCommand() {
			return getRuleContexts(SessionResetCommandContext.class);
		}
		public SessionResetCommandContext sessionResetCommand(int i) {
			return getRuleContext(SessionResetCommandContext.class,i);
		}
		public List<SessionSetCommandContext> sessionSetCommand() {
			return getRuleContexts(SessionSetCommandContext.class);
		}
		public SessionSetCommandContext sessionSetCommand(int i) {
			return getRuleContext(SessionSetCommandContext.class,i);
		}
		public SessionActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionActivity(this);
		}
	}

	public final SessionActivityContext sessionActivity() throws RecognitionException {
		SessionActivityContext _localctx = new SessionActivityContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sessionActivity);
		try {
			int _alt;
			setState(1179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1164); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1163);
						sessionResetCommand();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1166); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1169); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1168);
						sessionSetCommand();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1171); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1176);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1173);
						sessionResetCommand();
						}
						} 
					}
					setState(1178);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionActivityContext extends ParserRuleContext {
		public StartTransactionCommandContext startTransactionCommand() {
			return getRuleContext(StartTransactionCommandContext.class,0);
		}
		public ProcedureSpecificationContext procedureSpecification() {
			return getRuleContext(ProcedureSpecificationContext.class,0);
		}
		public EndTransactionCommandContext endTransactionCommand() {
			return getRuleContext(EndTransactionCommandContext.class,0);
		}
		public TransactionActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTransactionActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTransactionActivity(this);
		}
	}

	public final TransactionActivityContext transactionActivity() throws RecognitionException {
		TransactionActivityContext _localctx = new TransactionActivityContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_transactionActivity);
		int _la;
		try {
			setState(1193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(1181);
				startTransactionCommand();
				setState(1186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 3461332977278001153L) != 0 || (((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 6342202976706233345L) != 0 || (((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 351843721159689L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & 34493958145L) != 0 || _la==LEFT_BRACE) {
					{
					setState(1182);
					procedureSpecification();
					setState(1184);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMIT || _la==ROLLBACK) {
						{
						setState(1183);
						endTransactionCommand();
						}
					}

					}
				}

				}
				break;
			case AT:
			case CALL:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case FILTER:
			case FINISH:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case RETURN:
			case SELECT:
			case SET:
			case SKIP_RESERVED_WORD:
			case USE:
			case VALUE:
			case BINDING:
			case GRAPH:
			case PROPERTY:
			case TABLE:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1188);
				procedureSpecification();
				setState(1190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMIT || _la==ROLLBACK) {
					{
					setState(1189);
					endTransactionCommand();
					}
				}

				}
				break;
			case COMMIT:
			case ROLLBACK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1192);
				endTransactionCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndTransactionCommandContext extends ParserRuleContext {
		public RollbackCommandContext rollbackCommand() {
			return getRuleContext(RollbackCommandContext.class,0);
		}
		public CommitCommandContext commitCommand() {
			return getRuleContext(CommitCommandContext.class,0);
		}
		public EndTransactionCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endTransactionCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndTransactionCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndTransactionCommand(this);
		}
	}

	public final EndTransactionCommandContext endTransactionCommand() throws RecognitionException {
		EndTransactionCommandContext _localctx = new EndTransactionCommandContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_endTransactionCommand);
		try {
			setState(1197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLLBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1195);
				rollbackCommand();
				}
				break;
			case COMMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1196);
				commitCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQL_20240412Parser.SESSION, 0); }
		public TerminalNode SET() { return getToken(GQL_20240412Parser.SET, 0); }
		public SessionSetSchemaClauseContext sessionSetSchemaClause() {
			return getRuleContext(SessionSetSchemaClauseContext.class,0);
		}
		public SessionSetGraphClauseContext sessionSetGraphClause() {
			return getRuleContext(SessionSetGraphClauseContext.class,0);
		}
		public SessionSetTimeZoneClauseContext sessionSetTimeZoneClause() {
			return getRuleContext(SessionSetTimeZoneClauseContext.class,0);
		}
		public SessionSetParameterClauseContext sessionSetParameterClause() {
			return getRuleContext(SessionSetParameterClauseContext.class,0);
		}
		public SessionSetCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetCommand(this);
		}
	}

	public final SessionSetCommandContext sessionSetCommand() throws RecognitionException {
		SessionSetCommandContext _localctx = new SessionSetCommandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_sessionSetCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1199);
			match(SESSION);
			setState(1200);
			match(SET);
			setState(1205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1201);
				sessionSetSchemaClause();
				}
				break;
			case 2:
				{
				setState(1202);
				sessionSetGraphClause();
				}
				break;
			case 3:
				{
				setState(1203);
				sessionSetTimeZoneClause();
				}
				break;
			case 4:
				{
				setState(1204);
				sessionSetParameterClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetSchemaClauseContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(GQL_20240412Parser.SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public SessionSetSchemaClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetSchemaClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetSchemaClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetSchemaClause(this);
		}
	}

	public final SessionSetSchemaClauseContext sessionSetSchemaClause() throws RecognitionException {
		SessionSetSchemaClauseContext _localctx = new SessionSetSchemaClauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_sessionSetSchemaClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1207);
			match(SCHEMA);
			setState(1208);
			schemaReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetGraphClauseContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public SessionSetGraphClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetGraphClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetGraphClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetGraphClause(this);
		}
	}

	public final SessionSetGraphClauseContext sessionSetGraphClause() throws RecognitionException {
		SessionSetGraphClauseContext _localctx = new SessionSetGraphClauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_sessionSetGraphClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1210);
				match(PROPERTY);
				}
			}

			setState(1213);
			match(GRAPH);
			setState(1214);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetTimeZoneClauseContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(GQL_20240412Parser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public SetTimeZoneValueContext setTimeZoneValue() {
			return getRuleContext(SetTimeZoneValueContext.class,0);
		}
		public SessionSetTimeZoneClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetTimeZoneClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetTimeZoneClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetTimeZoneClause(this);
		}
	}

	public final SessionSetTimeZoneClauseContext sessionSetTimeZoneClause() throws RecognitionException {
		SessionSetTimeZoneClauseContext _localctx = new SessionSetTimeZoneClauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_sessionSetTimeZoneClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1216);
			match(TIME);
			setState(1217);
			match(ZONE);
			setState(1218);
			setTimeZoneValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTimeZoneValueContext extends ParserRuleContext {
		public TimeZoneStringContext timeZoneString() {
			return getRuleContext(TimeZoneStringContext.class,0);
		}
		public SetTimeZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTimeZoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetTimeZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetTimeZoneValue(this);
		}
	}

	public final SetTimeZoneValueContext setTimeZoneValue() throws RecognitionException {
		SetTimeZoneValueContext _localctx = new SetTimeZoneValueContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_setTimeZoneValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1220);
			timeZoneString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetParameterClauseContext extends ParserRuleContext {
		public SessionSetGraphParameterClauseContext sessionSetGraphParameterClause() {
			return getRuleContext(SessionSetGraphParameterClauseContext.class,0);
		}
		public SessionSetBindingTableParameterClauseContext sessionSetBindingTableParameterClause() {
			return getRuleContext(SessionSetBindingTableParameterClauseContext.class,0);
		}
		public SessionSetValueParameterClauseContext sessionSetValueParameterClause() {
			return getRuleContext(SessionSetValueParameterClauseContext.class,0);
		}
		public SessionSetParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetParameterClause(this);
		}
	}

	public final SessionSetParameterClauseContext sessionSetParameterClause() throws RecognitionException {
		SessionSetParameterClauseContext _localctx = new SessionSetParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_sessionSetParameterClause);
		try {
			setState(1225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1222);
				sessionSetGraphParameterClause();
				}
				break;
			case BINDING:
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1223);
				sessionSetBindingTableParameterClause();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1224);
				sessionSetValueParameterClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetGraphParameterClauseContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedGraphInitializerContext optTypedGraphInitializer() {
			return getRuleContext(OptTypedGraphInitializerContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public SessionSetGraphParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetGraphParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetGraphParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetGraphParameterClause(this);
		}
	}

	public final SessionSetGraphParameterClauseContext sessionSetGraphParameterClause() throws RecognitionException {
		SessionSetGraphParameterClauseContext _localctx = new SessionSetGraphParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_sessionSetGraphParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1227);
				match(PROPERTY);
				}
			}

			setState(1230);
			match(GRAPH);
			setState(1231);
			sessionSetParameterName();
			setState(1232);
			optTypedGraphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetBindingTableParameterClauseContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQL_20240412Parser.TABLE, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() {
			return getRuleContext(OptTypedBindingTableInitializerContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQL_20240412Parser.BINDING, 0); }
		public SessionSetBindingTableParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetBindingTableParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetBindingTableParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetBindingTableParameterClause(this);
		}
	}

	public final SessionSetBindingTableParameterClauseContext sessionSetBindingTableParameterClause() throws RecognitionException {
		SessionSetBindingTableParameterClauseContext _localctx = new SessionSetBindingTableParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_sessionSetBindingTableParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(1234);
				match(BINDING);
				}
			}

			setState(1237);
			match(TABLE);
			setState(1238);
			sessionSetParameterName();
			setState(1239);
			optTypedBindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetValueParameterClauseContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedValueInitializerContext optTypedValueInitializer() {
			return getRuleContext(OptTypedValueInitializerContext.class,0);
		}
		public SessionSetValueParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetValueParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetValueParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetValueParameterClause(this);
		}
	}

	public final SessionSetValueParameterClauseContext sessionSetValueParameterClause() throws RecognitionException {
		SessionSetValueParameterClauseContext _localctx = new SessionSetValueParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_sessionSetValueParameterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1241);
			match(VALUE);
			setState(1242);
			sessionSetParameterName();
			setState(1243);
			optTypedValueInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetParameterNameContext extends ParserRuleContext {
		public SessionParameterSpecificationContext sessionParameterSpecification() {
			return getRuleContext(SessionParameterSpecificationContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public SessionSetParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetParameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionSetParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionSetParameterName(this);
		}
	}

	public final SessionSetParameterNameContext sessionSetParameterName() throws RecognitionException {
		SessionSetParameterNameContext _localctx = new SessionSetParameterNameContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_sessionSetParameterName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1245);
				match(IF);
				setState(1246);
				match(NOT);
				setState(1247);
				match(EXISTS);
				}
			}

			setState(1250);
			sessionParameterSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionResetCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQL_20240412Parser.SESSION, 0); }
		public TerminalNode RESET() { return getToken(GQL_20240412Parser.RESET, 0); }
		public SessionResetArgumentsContext sessionResetArguments() {
			return getRuleContext(SessionResetArgumentsContext.class,0);
		}
		public SessionResetCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionResetCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionResetCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionResetCommand(this);
		}
	}

	public final SessionResetCommandContext sessionResetCommand() throws RecognitionException {
		SessionResetCommandContext _localctx = new SessionResetCommandContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_sessionResetCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1252);
			match(SESSION);
			setState(1253);
			match(RESET);
			setState(1255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==CHARACTERISTICS || (((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & 8796095119363L) != 0 || (((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 274877972481L) != 0) {
				{
				setState(1254);
				sessionResetArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionResetArgumentsContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(GQL_20240412Parser.PARAMETERS, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(GQL_20240412Parser.CHARACTERISTICS, 0); }
		public TerminalNode ALL() { return getToken(GQL_20240412Parser.ALL, 0); }
		public TerminalNode SCHEMA() { return getToken(GQL_20240412Parser.SCHEMA, 0); }
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode TIME() { return getToken(GQL_20240412Parser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public SessionParameterSpecificationContext sessionParameterSpecification() {
			return getRuleContext(SessionParameterSpecificationContext.class,0);
		}
		public TerminalNode PARAMETER() { return getToken(GQL_20240412Parser.PARAMETER, 0); }
		public SessionResetArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionResetArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionResetArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionResetArguments(this);
		}
	}

	public final SessionResetArgumentsContext sessionResetArguments() throws RecognitionException {
		SessionResetArgumentsContext _localctx = new SessionResetArgumentsContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_sessionResetArguments);
		int _la;
		try {
			setState(1272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case CHARACTERISTICS:
			case PARAMETERS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1257);
					match(ALL);
					}
				}

				setState(1260);
				_la = _input.LA(1);
				if ( !(_la==CHARACTERISTICS || _la==PARAMETERS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1261);
				match(SCHEMA);
				}
				break;
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1262);
					match(PROPERTY);
					}
				}

				setState(1265);
				match(GRAPH);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(1266);
				match(TIME);
				setState(1267);
				match(ZONE);
				}
				break;
			case PARAMETER:
			case GENERAL_PARAMETER_REFERENCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARAMETER) {
					{
					setState(1268);
					match(PARAMETER);
					}
				}

				setState(1271);
				sessionParameterSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionCloseCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQL_20240412Parser.SESSION, 0); }
		public TerminalNode CLOSE() { return getToken(GQL_20240412Parser.CLOSE, 0); }
		public SessionCloseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionCloseCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionCloseCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionCloseCommand(this);
		}
	}

	public final SessionCloseCommandContext sessionCloseCommand() throws RecognitionException {
		SessionCloseCommandContext _localctx = new SessionCloseCommandContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_sessionCloseCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1274);
			match(SESSION);
			setState(1275);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionParameterSpecificationContext extends ParserRuleContext {
		public TerminalNode GENERAL_PARAMETER_REFERENCE() { return getToken(GQL_20240412Parser.GENERAL_PARAMETER_REFERENCE, 0); }
		public SessionParameterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionParameterSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSessionParameterSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSessionParameterSpecification(this);
		}
	}

	public final SessionParameterSpecificationContext sessionParameterSpecification() throws RecognitionException {
		SessionParameterSpecificationContext _localctx = new SessionParameterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_sessionParameterSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1277);
			match(GENERAL_PARAMETER_REFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionCommandContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GQL_20240412Parser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(GQL_20240412Parser.TRANSACTION, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartTransactionCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransactionCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterStartTransactionCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitStartTransactionCommand(this);
		}
	}

	public final StartTransactionCommandContext startTransactionCommand() throws RecognitionException {
		StartTransactionCommandContext _localctx = new StartTransactionCommandContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_startTransactionCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279);
			match(START);
			setState(1280);
			match(TRANSACTION);
			setState(1282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ) {
				{
				setState(1281);
				transactionCharacteristics();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTransactionCharacteristics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTransactionCharacteristics(this);
		}
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_transactionCharacteristics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1284);
			transactionMode();
			setState(1289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1285);
				match(COMMA);
				setState(1286);
				transactionMode();
				}
				}
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTransactionMode(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_transactionMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1292);
			transactionAccessMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(GQL_20240412Parser.READ, 0); }
		public TerminalNode ONLY() { return getToken(GQL_20240412Parser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(GQL_20240412Parser.WRITE, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTransactionAccessMode(this);
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_transactionAccessMode);
		try {
			setState(1298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1294);
				match(READ);
				setState(1295);
				match(ONLY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1296);
				match(READ);
				setState(1297);
				match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackCommandContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(GQL_20240412Parser.ROLLBACK, 0); }
		public RollbackCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRollbackCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRollbackCommand(this);
		}
	}

	public final RollbackCommandContext rollbackCommand() throws RecognitionException {
		RollbackCommandContext _localctx = new RollbackCommandContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_rollbackCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1300);
			match(ROLLBACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitCommandContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(GQL_20240412Parser.COMMIT, 0); }
		public CommitCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCommitCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCommitCommand(this);
		}
	}

	public final CommitCommandContext commitCommand() throws RecognitionException {
		CommitCommandContext _localctx = new CommitCommandContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_commitCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			match(COMMIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedProcedureSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public ProcedureSpecificationContext procedureSpecification() {
			return getRuleContext(ProcedureSpecificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public NestedProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNestedProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNestedProcedureSpecification(this);
		}
	}

	public final NestedProcedureSpecificationContext nestedProcedureSpecification() throws RecognitionException {
		NestedProcedureSpecificationContext _localctx = new NestedProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_nestedProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1304);
			match(LEFT_BRACE);
			setState(1305);
			procedureSpecification();
			setState(1306);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureSpecificationContext extends ParserRuleContext {
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public ProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureSpecification(this);
		}
	}

	public final ProcedureSpecificationContext procedureSpecification() throws RecognitionException {
		ProcedureSpecificationContext _localctx = new ProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_procedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedDataModifyingProcedureSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public NestedDataModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedDataModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNestedDataModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNestedDataModifyingProcedureSpecification(this);
		}
	}

	public final NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() throws RecognitionException {
		NestedDataModifyingProcedureSpecificationContext _localctx = new NestedDataModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_nestedDataModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1310);
			match(LEFT_BRACE);
			setState(1311);
			procedureBody();
			setState(1312);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedQuerySpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public NestedQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNestedQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNestedQuerySpecification(this);
		}
	}

	public final NestedQuerySpecificationContext nestedQuerySpecification() throws RecognitionException {
		NestedQuerySpecificationContext _localctx = new NestedQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_nestedQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(LEFT_BRACE);
			setState(1315);
			procedureBody();
			setState(1316);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureBodyContext extends ParserRuleContext {
		public StatementBlockContext statementBlock() {
			return getRuleContext(StatementBlockContext.class,0);
		}
		public AtSchemaClauseContext atSchemaClause() {
			return getRuleContext(AtSchemaClauseContext.class,0);
		}
		public BindingVariableDefinitionBlockContext bindingVariableDefinitionBlock() {
			return getRuleContext(BindingVariableDefinitionBlockContext.class,0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureBody(this);
		}
	}

	public final ProcedureBodyContext procedureBody() throws RecognitionException {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_procedureBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(1318);
				atSchemaClause();
				}
			}

			setState(1322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUE || _la==BINDING || (((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 16842753L) != 0) {
				{
				setState(1321);
				bindingVariableDefinitionBlock();
				}
			}

			setState(1324);
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableDefinitionBlockContext extends ParserRuleContext {
		public List<BindingVariableDefinitionContext> bindingVariableDefinition() {
			return getRuleContexts(BindingVariableDefinitionContext.class);
		}
		public BindingVariableDefinitionContext bindingVariableDefinition(int i) {
			return getRuleContext(BindingVariableDefinitionContext.class,i);
		}
		public BindingVariableDefinitionBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableDefinitionBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingVariableDefinitionBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingVariableDefinitionBlock(this);
		}
	}

	public final BindingVariableDefinitionBlockContext bindingVariableDefinitionBlock() throws RecognitionException {
		BindingVariableDefinitionBlockContext _localctx = new BindingVariableDefinitionBlockContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_bindingVariableDefinitionBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1326);
				bindingVariableDefinition();
				}
				}
				setState(1329); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==VALUE || _la==BINDING || (((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 16842753L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableDefinitionContext extends ParserRuleContext {
		public GraphVariableDefinitionContext graphVariableDefinition() {
			return getRuleContext(GraphVariableDefinitionContext.class,0);
		}
		public BindingTableVariableDefinitionContext bindingTableVariableDefinition() {
			return getRuleContext(BindingTableVariableDefinitionContext.class,0);
		}
		public ValueVariableDefinitionContext valueVariableDefinition() {
			return getRuleContext(ValueVariableDefinitionContext.class,0);
		}
		public BindingVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingVariableDefinition(this);
		}
	}

	public final BindingVariableDefinitionContext bindingVariableDefinition() throws RecognitionException {
		BindingVariableDefinitionContext _localctx = new BindingVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_bindingVariableDefinition);
		try {
			setState(1334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1331);
				graphVariableDefinition();
				}
				break;
			case BINDING:
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1332);
				bindingTableVariableDefinition();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1333);
				valueVariableDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementBlockContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public List<NextStatementContext> nextStatement() {
			return getRuleContexts(NextStatementContext.class);
		}
		public NextStatementContext nextStatement(int i) {
			return getRuleContext(NextStatementContext.class,i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterStatementBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitStatementBlock(this);
		}
	}

	public final StatementBlockContext statementBlock() throws RecognitionException {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_statementBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			statement();
			setState(1340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NEXT) {
				{
				{
				setState(1337);
				nextStatement();
				}
				}
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public LinearCatalogModifyingStatementContext linearCatalogModifyingStatement() {
			return getRuleContext(LinearCatalogModifyingStatementContext.class,0);
		}
		public LinearDataModifyingStatementContext linearDataModifyingStatement() {
			return getRuleContext(LinearDataModifyingStatementContext.class,0);
		}
		public CompositeQueryStatementContext compositeQueryStatement() {
			return getRuleContext(CompositeQueryStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_statement);
		try {
			setState(1346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1343);
				linearCatalogModifyingStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1344);
				linearDataModifyingStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1345);
				compositeQueryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NextStatementContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(GQL_20240412Parser.NEXT, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public YieldClauseContext yieldClause() {
			return getRuleContext(YieldClauseContext.class,0);
		}
		public NextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNextStatement(this);
		}
	}

	public final NextStatementContext nextStatement() throws RecognitionException {
		NextStatementContext _localctx = new NextStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_nextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1348);
			match(NEXT);
			setState(1350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==YIELD) {
				{
				setState(1349);
				yieldClause();
				}
			}

			setState(1352);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public OptTypedGraphInitializerContext optTypedGraphInitializer() {
			return getRuleContext(OptTypedGraphInitializerContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public GraphVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphVariableDefinition(this);
		}
	}

	public final GraphVariableDefinitionContext graphVariableDefinition() throws RecognitionException {
		GraphVariableDefinitionContext _localctx = new GraphVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_graphVariableDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1354);
				match(PROPERTY);
				}
			}

			setState(1357);
			match(GRAPH);
			setState(1358);
			bindingVariable();
			setState(1359);
			optTypedGraphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedGraphInitializerContext extends ParserRuleContext {
		public GraphInitializerContext graphInitializer() {
			return getRuleContext(GraphInitializerContext.class,0);
		}
		public GraphReferenceValueTypeContext graphReferenceValueType() {
			return getRuleContext(GraphReferenceValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedGraphInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedGraphInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOptTypedGraphInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOptTypedGraphInitializer(this);
		}
	}

	public final OptTypedGraphInitializerContext optTypedGraphInitializer() throws RecognitionException {
		OptTypedGraphInitializerContext _localctx = new OptTypedGraphInitializerContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_optTypedGraphInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY || _la==TYPED || (((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 8796093087745L) != 0) {
				{
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1361);
					typed();
					}
				}

				setState(1364);
				graphReferenceValueType();
				}
			}

			setState(1367);
			graphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphInitializer(this);
		}
	}

	public final GraphInitializerContext graphInitializer() throws RecognitionException {
		GraphInitializerContext _localctx = new GraphInitializerContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_graphInitializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			match(EQUALS_OPERATOR);
			setState(1370);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQL_20240412Parser.TABLE, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() {
			return getRuleContext(OptTypedBindingTableInitializerContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQL_20240412Parser.BINDING, 0); }
		public BindingTableVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableVariableDefinition(this);
		}
	}

	public final BindingTableVariableDefinitionContext bindingTableVariableDefinition() throws RecognitionException {
		BindingTableVariableDefinitionContext _localctx = new BindingTableVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_bindingTableVariableDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(1372);
				match(BINDING);
				}
			}

			setState(1375);
			match(TABLE);
			setState(1376);
			bindingVariable();
			setState(1377);
			optTypedBindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedBindingTableInitializerContext extends ParserRuleContext {
		public BindingTableInitializerContext bindingTableInitializer() {
			return getRuleContext(BindingTableInitializerContext.class,0);
		}
		public BindingTableReferenceValueTypeContext bindingTableReferenceValueType() {
			return getRuleContext(BindingTableReferenceValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedBindingTableInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedBindingTableInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOptTypedBindingTableInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOptTypedBindingTableInitializer(this);
		}
	}

	public final OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() throws RecognitionException {
		OptTypedBindingTableInitializerContext _localctx = new OptTypedBindingTableInitializerContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_optTypedBindingTableInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & 18014432869220353L) != 0) {
				{
				setState(1380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1379);
					typed();
					}
				}

				setState(1382);
				bindingTableReferenceValueType();
				}
			}

			setState(1385);
			bindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public BindingTableExpressionContext bindingTableExpression() {
			return getRuleContext(BindingTableExpressionContext.class,0);
		}
		public BindingTableInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableInitializer(this);
		}
	}

	public final BindingTableInitializerContext bindingTableInitializer() throws RecognitionException {
		BindingTableInitializerContext _localctx = new BindingTableInitializerContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_bindingTableInitializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			match(EQUALS_OPERATOR);
			setState(1388);
			bindingTableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public OptTypedValueInitializerContext optTypedValueInitializer() {
			return getRuleContext(OptTypedValueInitializerContext.class,0);
		}
		public ValueVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueVariableDefinition(this);
		}
	}

	public final ValueVariableDefinitionContext valueVariableDefinition() throws RecognitionException {
		ValueVariableDefinitionContext _localctx = new ValueVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_valueVariableDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			match(VALUE);
			setState(1391);
			bindingVariable();
			setState(1392);
			optTypedValueInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedValueInitializerContext extends ParserRuleContext {
		public ValueInitializerContext valueInitializer() {
			return getRuleContext(ValueInitializerContext.class,0);
		}
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedValueInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedValueInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOptTypedValueInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOptTypedValueInitializer(this);
		}
	}

	public final OptTypedValueInitializerContext optTypedValueInitializer() throws RecognitionException {
		OptTypedValueInitializerContext _localctx = new OptTypedValueInitializerContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_optTypedValueInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1135228676472832L) != 0 || (((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & -9187345434035607527L) != 0 || (((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 6989589922362163201L) != 0 || (((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & 8645246561L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & 18021030618466401L) != 0 || _la==LEFT_BRACE || _la==LEFT_PAREN) {
				{
				setState(1395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1394);
					typed();
					}
				}

				setState(1397);
				valueType(0);
				}
			}

			setState(1400);
			valueInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ValueInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueInitializer(this);
		}
	}

	public final ValueInitializerContext valueInitializer() throws RecognitionException {
		ValueInitializerContext _localctx = new ValueInitializerContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_valueInitializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			match(EQUALS_OPERATOR);
			setState(1403);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphExpressionContext extends ParserRuleContext {
		public ObjectExpressionPrimaryContext objectExpressionPrimary() {
			return getRuleContext(ObjectExpressionPrimaryContext.class,0);
		}
		public GraphReferenceContext graphReference() {
			return getRuleContext(GraphReferenceContext.class,0);
		}
		public ObjectNameOrBindingVariableContext objectNameOrBindingVariable() {
			return getRuleContext(ObjectNameOrBindingVariableContext.class,0);
		}
		public CurrentGraphContext currentGraph() {
			return getRuleContext(CurrentGraphContext.class,0);
		}
		public GraphExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphExpression(this);
		}
	}

	public final GraphExpressionContext graphExpression() throws RecognitionException {
		GraphExpressionContext _localctx = new GraphExpressionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_graphExpression);
		try {
			setState(1409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1405);
				objectExpressionPrimary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1406);
				graphReference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1407);
				objectNameOrBindingVariable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1408);
				currentGraph();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CurrentGraphContext extends ParserRuleContext {
		public TerminalNode CURRENT_PROPERTY_GRAPH() { return getToken(GQL_20240412Parser.CURRENT_PROPERTY_GRAPH, 0); }
		public TerminalNode CURRENT_GRAPH() { return getToken(GQL_20240412Parser.CURRENT_GRAPH, 0); }
		public CurrentGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCurrentGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCurrentGraph(this);
		}
	}

	public final CurrentGraphContext currentGraph() throws RecognitionException {
		CurrentGraphContext _localctx = new CurrentGraphContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_currentGraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1411);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_GRAPH || _la==CURRENT_PROPERTY_GRAPH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableExpressionContext extends ParserRuleContext {
		public NestedBindingTableQuerySpecificationContext nestedBindingTableQuerySpecification() {
			return getRuleContext(NestedBindingTableQuerySpecificationContext.class,0);
		}
		public ObjectExpressionPrimaryContext objectExpressionPrimary() {
			return getRuleContext(ObjectExpressionPrimaryContext.class,0);
		}
		public BindingTableReferenceContext bindingTableReference() {
			return getRuleContext(BindingTableReferenceContext.class,0);
		}
		public ObjectNameOrBindingVariableContext objectNameOrBindingVariable() {
			return getRuleContext(ObjectNameOrBindingVariableContext.class,0);
		}
		public BindingTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableExpression(this);
		}
	}

	public final BindingTableExpressionContext bindingTableExpression() throws RecognitionException {
		BindingTableExpressionContext _localctx = new BindingTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_bindingTableExpression);
		try {
			setState(1417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1413);
				nestedBindingTableQuerySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1414);
				objectExpressionPrimary();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1415);
				bindingTableReference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1416);
				objectNameOrBindingVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedBindingTableQuerySpecificationContext extends ParserRuleContext {
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public NestedBindingTableQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedBindingTableQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNestedBindingTableQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNestedBindingTableQuerySpecification(this);
		}
	}

	public final NestedBindingTableQuerySpecificationContext nestedBindingTableQuerySpecification() throws RecognitionException {
		NestedBindingTableQuerySpecificationContext _localctx = new NestedBindingTableQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_nestedBindingTableQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectExpressionPrimaryContext extends ParserRuleContext {
		public TerminalNode VARIABLE() { return getToken(GQL_20240412Parser.VARIABLE, 0); }
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public ParenthesizedValueExpressionContext parenthesizedValueExpression() {
			return getRuleContext(ParenthesizedValueExpressionContext.class,0);
		}
		public NonParenthesizedValueExpressionPrimarySpecialCaseContext nonParenthesizedValueExpressionPrimarySpecialCase() {
			return getRuleContext(NonParenthesizedValueExpressionPrimarySpecialCaseContext.class,0);
		}
		public ObjectExpressionPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectExpressionPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterObjectExpressionPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitObjectExpressionPrimary(this);
		}
	}

	public final ObjectExpressionPrimaryContext objectExpressionPrimary() throws RecognitionException {
		ObjectExpressionPrimaryContext _localctx = new ObjectExpressionPrimaryContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_objectExpressionPrimary);
		try {
			setState(1425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1421);
				match(VARIABLE);
				setState(1422);
				valueExpressionPrimary(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1423);
				parenthesizedValueExpression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1424);
				nonParenthesizedValueExpressionPrimarySpecialCase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearCatalogModifyingStatementContext extends ParserRuleContext {
		public List<SimpleCatalogModifyingStatementContext> simpleCatalogModifyingStatement() {
			return getRuleContexts(SimpleCatalogModifyingStatementContext.class);
		}
		public SimpleCatalogModifyingStatementContext simpleCatalogModifyingStatement(int i) {
			return getRuleContext(SimpleCatalogModifyingStatementContext.class,i);
		}
		public LinearCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLinearCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLinearCatalogModifyingStatement(this);
		}
	}

	public final LinearCatalogModifyingStatementContext linearCatalogModifyingStatement() throws RecognitionException {
		LinearCatalogModifyingStatementContext _localctx = new LinearCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_linearCatalogModifyingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1428); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1427);
				simpleCatalogModifyingStatement();
				}
				}
				setState(1430); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 274878431233L) != 0 || _la==OPTIONAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCatalogModifyingStatementContext extends ParserRuleContext {
		public PrimitiveCatalogModifyingStatementContext primitiveCatalogModifyingStatement() {
			return getRuleContext(PrimitiveCatalogModifyingStatementContext.class,0);
		}
		public CallCatalogModifyingProcedureStatementContext callCatalogModifyingProcedureStatement() {
			return getRuleContext(CallCatalogModifyingProcedureStatementContext.class,0);
		}
		public SimpleCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleCatalogModifyingStatement(this);
		}
	}

	public final SimpleCatalogModifyingStatementContext simpleCatalogModifyingStatement() throws RecognitionException {
		SimpleCatalogModifyingStatementContext _localctx = new SimpleCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_simpleCatalogModifyingStatement);
		try {
			setState(1434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
			case DROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1432);
				primitiveCatalogModifyingStatement();
				}
				break;
			case CALL:
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1433);
				callCatalogModifyingProcedureStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveCatalogModifyingStatementContext extends ParserRuleContext {
		public CreateSchemaStatementContext createSchemaStatement() {
			return getRuleContext(CreateSchemaStatementContext.class,0);
		}
		public DropSchemaStatementContext dropSchemaStatement() {
			return getRuleContext(DropSchemaStatementContext.class,0);
		}
		public CreateGraphStatementContext createGraphStatement() {
			return getRuleContext(CreateGraphStatementContext.class,0);
		}
		public DropGraphStatementContext dropGraphStatement() {
			return getRuleContext(DropGraphStatementContext.class,0);
		}
		public CreateGraphTypeStatementContext createGraphTypeStatement() {
			return getRuleContext(CreateGraphTypeStatementContext.class,0);
		}
		public DropGraphTypeStatementContext dropGraphTypeStatement() {
			return getRuleContext(DropGraphTypeStatementContext.class,0);
		}
		public PrimitiveCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrimitiveCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrimitiveCatalogModifyingStatement(this);
		}
	}

	public final PrimitiveCatalogModifyingStatementContext primitiveCatalogModifyingStatement() throws RecognitionException {
		PrimitiveCatalogModifyingStatementContext _localctx = new PrimitiveCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_primitiveCatalogModifyingStatement);
		try {
			setState(1442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1436);
				createSchemaStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1437);
				dropSchemaStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1438);
				createGraphStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1439);
				dropGraphStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1440);
				createGraphTypeStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1441);
				dropGraphTypeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSchemaStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQL_20240412Parser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(GQL_20240412Parser.SCHEMA, 0); }
		public CatalogSchemaParentAndNameContext catalogSchemaParentAndName() {
			return getRuleContext(CatalogSchemaParentAndNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public CreateSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCreateSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCreateSchemaStatement(this);
		}
	}

	public final CreateSchemaStatementContext createSchemaStatement() throws RecognitionException {
		CreateSchemaStatementContext _localctx = new CreateSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_createSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1444);
			match(CREATE);
			setState(1445);
			match(SCHEMA);
			setState(1449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1446);
				match(IF);
				setState(1447);
				match(NOT);
				setState(1448);
				match(EXISTS);
				}
			}

			setState(1451);
			catalogSchemaParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSchemaStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQL_20240412Parser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(GQL_20240412Parser.SCHEMA, 0); }
		public CatalogSchemaParentAndNameContext catalogSchemaParentAndName() {
			return getRuleContext(CatalogSchemaParentAndNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public DropSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDropSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDropSchemaStatement(this);
		}
	}

	public final DropSchemaStatementContext dropSchemaStatement() throws RecognitionException {
		DropSchemaStatementContext _localctx = new DropSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dropSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1453);
			match(DROP);
			setState(1454);
			match(SCHEMA);
			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1455);
				match(IF);
				setState(1456);
				match(EXISTS);
				}
			}

			setState(1459);
			catalogSchemaParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGraphStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQL_20240412Parser.CREATE, 0); }
		public CatalogGraphParentAndNameContext catalogGraphParentAndName() {
			return getRuleContext(CatalogGraphParentAndNameContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode OR() { return getToken(GQL_20240412Parser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GQL_20240412Parser.REPLACE, 0); }
		public OpenGraphTypeContext openGraphType() {
			return getRuleContext(OpenGraphTypeContext.class,0);
		}
		public OfGraphTypeContext ofGraphType() {
			return getRuleContext(OfGraphTypeContext.class,0);
		}
		public GraphSourceContext graphSource() {
			return getRuleContext(GraphSourceContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public CreateGraphStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGraphStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCreateGraphStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCreateGraphStatement(this);
		}
	}

	public final CreateGraphStatementContext createGraphStatement() throws RecognitionException {
		CreateGraphStatementContext _localctx = new CreateGraphStatementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_createGraphStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			match(CREATE);
			setState(1477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				{
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1462);
					match(PROPERTY);
					}
				}

				setState(1465);
				match(GRAPH);
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1466);
					match(IF);
					setState(1467);
					match(NOT);
					setState(1468);
					match(EXISTS);
					}
				}

				}
				break;
			case OR:
				{
				setState(1471);
				match(OR);
				setState(1472);
				match(REPLACE);
				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1473);
					match(PROPERTY);
					}
				}

				setState(1476);
				match(GRAPH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1479);
			catalogGraphParentAndName();
			setState(1482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(1480);
				openGraphType();
				}
				break;
			case 2:
				{
				setState(1481);
				ofGraphType();
				}
				break;
			}
			setState(1485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1484);
				graphSource();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenGraphTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public OpenGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOpenGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOpenGraphType(this);
		}
	}

	public final OpenGraphTypeContext openGraphType() throws RecognitionException {
		OpenGraphTypeContext _localctx = new OpenGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_openGraphType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(1487);
				typed();
				}
			}

			setState(1490);
			match(ANY);
			setState(1495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRAPH || _la==PROPERTY) {
				{
				setState(1492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1491);
					match(PROPERTY);
					}
				}

				setState(1494);
				match(GRAPH);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OfGraphTypeContext extends ParserRuleContext {
		public GraphTypeLikeGraphContext graphTypeLikeGraph() {
			return getRuleContext(GraphTypeLikeGraphContext.class,0);
		}
		public GraphTypeReferenceContext graphTypeReference() {
			return getRuleContext(GraphTypeReferenceContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public OfGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ofGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOfGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOfGraphType(this);
		}
	}

	public final OfGraphTypeContext ofGraphType() throws RecognitionException {
		OfGraphTypeContext _localctx = new OfGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_ofGraphType);
		int _la;
		try {
			setState(1512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1497);
				graphTypeLikeGraph();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1498);
					typed();
					}
				}

				setState(1501);
				graphTypeReference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1502);
					typed();
					}
				}

				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRAPH || _la==PROPERTY) {
					{
					setState(1506);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROPERTY) {
						{
						setState(1505);
						match(PROPERTY);
						}
					}

					setState(1508);
					match(GRAPH);
					}
				}

				setState(1511);
				nestedGraphTypeSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeLikeGraphContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(GQL_20240412Parser.LIKE, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphTypeLikeGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeLikeGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphTypeLikeGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphTypeLikeGraph(this);
		}
	}

	public final GraphTypeLikeGraphContext graphTypeLikeGraph() throws RecognitionException {
		GraphTypeLikeGraphContext _localctx = new GraphTypeLikeGraphContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_graphTypeLikeGraph);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			match(LIKE);
			setState(1515);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphSourceContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public TerminalNode COPY() { return getToken(GQL_20240412Parser.COPY, 0); }
		public TerminalNode OF() { return getToken(GQL_20240412Parser.OF, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphSource(this);
		}
	}

	public final GraphSourceContext graphSource() throws RecognitionException {
		GraphSourceContext _localctx = new GraphSourceContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_graphSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1517);
			match(AS);
			setState(1518);
			match(COPY);
			setState(1519);
			match(OF);
			setState(1520);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropGraphStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQL_20240412Parser.DROP, 0); }
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public CatalogGraphParentAndNameContext catalogGraphParentAndName() {
			return getRuleContext(CatalogGraphParentAndNameContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public DropGraphStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGraphStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDropGraphStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDropGraphStatement(this);
		}
	}

	public final DropGraphStatementContext dropGraphStatement() throws RecognitionException {
		DropGraphStatementContext _localctx = new DropGraphStatementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_dropGraphStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1522);
			match(DROP);
			setState(1524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1523);
				match(PROPERTY);
				}
			}

			setState(1526);
			match(GRAPH);
			setState(1529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1527);
				match(IF);
				setState(1528);
				match(EXISTS);
				}
			}

			setState(1531);
			catalogGraphParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGraphTypeStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQL_20240412Parser.CREATE, 0); }
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public GraphTypeSourceContext graphTypeSource() {
			return getRuleContext(GraphTypeSourceContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public TerminalNode OR() { return getToken(GQL_20240412Parser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GQL_20240412Parser.REPLACE, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public CreateGraphTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGraphTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCreateGraphTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCreateGraphTypeStatement(this);
		}
	}

	public final CreateGraphTypeStatementContext createGraphTypeStatement() throws RecognitionException {
		CreateGraphTypeStatementContext _localctx = new CreateGraphTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_createGraphTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			match(CREATE);
			setState(1551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				{
				setState(1535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1534);
					match(PROPERTY);
					}
				}

				setState(1537);
				match(GRAPH);
				setState(1538);
				match(TYPE);
				setState(1542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1539);
					match(IF);
					setState(1540);
					match(NOT);
					setState(1541);
					match(EXISTS);
					}
				}

				}
				break;
			case OR:
				{
				setState(1544);
				match(OR);
				setState(1545);
				match(REPLACE);
				setState(1547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1546);
					match(PROPERTY);
					}
				}

				setState(1549);
				match(GRAPH);
				setState(1550);
				match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1553);
			catalogGraphTypeParentAndName();
			setState(1554);
			graphTypeSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeSourceContext extends ParserRuleContext {
		public CopyOfGraphTypeContext copyOfGraphType() {
			return getRuleContext(CopyOfGraphTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public GraphTypeLikeGraphContext graphTypeLikeGraph() {
			return getRuleContext(GraphTypeLikeGraphContext.class,0);
		}
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public GraphTypeSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphTypeSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphTypeSource(this);
		}
	}

	public final GraphTypeSourceContext graphTypeSource() throws RecognitionException {
		GraphTypeSourceContext _localctx = new GraphTypeSourceContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_graphTypeSource);
		int _la;
		try {
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1556);
					match(AS);
					}
				}

				setState(1559);
				copyOfGraphType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1560);
				graphTypeLikeGraph();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1561);
					match(AS);
					}
				}

				setState(1564);
				nestedGraphTypeSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyOfGraphTypeContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(GQL_20240412Parser.COPY, 0); }
		public TerminalNode OF() { return getToken(GQL_20240412Parser.OF, 0); }
		public GraphTypeReferenceContext graphTypeReference() {
			return getRuleContext(GraphTypeReferenceContext.class,0);
		}
		public CopyOfGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOfGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCopyOfGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCopyOfGraphType(this);
		}
	}

	public final CopyOfGraphTypeContext copyOfGraphType() throws RecognitionException {
		CopyOfGraphTypeContext _localctx = new CopyOfGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_copyOfGraphType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			match(COPY);
			setState(1568);
			match(OF);
			setState(1569);
			graphTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropGraphTypeStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQL_20240412Parser.DROP, 0); }
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQL_20240412Parser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public DropGraphTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGraphTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDropGraphTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDropGraphTypeStatement(this);
		}
	}

	public final DropGraphTypeStatementContext dropGraphTypeStatement() throws RecognitionException {
		DropGraphTypeStatementContext _localctx = new DropGraphTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_dropGraphTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1571);
			match(DROP);
			setState(1573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1572);
				match(PROPERTY);
				}
			}

			setState(1575);
			match(GRAPH);
			setState(1576);
			match(TYPE);
			setState(1579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1577);
				match(IF);
				setState(1578);
				match(EXISTS);
				}
			}

			setState(1581);
			catalogGraphTypeParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallCatalogModifyingProcedureStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallCatalogModifyingProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callCatalogModifyingProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCallCatalogModifyingProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCallCatalogModifyingProcedureStatement(this);
		}
	}

	public final CallCatalogModifyingProcedureStatementContext callCatalogModifyingProcedureStatement() throws RecognitionException {
		CallCatalogModifyingProcedureStatementContext _localctx = new CallCatalogModifyingProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_callCatalogModifyingProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearDataModifyingStatementContext extends ParserRuleContext {
		public FocusedLinearDataModifyingStatementContext focusedLinearDataModifyingStatement() {
			return getRuleContext(FocusedLinearDataModifyingStatementContext.class,0);
		}
		public AmbientLinearDataModifyingStatementContext ambientLinearDataModifyingStatement() {
			return getRuleContext(AmbientLinearDataModifyingStatementContext.class,0);
		}
		public LinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLinearDataModifyingStatement(this);
		}
	}

	public final LinearDataModifyingStatementContext linearDataModifyingStatement() throws RecognitionException {
		LinearDataModifyingStatementContext _localctx = new LinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_linearDataModifyingStatement);
		try {
			setState(1587);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1585);
				focusedLinearDataModifyingStatement();
				}
				break;
			case CALL:
			case DELETE:
			case DETACH:
			case FILTER:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case SET:
			case SKIP_RESERVED_WORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1586);
				ambientLinearDataModifyingStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearDataModifyingStatementContext extends ParserRuleContext {
		public FocusedLinearDataModifyingStatementBodyContext focusedLinearDataModifyingStatementBody() {
			return getRuleContext(FocusedLinearDataModifyingStatementBodyContext.class,0);
		}
		public FocusedNestedDataModifyingProcedureSpecificationContext focusedNestedDataModifyingProcedureSpecification() {
			return getRuleContext(FocusedNestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public FocusedLinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedLinearDataModifyingStatement(this);
		}
	}

	public final FocusedLinearDataModifyingStatementContext focusedLinearDataModifyingStatement() throws RecognitionException {
		FocusedLinearDataModifyingStatementContext _localctx = new FocusedLinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_focusedLinearDataModifyingStatement);
		try {
			setState(1591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1589);
				focusedLinearDataModifyingStatementBody();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1590);
				focusedNestedDataModifyingProcedureSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearDataModifyingStatementBodyContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() {
			return getRuleContext(SimpleLinearDataAccessingStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearDataModifyingStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedLinearDataModifyingStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedLinearDataModifyingStatementBody(this);
		}
	}

	public final FocusedLinearDataModifyingStatementBodyContext focusedLinearDataModifyingStatementBody() throws RecognitionException {
		FocusedLinearDataModifyingStatementBodyContext _localctx = new FocusedLinearDataModifyingStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_focusedLinearDataModifyingStatementBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593);
			useGraphClause();
			setState(1594);
			simpleLinearDataAccessingStatement();
			setState(1596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINISH || _la==RETURN) {
				{
				setState(1595);
				primitiveResultStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedNestedDataModifyingProcedureSpecificationContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() {
			return getRuleContext(NestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedNestedDataModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedNestedDataModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}

	public final FocusedNestedDataModifyingProcedureSpecificationContext focusedNestedDataModifyingProcedureSpecification() throws RecognitionException {
		FocusedNestedDataModifyingProcedureSpecificationContext _localctx = new FocusedNestedDataModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_focusedNestedDataModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1598);
			useGraphClause();
			setState(1599);
			nestedDataModifyingProcedureSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearDataModifyingStatementContext extends ParserRuleContext {
		public AmbientLinearDataModifyingStatementBodyContext ambientLinearDataModifyingStatementBody() {
			return getRuleContext(AmbientLinearDataModifyingStatementBodyContext.class,0);
		}
		public NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() {
			return getRuleContext(NestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public AmbientLinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAmbientLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAmbientLinearDataModifyingStatement(this);
		}
	}

	public final AmbientLinearDataModifyingStatementContext ambientLinearDataModifyingStatement() throws RecognitionException {
		AmbientLinearDataModifyingStatementContext _localctx = new AmbientLinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_ambientLinearDataModifyingStatement);
		try {
			setState(1603);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
			case DELETE:
			case DETACH:
			case FILTER:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case SET:
			case SKIP_RESERVED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1601);
				ambientLinearDataModifyingStatementBody();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1602);
				nestedDataModifyingProcedureSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearDataModifyingStatementBodyContext extends ParserRuleContext {
		public SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() {
			return getRuleContext(SimpleLinearDataAccessingStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearDataModifyingStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAmbientLinearDataModifyingStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAmbientLinearDataModifyingStatementBody(this);
		}
	}

	public final AmbientLinearDataModifyingStatementBodyContext ambientLinearDataModifyingStatementBody() throws RecognitionException {
		AmbientLinearDataModifyingStatementBodyContext _localctx = new AmbientLinearDataModifyingStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_ambientLinearDataModifyingStatementBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			simpleLinearDataAccessingStatement();
			setState(1607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINISH || _la==RETURN) {
				{
				setState(1606);
				primitiveResultStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleLinearDataAccessingStatementContext extends ParserRuleContext {
		public List<SimpleQueryStatementContext> simpleQueryStatement() {
			return getRuleContexts(SimpleQueryStatementContext.class);
		}
		public SimpleQueryStatementContext simpleQueryStatement(int i) {
			return getRuleContext(SimpleQueryStatementContext.class,i);
		}
		public List<SimpleDataModifyingStatementContext> simpleDataModifyingStatement() {
			return getRuleContexts(SimpleDataModifyingStatementContext.class);
		}
		public SimpleDataModifyingStatementContext simpleDataModifyingStatement(int i) {
			return getRuleContext(SimpleDataModifyingStatementContext.class,i);
		}
		public SimpleLinearDataAccessingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLinearDataAccessingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleLinearDataAccessingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleLinearDataAccessingStatement(this);
		}
	}

	public final SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() throws RecognitionException {
		SimpleLinearDataAccessingStatementContext _localctx = new SimpleLinearDataAccessingStatementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_simpleLinearDataAccessingStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1609);
					simpleQueryStatement();
					}
					} 
				}
				setState(1614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			}
			setState(1616); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1615);
				simpleDataModifyingStatement();
				}
				}
				setState(1618); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALL || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 17179869193L) != 0 || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & 1099645846529L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDataModifyingStatementContext extends ParserRuleContext {
		public PrimitiveDataModifyingStatementContext primitiveDataModifyingStatement() {
			return getRuleContext(PrimitiveDataModifyingStatementContext.class,0);
		}
		public CallDataModifyingProcedureStatementContext callDataModifyingProcedureStatement() {
			return getRuleContext(CallDataModifyingProcedureStatementContext.class,0);
		}
		public SimpleDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleDataModifyingStatement(this);
		}
	}

	public final SimpleDataModifyingStatementContext simpleDataModifyingStatement() throws RecognitionException {
		SimpleDataModifyingStatementContext _localctx = new SimpleDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_simpleDataModifyingStatement);
		try {
			setState(1622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case DETACH:
			case INSERT:
			case NODETACH:
			case REMOVE:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1620);
				primitiveDataModifyingStatement();
				}
				break;
			case CALL:
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1621);
				callDataModifyingProcedureStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveDataModifyingStatementContext extends ParserRuleContext {
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public RemoveStatementContext removeStatement() {
			return getRuleContext(RemoveStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public PrimitiveDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrimitiveDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrimitiveDataModifyingStatement(this);
		}
	}

	public final PrimitiveDataModifyingStatementContext primitiveDataModifyingStatement() throws RecognitionException {
		PrimitiveDataModifyingStatementContext _localctx = new PrimitiveDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_primitiveDataModifyingStatement);
		try {
			setState(1628);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1624);
				insertStatement();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1625);
				setStatement();
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1626);
				removeStatement();
				}
				break;
			case DELETE:
			case DETACH:
			case NODETACH:
				enterOuterAlt(_localctx, 4);
				{
				setState(1627);
				deleteStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(GQL_20240412Parser.INSERT, 0); }
		public InsertGraphPatternContext insertGraphPattern() {
			return getRuleContext(InsertGraphPatternContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertStatement(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_insertStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			match(INSERT);
			setState(1631);
			insertGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(GQL_20240412Parser.SET, 0); }
		public SetItemListContext setItemList() {
			return getRuleContext(SetItemListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetStatement(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1633);
			match(SET);
			setState(1634);
			setItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetItemListContext extends ParserRuleContext {
		public List<SetItemContext> setItem() {
			return getRuleContexts(SetItemContext.class);
		}
		public SetItemContext setItem(int i) {
			return getRuleContext(SetItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public SetItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetItemList(this);
		}
	}

	public final SetItemListContext setItemList() throws RecognitionException {
		SetItemListContext _localctx = new SetItemListContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_setItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1636);
			setItem();
			setState(1641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1637);
				match(COMMA);
				setState(1638);
				setItem();
				}
				}
				setState(1643);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetItemContext extends ParserRuleContext {
		public SetPropertyItemContext setPropertyItem() {
			return getRuleContext(SetPropertyItemContext.class,0);
		}
		public SetAllPropertiesItemContext setAllPropertiesItem() {
			return getRuleContext(SetAllPropertiesItemContext.class,0);
		}
		public SetLabelItemContext setLabelItem() {
			return getRuleContext(SetLabelItemContext.class,0);
		}
		public SetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetItem(this);
		}
	}

	public final SetItemContext setItem() throws RecognitionException {
		SetItemContext _localctx = new SetItemContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_setItem);
		try {
			setState(1647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1644);
				setPropertyItem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1645);
				setAllPropertiesItem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1646);
				setLabelItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetPropertyItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQL_20240412Parser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public SetPropertyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPropertyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetPropertyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetPropertyItem(this);
		}
	}

	public final SetPropertyItemContext setPropertyItem() throws RecognitionException {
		SetPropertyItemContext _localctx = new SetPropertyItemContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_setPropertyItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			bindingVariableReference();
			setState(1650);
			match(PERIOD);
			setState(1651);
			propertyName();
			setState(1652);
			match(EQUALS_OPERATOR);
			setState(1653);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetAllPropertiesItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public PropertyKeyValuePairListContext propertyKeyValuePairList() {
			return getRuleContext(PropertyKeyValuePairListContext.class,0);
		}
		public SetAllPropertiesItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAllPropertiesItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetAllPropertiesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetAllPropertiesItem(this);
		}
	}

	public final SetAllPropertiesItemContext setAllPropertiesItem() throws RecognitionException {
		SetAllPropertiesItemContext _localctx = new SetAllPropertiesItemContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_setAllPropertiesItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655);
			bindingVariableReference();
			setState(1656);
			match(EQUALS_OPERATOR);
			setState(1657);
			match(LEFT_BRACE);
			setState(1659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(1658);
				propertyKeyValuePairList();
				}
			}

			setState(1661);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetLabelItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public SetLabelItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setLabelItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetLabelItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetLabelItem(this);
		}
	}

	public final SetLabelItemContext setLabelItem() throws RecognitionException {
		SetLabelItemContext _localctx = new SetLabelItemContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_setLabelItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1663);
			bindingVariableReference();
			setState(1664);
			isOrColon();
			setState(1665);
			labelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveStatementContext extends ParserRuleContext {
		public TerminalNode REMOVE() { return getToken(GQL_20240412Parser.REMOVE, 0); }
		public RemoveItemListContext removeItemList() {
			return getRuleContext(RemoveItemListContext.class,0);
		}
		public RemoveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRemoveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRemoveStatement(this);
		}
	}

	public final RemoveStatementContext removeStatement() throws RecognitionException {
		RemoveStatementContext _localctx = new RemoveStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_removeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			match(REMOVE);
			setState(1668);
			removeItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveItemListContext extends ParserRuleContext {
		public List<RemoveItemContext> removeItem() {
			return getRuleContexts(RemoveItemContext.class);
		}
		public RemoveItemContext removeItem(int i) {
			return getRuleContext(RemoveItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public RemoveItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRemoveItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRemoveItemList(this);
		}
	}

	public final RemoveItemListContext removeItemList() throws RecognitionException {
		RemoveItemListContext _localctx = new RemoveItemListContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_removeItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1670);
			removeItem();
			setState(1675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1671);
				match(COMMA);
				setState(1672);
				removeItem();
				}
				}
				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveItemContext extends ParserRuleContext {
		public RemovePropertyItemContext removePropertyItem() {
			return getRuleContext(RemovePropertyItemContext.class,0);
		}
		public RemoveLabelItemContext removeLabelItem() {
			return getRuleContext(RemoveLabelItemContext.class,0);
		}
		public RemoveItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRemoveItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRemoveItem(this);
		}
	}

	public final RemoveItemContext removeItem() throws RecognitionException {
		RemoveItemContext _localctx = new RemoveItemContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_removeItem);
		try {
			setState(1680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1678);
				removePropertyItem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1679);
				removeLabelItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemovePropertyItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQL_20240412Parser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public RemovePropertyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePropertyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRemovePropertyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRemovePropertyItem(this);
		}
	}

	public final RemovePropertyItemContext removePropertyItem() throws RecognitionException {
		RemovePropertyItemContext _localctx = new RemovePropertyItemContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_removePropertyItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			bindingVariableReference();
			setState(1683);
			match(PERIOD);
			setState(1684);
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveLabelItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public RemoveLabelItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeLabelItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRemoveLabelItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRemoveLabelItem(this);
		}
	}

	public final RemoveLabelItemContext removeLabelItem() throws RecognitionException {
		RemoveLabelItemContext _localctx = new RemoveLabelItemContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_removeLabelItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1686);
			bindingVariableReference();
			setState(1687);
			isOrColon();
			setState(1688);
			labelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(GQL_20240412Parser.DELETE, 0); }
		public DeleteItemListContext deleteItemList() {
			return getRuleContext(DeleteItemListContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(GQL_20240412Parser.DETACH, 0); }
		public TerminalNode NODETACH() { return getToken(GQL_20240412Parser.NODETACH, 0); }
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDeleteStatement(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_deleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETACH || _la==NODETACH) {
				{
				setState(1690);
				_la = _input.LA(1);
				if ( !(_la==DETACH || _la==NODETACH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1693);
			match(DELETE);
			setState(1694);
			deleteItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteItemListContext extends ParserRuleContext {
		public List<DeleteItemContext> deleteItem() {
			return getRuleContexts(DeleteItemContext.class);
		}
		public DeleteItemContext deleteItem(int i) {
			return getRuleContext(DeleteItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public DeleteItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDeleteItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDeleteItemList(this);
		}
	}

	public final DeleteItemListContext deleteItemList() throws RecognitionException {
		DeleteItemListContext _localctx = new DeleteItemListContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_deleteItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			deleteItem();
			setState(1701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1697);
				match(COMMA);
				setState(1698);
				deleteItem();
				}
				}
				setState(1703);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteItemContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public DeleteItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDeleteItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDeleteItem(this);
		}
	}

	public final DeleteItemContext deleteItem() throws RecognitionException {
		DeleteItemContext _localctx = new DeleteItemContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_deleteItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallDataModifyingProcedureStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallDataModifyingProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callDataModifyingProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCallDataModifyingProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCallDataModifyingProcedureStatement(this);
		}
	}

	public final CallDataModifyingProcedureStatementContext callDataModifyingProcedureStatement() throws RecognitionException {
		CallDataModifyingProcedureStatementContext _localctx = new CallDataModifyingProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_callDataModifyingProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryStatementContext extends ParserRuleContext {
		public CompositeQueryExpressionContext compositeQueryExpression() {
			return getRuleContext(CompositeQueryExpressionContext.class,0);
		}
		public CompositeQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCompositeQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCompositeQueryStatement(this);
		}
	}

	public final CompositeQueryStatementContext compositeQueryStatement() throws RecognitionException {
		CompositeQueryStatementContext _localctx = new CompositeQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_compositeQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1708);
			compositeQueryExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryExpressionContext extends ParserRuleContext {
		public CompositeQueryPrimaryContext compositeQueryPrimary() {
			return getRuleContext(CompositeQueryPrimaryContext.class,0);
		}
		public CompositeQueryExpressionContext compositeQueryExpression() {
			return getRuleContext(CompositeQueryExpressionContext.class,0);
		}
		public QueryConjunctionContext queryConjunction() {
			return getRuleContext(QueryConjunctionContext.class,0);
		}
		public CompositeQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCompositeQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCompositeQueryExpression(this);
		}
	}

	public final CompositeQueryExpressionContext compositeQueryExpression() throws RecognitionException {
		return compositeQueryExpression(0);
	}

	private CompositeQueryExpressionContext compositeQueryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CompositeQueryExpressionContext _localctx = new CompositeQueryExpressionContext(_ctx, _parentState);
		CompositeQueryExpressionContext _prevctx = _localctx;
		int _startState = 182;
		enterRecursionRule(_localctx, 182, RULE_compositeQueryExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1711);
			compositeQueryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(1719);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompositeQueryExpressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_compositeQueryExpression);
					setState(1713);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1714);
					queryConjunction();
					setState(1715);
					compositeQueryPrimary();
					}
					} 
				}
				setState(1721);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryConjunctionContext extends ParserRuleContext {
		public SetOperatorContext setOperator() {
			return getRuleContext(SetOperatorContext.class,0);
		}
		public TerminalNode OTHERWISE() { return getToken(GQL_20240412Parser.OTHERWISE, 0); }
		public QueryConjunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryConjunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterQueryConjunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitQueryConjunction(this);
		}
	}

	public final QueryConjunctionContext queryConjunction() throws RecognitionException {
		QueryConjunctionContext _localctx = new QueryConjunctionContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_queryConjunction);
		try {
			setState(1724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case INTERSECT:
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1722);
				setOperator();
				}
				break;
			case OTHERWISE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1723);
				match(OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetOperatorContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(GQL_20240412Parser.UNION, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode EXCEPT() { return getToken(GQL_20240412Parser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(GQL_20240412Parser.INTERSECT, 0); }
		public SetOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetOperator(this);
		}
	}

	public final SetOperatorContext setOperator() throws RecognitionException {
		SetOperatorContext _localctx = new SetOperatorContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_setOperator);
		int _la;
		try {
			setState(1738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1726);
				match(UNION);
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1727);
					setQuantifier();
					}
				}

				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1730);
				match(EXCEPT);
				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1731);
					setQuantifier();
					}
				}

				}
				break;
			case INTERSECT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1734);
				match(INTERSECT);
				setState(1736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1735);
					setQuantifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryPrimaryContext extends ParserRuleContext {
		public LinearQueryStatementContext linearQueryStatement() {
			return getRuleContext(LinearQueryStatementContext.class,0);
		}
		public CompositeQueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCompositeQueryPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCompositeQueryPrimary(this);
		}
	}

	public final CompositeQueryPrimaryContext compositeQueryPrimary() throws RecognitionException {
		CompositeQueryPrimaryContext _localctx = new CompositeQueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_compositeQueryPrimary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1740);
			linearQueryStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearQueryStatementContext extends ParserRuleContext {
		public FocusedLinearQueryStatementContext focusedLinearQueryStatement() {
			return getRuleContext(FocusedLinearQueryStatementContext.class,0);
		}
		public AmbientLinearQueryStatementContext ambientLinearQueryStatement() {
			return getRuleContext(AmbientLinearQueryStatementContext.class,0);
		}
		public LinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLinearQueryStatement(this);
		}
	}

	public final LinearQueryStatementContext linearQueryStatement() throws RecognitionException {
		LinearQueryStatementContext _localctx = new LinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_linearQueryStatement);
		try {
			setState(1744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case USE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1742);
				focusedLinearQueryStatement();
				}
				break;
			case CALL:
			case FILTER:
			case FINISH:
			case FOR:
			case LET:
			case LIMIT:
			case MATCH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case RETURN:
			case SKIP_RESERVED_WORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1743);
				ambientLinearQueryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryStatementContext extends ParserRuleContext {
		public FocusedLinearQueryAndPrimitiveResultStatementPartContext focusedLinearQueryAndPrimitiveResultStatementPart() {
			return getRuleContext(FocusedLinearQueryAndPrimitiveResultStatementPartContext.class,0);
		}
		public List<FocusedLinearQueryStatementPartContext> focusedLinearQueryStatementPart() {
			return getRuleContexts(FocusedLinearQueryStatementPartContext.class);
		}
		public FocusedLinearQueryStatementPartContext focusedLinearQueryStatementPart(int i) {
			return getRuleContext(FocusedLinearQueryStatementPartContext.class,i);
		}
		public FocusedPrimitiveResultStatementContext focusedPrimitiveResultStatement() {
			return getRuleContext(FocusedPrimitiveResultStatementContext.class,0);
		}
		public FocusedNestedQuerySpecificationContext focusedNestedQuerySpecification() {
			return getRuleContext(FocusedNestedQuerySpecificationContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public FocusedLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedLinearQueryStatement(this);
		}
	}

	public final FocusedLinearQueryStatementContext focusedLinearQueryStatement() throws RecognitionException {
		FocusedLinearQueryStatementContext _localctx = new FocusedLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_focusedLinearQueryStatement);
		try {
			int _alt;
			setState(1756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1749);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1746);
						focusedLinearQueryStatementPart();
						}
						} 
					}
					setState(1751);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
				}
				setState(1752);
				focusedLinearQueryAndPrimitiveResultStatementPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1753);
				focusedPrimitiveResultStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1754);
				focusedNestedQuerySpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1755);
				selectStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryStatementPartContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public FocusedLinearQueryStatementPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryStatementPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedLinearQueryStatementPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedLinearQueryStatementPart(this);
		}
	}

	public final FocusedLinearQueryStatementPartContext focusedLinearQueryStatementPart() throws RecognitionException {
		FocusedLinearQueryStatementPartContext _localctx = new FocusedLinearQueryStatementPartContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_focusedLinearQueryStatementPart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1758);
			useGraphClause();
			setState(1759);
			simpleLinearQueryStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryAndPrimitiveResultStatementPartContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryAndPrimitiveResultStatementPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}

	public final FocusedLinearQueryAndPrimitiveResultStatementPartContext focusedLinearQueryAndPrimitiveResultStatementPart() throws RecognitionException {
		FocusedLinearQueryAndPrimitiveResultStatementPartContext _localctx = new FocusedLinearQueryAndPrimitiveResultStatementPartContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_focusedLinearQueryAndPrimitiveResultStatementPart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1761);
			useGraphClause();
			setState(1762);
			simpleLinearQueryStatement();
			setState(1763);
			primitiveResultStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedPrimitiveResultStatementContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedPrimitiveResultStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedPrimitiveResultStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedPrimitiveResultStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedPrimitiveResultStatement(this);
		}
	}

	public final FocusedPrimitiveResultStatementContext focusedPrimitiveResultStatement() throws RecognitionException {
		FocusedPrimitiveResultStatementContext _localctx = new FocusedPrimitiveResultStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_focusedPrimitiveResultStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			useGraphClause();
			setState(1766);
			primitiveResultStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedNestedQuerySpecificationContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public FocusedNestedQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedNestedQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFocusedNestedQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFocusedNestedQuerySpecification(this);
		}
	}

	public final FocusedNestedQuerySpecificationContext focusedNestedQuerySpecification() throws RecognitionException {
		FocusedNestedQuerySpecificationContext _localctx = new FocusedNestedQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_focusedNestedQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768);
			useGraphClause();
			setState(1769);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearQueryStatementContext extends ParserRuleContext {
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public AmbientLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAmbientLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAmbientLinearQueryStatement(this);
		}
	}

	public final AmbientLinearQueryStatementContext ambientLinearQueryStatement() throws RecognitionException {
		AmbientLinearQueryStatementContext _localctx = new AmbientLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_ambientLinearQueryStatement);
		int _la;
		try {
			setState(1776);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
			case FILTER:
			case FINISH:
			case FOR:
			case LET:
			case LIMIT:
			case MATCH:
			case OFFSET:
			case OPTIONAL:
			case ORDER:
			case RETURN:
			case SKIP_RESERVED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALL || (((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 4506348406440449L) != 0 || (((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 68719476747L) != 0) {
					{
					setState(1771);
					simpleLinearQueryStatement();
					}
				}

				setState(1774);
				primitiveResultStatement();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1775);
				nestedQuerySpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleLinearQueryStatementContext extends ParserRuleContext {
		public List<SimpleQueryStatementContext> simpleQueryStatement() {
			return getRuleContexts(SimpleQueryStatementContext.class);
		}
		public SimpleQueryStatementContext simpleQueryStatement(int i) {
			return getRuleContext(SimpleQueryStatementContext.class,i);
		}
		public SimpleLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleLinearQueryStatement(this);
		}
	}

	public final SimpleLinearQueryStatementContext simpleLinearQueryStatement() throws RecognitionException {
		SimpleLinearQueryStatementContext _localctx = new SimpleLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_simpleLinearQueryStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1779); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1778);
				simpleQueryStatement();
				}
				}
				setState(1781); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALL || (((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 4506348406440449L) != 0 || (((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 68719476747L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleQueryStatementContext extends ParserRuleContext {
		public PrimitiveQueryStatementContext primitiveQueryStatement() {
			return getRuleContext(PrimitiveQueryStatementContext.class,0);
		}
		public CallQueryStatementContext callQueryStatement() {
			return getRuleContext(CallQueryStatementContext.class,0);
		}
		public SimpleQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleQueryStatement(this);
		}
	}

	public final SimpleQueryStatementContext simpleQueryStatement() throws RecognitionException {
		SimpleQueryStatementContext _localctx = new SimpleQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_simpleQueryStatement);
		try {
			setState(1785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1783);
				primitiveQueryStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1784);
				callQueryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveQueryStatementContext extends ParserRuleContext {
		public MatchStatementContext matchStatement() {
			return getRuleContext(MatchStatementContext.class,0);
		}
		public LetStatementContext letStatement() {
			return getRuleContext(LetStatementContext.class,0);
		}
		public ForStatementContext forStatement() {
			return getRuleContext(ForStatementContext.class,0);
		}
		public FilterStatementContext filterStatement() {
			return getRuleContext(FilterStatementContext.class,0);
		}
		public OrderByAndPageStatementContext orderByAndPageStatement() {
			return getRuleContext(OrderByAndPageStatementContext.class,0);
		}
		public PrimitiveQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrimitiveQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrimitiveQueryStatement(this);
		}
	}

	public final PrimitiveQueryStatementContext primitiveQueryStatement() throws RecognitionException {
		PrimitiveQueryStatementContext _localctx = new PrimitiveQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_primitiveQueryStatement);
		try {
			setState(1792);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
			case OPTIONAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1787);
				matchStatement();
				}
				break;
			case LET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1788);
				letStatement();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1789);
				forStatement();
				}
				break;
			case FILTER:
				enterOuterAlt(_localctx, 4);
				{
				setState(1790);
				filterStatement();
				}
				break;
			case LIMIT:
			case OFFSET:
			case ORDER:
			case SKIP_RESERVED_WORD:
				enterOuterAlt(_localctx, 5);
				{
				setState(1791);
				orderByAndPageStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchStatementContext extends ParserRuleContext {
		public SimpleMatchStatementContext simpleMatchStatement() {
			return getRuleContext(SimpleMatchStatementContext.class,0);
		}
		public OptionalMatchStatementContext optionalMatchStatement() {
			return getRuleContext(OptionalMatchStatementContext.class,0);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMatchStatement(this);
		}
	}

	public final MatchStatementContext matchStatement() throws RecognitionException {
		MatchStatementContext _localctx = new MatchStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_matchStatement);
		try {
			setState(1796);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1794);
				simpleMatchStatement();
				}
				break;
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1795);
				optionalMatchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleMatchStatementContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(GQL_20240412Parser.MATCH, 0); }
		public GraphPatternBindingTableContext graphPatternBindingTable() {
			return getRuleContext(GraphPatternBindingTableContext.class,0);
		}
		public SimpleMatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleMatchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleMatchStatement(this);
		}
	}

	public final SimpleMatchStatementContext simpleMatchStatement() throws RecognitionException {
		SimpleMatchStatementContext _localctx = new SimpleMatchStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_simpleMatchStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798);
			match(MATCH);
			setState(1799);
			graphPatternBindingTable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionalMatchStatementContext extends ParserRuleContext {
		public TerminalNode OPTIONAL() { return getToken(GQL_20240412Parser.OPTIONAL, 0); }
		public OptionalOperandContext optionalOperand() {
			return getRuleContext(OptionalOperandContext.class,0);
		}
		public OptionalMatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionalMatchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOptionalMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOptionalMatchStatement(this);
		}
	}

	public final OptionalMatchStatementContext optionalMatchStatement() throws RecognitionException {
		OptionalMatchStatementContext _localctx = new OptionalMatchStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_optionalMatchStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(OPTIONAL);
			setState(1802);
			optionalOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionalOperandContext extends ParserRuleContext {
		public SimpleMatchStatementContext simpleMatchStatement() {
			return getRuleContext(SimpleMatchStatementContext.class,0);
		}
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public MatchStatementBlockContext matchStatementBlock() {
			return getRuleContext(MatchStatementBlockContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public OptionalOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionalOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOptionalOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOptionalOperand(this);
		}
	}

	public final OptionalOperandContext optionalOperand() throws RecognitionException {
		OptionalOperandContext _localctx = new OptionalOperandContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_optionalOperand);
		try {
			setState(1813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1804);
				simpleMatchStatement();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1805);
				match(LEFT_BRACE);
				setState(1806);
				matchStatementBlock();
				setState(1807);
				match(RIGHT_BRACE);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1809);
				match(LEFT_PAREN);
				setState(1810);
				matchStatementBlock();
				setState(1811);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchStatementBlockContext extends ParserRuleContext {
		public List<MatchStatementContext> matchStatement() {
			return getRuleContexts(MatchStatementContext.class);
		}
		public MatchStatementContext matchStatement(int i) {
			return getRuleContext(MatchStatementContext.class,i);
		}
		public MatchStatementBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchStatementBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMatchStatementBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMatchStatementBlock(this);
		}
	}

	public final MatchStatementBlockContext matchStatementBlock() throws RecognitionException {
		MatchStatementBlockContext _localctx = new MatchStatementBlockContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_matchStatementBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1815);
				matchStatement();
				}
				}
				setState(1818); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MATCH || _la==OPTIONAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallQueryStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCallQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCallQueryStatement(this);
		}
	}

	public final CallQueryStatementContext callQueryStatement() throws RecognitionException {
		CallQueryStatementContext _localctx = new CallQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_callQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1820);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterStatementContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(GQL_20240412Parser.FILTER, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public FilterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFilterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFilterStatement(this);
		}
	}

	public final FilterStatementContext filterStatement() throws RecognitionException {
		FilterStatementContext _localctx = new FilterStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_filterStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1822);
			match(FILTER);
			setState(1825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				{
				setState(1823);
				whereClause();
				}
				break;
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case ABS:
			case ACOS:
			case ALL_DIFFERENT:
			case ARRAY:
			case ASIN:
			case ATAN:
			case AVG:
			case BTRIM:
			case BYTE_LENGTH:
			case CARDINALITY:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case COALESCE:
			case COLLECT_LIST:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATE:
			case DATETIME:
			case DEGREES:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT_ID:
			case EXISTS:
			case EXP:
			case FLOOR:
			case GROUP:
			case LEFT:
			case LET:
			case LIST:
			case LN:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MAX:
			case MIN:
			case MOD:
			case NORMALIZE:
			case NOT:
			case NULL:
			case NULLIF:
			case OCTET_LENGTH:
			case PATH:
			case PATH_LENGTH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PROPERTY_EXISTS:
			case RADIANS:
			case RECORD:
			case RIGHT:
			case RTRIM:
			case SAME:
			case SESSION_USER:
			case SIN:
			case SINH:
			case SIZE:
			case SQRT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TRIM:
			case UPPER:
			case VALUE:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
			case GENERAL_PARAMETER_REFERENCE:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case LEFT_PAREN:
			case MINUS_SIGN:
			case PLUS_SIGN:
				{
				setState(1824);
				searchCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetStatementContext extends ParserRuleContext {
		public TerminalNode LET() { return getToken(GQL_20240412Parser.LET, 0); }
		public LetVariableDefinitionListContext letVariableDefinitionList() {
			return getRuleContext(LetVariableDefinitionListContext.class,0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLetStatement(this);
		}
	}

	public final LetStatementContext letStatement() throws RecognitionException {
		LetStatementContext _localctx = new LetStatementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_letStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1827);
			match(LET);
			setState(1828);
			letVariableDefinitionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetVariableDefinitionListContext extends ParserRuleContext {
		public List<LetVariableDefinitionContext> letVariableDefinition() {
			return getRuleContexts(LetVariableDefinitionContext.class);
		}
		public LetVariableDefinitionContext letVariableDefinition(int i) {
			return getRuleContext(LetVariableDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public LetVariableDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letVariableDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLetVariableDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLetVariableDefinitionList(this);
		}
	}

	public final LetVariableDefinitionListContext letVariableDefinitionList() throws RecognitionException {
		LetVariableDefinitionListContext _localctx = new LetVariableDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_letVariableDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			letVariableDefinition();
			setState(1835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1831);
				match(COMMA);
				setState(1832);
				letVariableDefinition();
				}
				}
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetVariableDefinitionContext extends ParserRuleContext {
		public ValueVariableDefinitionContext valueVariableDefinition() {
			return getRuleContext(ValueVariableDefinitionContext.class,0);
		}
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public LetVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLetVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLetVariableDefinition(this);
		}
	}

	public final LetVariableDefinitionContext letVariableDefinition() throws RecognitionException {
		LetVariableDefinitionContext _localctx = new LetVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_letVariableDefinition);
		try {
			setState(1843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1838);
				valueVariableDefinition();
				}
				break;
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1839);
				bindingVariable();
				setState(1840);
				match(EQUALS_OPERATOR);
				setState(1841);
				valueExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForStatementContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GQL_20240412Parser.FOR, 0); }
		public ForItemContext forItem() {
			return getRuleContext(ForItemContext.class,0);
		}
		public ForOrdinalityOrOffsetContext forOrdinalityOrOffset() {
			return getRuleContext(ForOrdinalityOrOffsetContext.class,0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterForStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitForStatement(this);
		}
	}

	public final ForStatementContext forStatement() throws RecognitionException {
		ForStatementContext _localctx = new ForStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_forStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			match(FOR);
			setState(1846);
			forItem();
			setState(1848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1847);
				forOrdinalityOrOffset();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForItemContext extends ParserRuleContext {
		public ForItemAliasContext forItemAlias() {
			return getRuleContext(ForItemAliasContext.class,0);
		}
		public ForItemSourceContext forItemSource() {
			return getRuleContext(ForItemSourceContext.class,0);
		}
		public ForItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterForItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitForItem(this);
		}
	}

	public final ForItemContext forItem() throws RecognitionException {
		ForItemContext _localctx = new ForItemContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_forItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1850);
			forItemAlias();
			setState(1851);
			forItemSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForItemAliasContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public TerminalNode IN() { return getToken(GQL_20240412Parser.IN, 0); }
		public ForItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterForItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitForItemAlias(this);
		}
	}

	public final ForItemAliasContext forItemAlias() throws RecognitionException {
		ForItemAliasContext _localctx = new ForItemAliasContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_forItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1853);
			bindingVariable();
			setState(1854);
			match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForItemSourceContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ForItemSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forItemSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterForItemSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitForItemSource(this);
		}
	}

	public final ForItemSourceContext forItemSource() throws RecognitionException {
		ForItemSourceContext _localctx = new ForItemSourceContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_forItemSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForOrdinalityOrOffsetContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GQL_20240412Parser.WITH, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public TerminalNode ORDINALITY() { return getToken(GQL_20240412Parser.ORDINALITY, 0); }
		public TerminalNode OFFSET() { return getToken(GQL_20240412Parser.OFFSET, 0); }
		public ForOrdinalityOrOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forOrdinalityOrOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterForOrdinalityOrOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitForOrdinalityOrOffset(this);
		}
	}

	public final ForOrdinalityOrOffsetContext forOrdinalityOrOffset() throws RecognitionException {
		ForOrdinalityOrOffsetContext _localctx = new ForOrdinalityOrOffsetContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_forOrdinalityOrOffset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			match(WITH);
			setState(1859);
			_la = _input.LA(1);
			if ( !(_la==OFFSET || _la==ORDINALITY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1860);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByAndPageStatementContext extends ParserRuleContext {
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OrderByAndPageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByAndPageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOrderByAndPageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOrderByAndPageStatement(this);
		}
	}

	public final OrderByAndPageStatementContext orderByAndPageStatement() throws RecognitionException {
		OrderByAndPageStatementContext _localctx = new OrderByAndPageStatementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_orderByAndPageStatement);
		try {
			setState(1874);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1862);
				orderByClause();
				setState(1864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1863);
					offsetClause();
					}
					break;
				}
				setState(1867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1866);
					limitClause();
					}
					break;
				}
				}
				break;
			case OFFSET:
			case SKIP_RESERVED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1869);
				offsetClause();
				setState(1871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1870);
					limitClause();
					}
					break;
				}
				}
				break;
			case LIMIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1873);
				limitClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveResultStatementContext extends ParserRuleContext {
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OrderByAndPageStatementContext orderByAndPageStatement() {
			return getRuleContext(OrderByAndPageStatementContext.class,0);
		}
		public TerminalNode FINISH() { return getToken(GQL_20240412Parser.FINISH, 0); }
		public PrimitiveResultStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveResultStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrimitiveResultStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrimitiveResultStatement(this);
		}
	}

	public final PrimitiveResultStatementContext primitiveResultStatement() throws RecognitionException {
		PrimitiveResultStatementContext _localctx = new PrimitiveResultStatementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_primitiveResultStatement);
		try {
			setState(1881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1876);
				returnStatement();
				setState(1878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1877);
					orderByAndPageStatement();
					}
					break;
				}
				}
				break;
			case FINISH:
				enterOuterAlt(_localctx, 2);
				{
				setState(1880);
				match(FINISH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(GQL_20240412Parser.RETURN, 0); }
		public ReturnStatementBodyContext returnStatementBody() {
			return getRuleContext(ReturnStatementBodyContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReturnStatement(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1883);
			match(RETURN);
			setState(1884);
			returnStatementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementBodyContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public ReturnItemListContext returnItemList() {
			return getRuleContext(ReturnItemListContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public TerminalNode NO() { return getToken(GQL_20240412Parser.NO, 0); }
		public TerminalNode BINDINGS() { return getToken(GQL_20240412Parser.BINDINGS, 0); }
		public ReturnStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReturnStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReturnStatementBody(this);
		}
	}

	public final ReturnStatementBodyContext returnStatementBody() throws RecognitionException {
		ReturnStatementBodyContext _localctx = new ReturnStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_returnStatementBody);
		int _la;
		try {
			setState(1898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1886);
					setQuantifier();
					}
				}

				setState(1891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(1889);
					match(ASTERISK);
					}
					break;
				case BOOLEAN_LITERAL:
				case SINGLE_QUOTED_CHARACTER_SEQUENCE:
				case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				case BYTE_STRING_LITERAL:
				case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
				case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
				case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
				case UNSIGNED_DECIMAL_INTEGER:
				case UNSIGNED_HEXADECIMAL_INTEGER:
				case UNSIGNED_OCTAL_INTEGER:
				case UNSIGNED_BINARY_INTEGER:
				case ABS:
				case ACOS:
				case ALL_DIFFERENT:
				case ARRAY:
				case ASIN:
				case ATAN:
				case AVG:
				case BTRIM:
				case BYTE_LENGTH:
				case CARDINALITY:
				case CASE:
				case CAST:
				case CEIL:
				case CEILING:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case COALESCE:
				case COLLECT_LIST:
				case COS:
				case COSH:
				case COT:
				case COUNT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATE:
				case DATETIME:
				case DEGREES:
				case DURATION:
				case DURATION_BETWEEN:
				case ELEMENT_ID:
				case EXISTS:
				case EXP:
				case FLOOR:
				case GROUP:
				case LEFT:
				case LET:
				case LIST:
				case LN:
				case LOCAL_DATETIME:
				case LOCAL_TIME:
				case LOCAL_TIMESTAMP:
				case LOG:
				case LOG10:
				case LOWER:
				case LTRIM:
				case MAX:
				case MIN:
				case MOD:
				case NORMALIZE:
				case NOT:
				case NULL:
				case NULLIF:
				case OCTET_LENGTH:
				case PATH:
				case PATH_LENGTH:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POWER:
				case PROPERTY_EXISTS:
				case RADIANS:
				case RECORD:
				case RIGHT:
				case RTRIM:
				case SAME:
				case SESSION_USER:
				case SIN:
				case SINH:
				case SIZE:
				case SQRT:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case TAN:
				case TANH:
				case TIME:
				case TIMESTAMP:
				case TRIM:
				case UPPER:
				case VALUE:
				case ZONED_DATETIME:
				case ZONED_TIME:
				case ACYCLIC:
				case BINDING:
				case BINDINGS:
				case CONNECTING:
				case DESTINATION:
				case DIFFERENT:
				case DIRECTED:
				case EDGE:
				case EDGES:
				case ELEMENT:
				case ELEMENTS:
				case FIRST:
				case GRAPH:
				case GROUPS:
				case KEEP:
				case LABEL:
				case LABELED:
				case LABELS:
				case LAST:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case NO:
				case NODE:
				case NORMALIZED:
				case ONLY:
				case ORDINALITY:
				case PROPERTY:
				case READ:
				case RELATIONSHIP:
				case RELATIONSHIPS:
				case REPEATABLE:
				case SHORTEST:
				case SIMPLE:
				case SOURCE:
				case TABLE:
				case TEMP:
				case TO:
				case TRAIL:
				case TRANSACTION:
				case TYPE:
				case UNDIRECTED:
				case VERTEX:
				case WALK:
				case WITHOUT:
				case WRITE:
				case ZONE:
				case REGULAR_IDENTIFIER:
				case GENERAL_PARAMETER_REFERENCE:
				case LEFT_BRACE:
				case LEFT_BRACKET:
				case LEFT_PAREN:
				case MINUS_SIGN:
				case PLUS_SIGN:
					{
					setState(1890);
					returnItemList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1893);
					groupByClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1896);
				match(NO);
				setState(1897);
				match(BINDINGS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemListContext extends ParserRuleContext {
		public List<ReturnItemContext> returnItem() {
			return getRuleContexts(ReturnItemContext.class);
		}
		public ReturnItemContext returnItem(int i) {
			return getRuleContext(ReturnItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public ReturnItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReturnItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReturnItemList(this);
		}
	}

	public final ReturnItemListContext returnItemList() throws RecognitionException {
		ReturnItemListContext _localctx = new ReturnItemListContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_returnItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1900);
			returnItem();
			setState(1905);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1901);
					match(COMMA);
					setState(1902);
					returnItem();
					}
					} 
				}
				setState(1907);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,121,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemContext extends ParserRuleContext {
		public AggregatingValueExpressionContext aggregatingValueExpression() {
			return getRuleContext(AggregatingValueExpressionContext.class,0);
		}
		public ReturnItemAliasContext returnItemAlias() {
			return getRuleContext(ReturnItemAliasContext.class,0);
		}
		public ReturnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReturnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReturnItem(this);
		}
	}

	public final ReturnItemContext returnItem() throws RecognitionException {
		ReturnItemContext _localctx = new ReturnItemContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_returnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1908);
			aggregatingValueExpression();
			setState(1910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1909);
				returnItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ReturnItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReturnItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReturnItemAlias(this);
		}
	}

	public final ReturnItemAliasContext returnItemAlias() throws RecognitionException {
		ReturnItemAliasContext _localctx = new ReturnItemAliasContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_returnItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1912);
			match(AS);
			setState(1913);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GQL_20240412Parser.SELECT, 0); }
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SelectStatementBodyContext selectStatementBody() {
			return getRuleContext(SelectStatementBodyContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectStatement(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_selectStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1915);
			match(SELECT);
			setState(1917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1916);
				setQuantifier();
				}
			}

			setState(1921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(1919);
				match(ASTERISK);
				}
				break;
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case ABS:
			case ACOS:
			case ALL_DIFFERENT:
			case ARRAY:
			case ASIN:
			case ATAN:
			case AVG:
			case BTRIM:
			case BYTE_LENGTH:
			case CARDINALITY:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case COALESCE:
			case COLLECT_LIST:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATE:
			case DATETIME:
			case DEGREES:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT_ID:
			case EXISTS:
			case EXP:
			case FLOOR:
			case GROUP:
			case LEFT:
			case LET:
			case LIST:
			case LN:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MAX:
			case MIN:
			case MOD:
			case NORMALIZE:
			case NOT:
			case NULL:
			case NULLIF:
			case OCTET_LENGTH:
			case PATH:
			case PATH_LENGTH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PROPERTY_EXISTS:
			case RADIANS:
			case RECORD:
			case RIGHT:
			case RTRIM:
			case SAME:
			case SESSION_USER:
			case SIN:
			case SINH:
			case SIZE:
			case SQRT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TAN:
			case TANH:
			case TIME:
			case TIMESTAMP:
			case TRIM:
			case UPPER:
			case VALUE:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
			case GENERAL_PARAMETER_REFERENCE:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case LEFT_PAREN:
			case MINUS_SIGN:
			case PLUS_SIGN:
				{
				setState(1920);
				selectItemList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1923);
				selectStatementBody();
				setState(1925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1924);
					whereClause();
					}
					break;
				}
				setState(1928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(1927);
					groupByClause();
					}
					break;
				}
				setState(1931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1930);
					havingClause();
					}
					break;
				}
				setState(1934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1933);
					orderByClause();
					}
					break;
				}
				setState(1937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1936);
					offsetClause();
					}
					break;
				}
				setState(1940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(1939);
					limitClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectItemList(this);
		}
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			selectItem();
			setState(1949);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1945);
					match(COMMA);
					setState(1946);
					selectItem();
					}
					} 
				}
				setState(1951);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemContext extends ParserRuleContext {
		public AggregatingValueExpressionContext aggregatingValueExpression() {
			return getRuleContext(AggregatingValueExpressionContext.class,0);
		}
		public SelectItemAliasContext selectItemAlias() {
			return getRuleContext(SelectItemAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectItem(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_selectItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			aggregatingValueExpression();
			setState(1954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1953);
				selectItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SelectItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectItemAlias(this);
		}
	}

	public final SelectItemAliasContext selectItemAlias() throws RecognitionException {
		SelectItemAliasContext _localctx = new SelectItemAliasContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_selectItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1956);
			match(AS);
			setState(1957);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(GQL_20240412Parser.HAVING, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitHavingClause(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1959);
			match(HAVING);
			setState(1960);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementBodyContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(GQL_20240412Parser.FROM, 0); }
		public SelectGraphMatchListContext selectGraphMatchList() {
			return getRuleContext(SelectGraphMatchListContext.class,0);
		}
		public SelectQuerySpecificationContext selectQuerySpecification() {
			return getRuleContext(SelectQuerySpecificationContext.class,0);
		}
		public SelectStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectStatementBody(this);
		}
	}

	public final SelectStatementBodyContext selectStatementBody() throws RecognitionException {
		SelectStatementBodyContext _localctx = new SelectStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_selectStatementBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962);
			match(FROM);
			setState(1965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1963);
				selectGraphMatchList();
				}
				break;
			case 2:
				{
				setState(1964);
				selectQuerySpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectGraphMatchListContext extends ParserRuleContext {
		public List<SelectGraphMatchContext> selectGraphMatch() {
			return getRuleContexts(SelectGraphMatchContext.class);
		}
		public SelectGraphMatchContext selectGraphMatch(int i) {
			return getRuleContext(SelectGraphMatchContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public SelectGraphMatchListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectGraphMatchList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectGraphMatchList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectGraphMatchList(this);
		}
	}

	public final SelectGraphMatchListContext selectGraphMatchList() throws RecognitionException {
		SelectGraphMatchListContext _localctx = new SelectGraphMatchListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_selectGraphMatchList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1967);
			selectGraphMatch();
			setState(1972);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1968);
					match(COMMA);
					setState(1969);
					selectGraphMatch();
					}
					} 
				}
				setState(1974);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectGraphMatchContext extends ParserRuleContext {
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public MatchStatementContext matchStatement() {
			return getRuleContext(MatchStatementContext.class,0);
		}
		public SelectGraphMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectGraphMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectGraphMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectGraphMatch(this);
		}
	}

	public final SelectGraphMatchContext selectGraphMatch() throws RecognitionException {
		SelectGraphMatchContext _localctx = new SelectGraphMatchContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectGraphMatch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			graphExpression();
			setState(1976);
			matchStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectQuerySpecificationContext extends ParserRuleContext {
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSelectQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSelectQuerySpecification(this);
		}
	}

	public final SelectQuerySpecificationContext selectQuerySpecification() throws RecognitionException {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectQuerySpecification);
		try {
			setState(1982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1978);
				nestedQuerySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1979);
				graphExpression();
				setState(1980);
				nestedQuerySpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(GQL_20240412Parser.CALL, 0); }
		public ProcedureCallContext procedureCall() {
			return getRuleContext(ProcedureCallContext.class,0);
		}
		public TerminalNode OPTIONAL() { return getToken(GQL_20240412Parser.OPTIONAL, 0); }
		public CallProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCallProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCallProcedureStatement(this);
		}
	}

	public final CallProcedureStatementContext callProcedureStatement() throws RecognitionException {
		CallProcedureStatementContext _localctx = new CallProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_callProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONAL) {
				{
				setState(1984);
				match(OPTIONAL);
				}
			}

			setState(1987);
			match(CALL);
			setState(1988);
			procedureCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureCallContext extends ParserRuleContext {
		public InlineProcedureCallContext inlineProcedureCall() {
			return getRuleContext(InlineProcedureCallContext.class,0);
		}
		public NamedProcedureCallContext namedProcedureCall() {
			return getRuleContext(NamedProcedureCallContext.class,0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureCall(this);
		}
	}

	public final ProcedureCallContext procedureCall() throws RecognitionException {
		ProcedureCallContext _localctx = new ProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_procedureCall);
		try {
			setState(1992);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1990);
				inlineProcedureCall();
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
			case SUBSTITUTED_PARAMETER_REFERENCE:
			case DOUBLE_PERIOD:
			case PERIOD:
			case SOLIDUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1991);
				namedProcedureCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InlineProcedureCallContext extends ParserRuleContext {
		public NestedProcedureSpecificationContext nestedProcedureSpecification() {
			return getRuleContext(NestedProcedureSpecificationContext.class,0);
		}
		public VariableScopeClauseContext variableScopeClause() {
			return getRuleContext(VariableScopeClauseContext.class,0);
		}
		public InlineProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineProcedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInlineProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInlineProcedureCall(this);
		}
	}

	public final InlineProcedureCallContext inlineProcedureCall() throws RecognitionException {
		InlineProcedureCallContext _localctx = new InlineProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_inlineProcedureCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1994);
				variableScopeClause();
				}
			}

			setState(1997);
			nestedProcedureSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableScopeClauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public BindingVariableReferenceListContext bindingVariableReferenceList() {
			return getRuleContext(BindingVariableReferenceListContext.class,0);
		}
		public VariableScopeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableScopeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterVariableScopeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitVariableScopeClause(this);
		}
	}

	public final VariableScopeClauseContext variableScopeClause() throws RecognitionException {
		VariableScopeClauseContext _localctx = new VariableScopeClauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_variableScopeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1999);
			match(LEFT_PAREN);
			setState(2001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(2000);
				bindingVariableReferenceList();
				}
			}

			setState(2003);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableReferenceListContext extends ParserRuleContext {
		public List<BindingVariableReferenceContext> bindingVariableReference() {
			return getRuleContexts(BindingVariableReferenceContext.class);
		}
		public BindingVariableReferenceContext bindingVariableReference(int i) {
			return getRuleContext(BindingVariableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public BindingVariableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableReferenceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingVariableReferenceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingVariableReferenceList(this);
		}
	}

	public final BindingVariableReferenceListContext bindingVariableReferenceList() throws RecognitionException {
		BindingVariableReferenceListContext _localctx = new BindingVariableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_bindingVariableReferenceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2005);
			bindingVariableReference();
			setState(2010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2006);
				match(COMMA);
				setState(2007);
				bindingVariableReference();
				}
				}
				setState(2012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedProcedureCallContext extends ParserRuleContext {
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public ProcedureArgumentListContext procedureArgumentList() {
			return getRuleContext(ProcedureArgumentListContext.class,0);
		}
		public YieldClauseContext yieldClause() {
			return getRuleContext(YieldClauseContext.class,0);
		}
		public NamedProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedProcedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNamedProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNamedProcedureCall(this);
		}
	}

	public final NamedProcedureCallContext namedProcedureCall() throws RecognitionException {
		NamedProcedureCallContext _localctx = new NamedProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_namedProcedureCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2013);
			procedureReference();
			setState(2014);
			match(LEFT_PAREN);
			setState(2016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8762849302180528028L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 309341980913L) != 0 || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -8011702113698201677L) != 0 || (((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 26393111092643L) != 0 || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 1688849860263935L) != 0 || (((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 151L) != 0) {
				{
				setState(2015);
				procedureArgumentList();
				}
			}

			setState(2018);
			match(RIGHT_PAREN);
			setState(2020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==YIELD) {
				{
				setState(2019);
				yieldClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureArgumentListContext extends ParserRuleContext {
		public List<ProcedureArgumentContext> procedureArgument() {
			return getRuleContexts(ProcedureArgumentContext.class);
		}
		public ProcedureArgumentContext procedureArgument(int i) {
			return getRuleContext(ProcedureArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public ProcedureArgumentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureArgumentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureArgumentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureArgumentList(this);
		}
	}

	public final ProcedureArgumentListContext procedureArgumentList() throws RecognitionException {
		ProcedureArgumentListContext _localctx = new ProcedureArgumentListContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_procedureArgumentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2022);
			procedureArgument();
			setState(2027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2023);
				match(COMMA);
				setState(2024);
				procedureArgument();
				}
				}
				setState(2029);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureArgumentContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureArgument(this);
		}
	}

	public final ProcedureArgumentContext procedureArgument() throws RecognitionException {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_procedureArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2030);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtSchemaClauseContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(GQL_20240412Parser.AT, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public AtSchemaClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atSchemaClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAtSchemaClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAtSchemaClause(this);
		}
	}

	public final AtSchemaClauseContext atSchemaClause() throws RecognitionException {
		AtSchemaClauseContext _localctx = new AtSchemaClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_atSchemaClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2032);
			match(AT);
			setState(2033);
			schemaReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UseGraphClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(GQL_20240412Parser.USE, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public UseGraphClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useGraphClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUseGraphClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUseGraphClause(this);
		}
	}

	public final UseGraphClauseContext useGraphClause() throws RecognitionException {
		UseGraphClauseContext _localctx = new UseGraphClauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_useGraphClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(USE);
			setState(2036);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternBindingTableContext extends ParserRuleContext {
		public GraphPatternContext graphPattern() {
			return getRuleContext(GraphPatternContext.class,0);
		}
		public GraphPatternYieldClauseContext graphPatternYieldClause() {
			return getRuleContext(GraphPatternYieldClauseContext.class,0);
		}
		public GraphPatternBindingTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternBindingTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternBindingTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternBindingTable(this);
		}
	}

	public final GraphPatternBindingTableContext graphPatternBindingTable() throws RecognitionException {
		GraphPatternBindingTableContext _localctx = new GraphPatternBindingTableContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_graphPatternBindingTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2038);
			graphPattern();
			setState(2040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(2039);
				graphPatternYieldClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldClauseContext extends ParserRuleContext {
		public TerminalNode YIELD() { return getToken(GQL_20240412Parser.YIELD, 0); }
		public GraphPatternYieldItemListContext graphPatternYieldItemList() {
			return getRuleContext(GraphPatternYieldItemListContext.class,0);
		}
		public GraphPatternYieldClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternYieldClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternYieldClause(this);
		}
	}

	public final GraphPatternYieldClauseContext graphPatternYieldClause() throws RecognitionException {
		GraphPatternYieldClauseContext _localctx = new GraphPatternYieldClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_graphPatternYieldClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2042);
			match(YIELD);
			setState(2043);
			graphPatternYieldItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldItemListContext extends ParserRuleContext {
		public List<GraphPatternYieldItemContext> graphPatternYieldItem() {
			return getRuleContexts(GraphPatternYieldItemContext.class);
		}
		public GraphPatternYieldItemContext graphPatternYieldItem(int i) {
			return getRuleContext(GraphPatternYieldItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public TerminalNode NO() { return getToken(GQL_20240412Parser.NO, 0); }
		public TerminalNode BINDINGS() { return getToken(GQL_20240412Parser.BINDINGS, 0); }
		public GraphPatternYieldItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternYieldItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternYieldItemList(this);
		}
	}

	public final GraphPatternYieldItemListContext graphPatternYieldItemList() throws RecognitionException {
		GraphPatternYieldItemListContext _localctx = new GraphPatternYieldItemListContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_graphPatternYieldItemList);
		try {
			int _alt;
			setState(2055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2045);
				graphPatternYieldItem();
				setState(2050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2046);
						match(COMMA);
						setState(2047);
						graphPatternYieldItem();
						}
						} 
					}
					setState(2052);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2053);
				match(NO);
				setState(2054);
				match(BINDINGS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public GraphPatternYieldItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternYieldItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternYieldItem(this);
		}
	}

	public final GraphPatternYieldItemContext graphPatternYieldItem() throws RecognitionException {
		GraphPatternYieldItemContext _localctx = new GraphPatternYieldItemContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_graphPatternYieldItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternContext extends ParserRuleContext {
		public PathPatternListContext pathPatternList() {
			return getRuleContext(PathPatternListContext.class,0);
		}
		public MatchModeContext matchMode() {
			return getRuleContext(MatchModeContext.class,0);
		}
		public KeepClauseContext keepClause() {
			return getRuleContext(KeepClauseContext.class,0);
		}
		public GraphPatternWhereClauseContext graphPatternWhereClause() {
			return getRuleContext(GraphPatternWhereClauseContext.class,0);
		}
		public GraphPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPattern(this);
		}
	}

	public final GraphPatternContext graphPattern() throws RecognitionException {
		GraphPatternContext _localctx = new GraphPatternContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_graphPattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(2059);
				matchMode();
				}
				break;
			}
			setState(2062);
			pathPatternList();
			setState(2064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(2063);
				keepClause();
				}
				break;
			}
			setState(2067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(2066);
				graphPatternWhereClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchModeContext extends ParserRuleContext {
		public RepeatableElementsMatchModeContext repeatableElementsMatchMode() {
			return getRuleContext(RepeatableElementsMatchModeContext.class,0);
		}
		public DifferentEdgesMatchModeContext differentEdgesMatchMode() {
			return getRuleContext(DifferentEdgesMatchModeContext.class,0);
		}
		public MatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMatchMode(this);
		}
	}

	public final MatchModeContext matchMode() throws RecognitionException {
		MatchModeContext _localctx = new MatchModeContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_matchMode);
		try {
			setState(2071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2069);
				repeatableElementsMatchMode();
				}
				break;
			case DIFFERENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2070);
				differentEdgesMatchMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatableElementsMatchModeContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GQL_20240412Parser.REPEATABLE, 0); }
		public ElementBindingsOrElementsContext elementBindingsOrElements() {
			return getRuleContext(ElementBindingsOrElementsContext.class,0);
		}
		public RepeatableElementsMatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableElementsMatchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRepeatableElementsMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRepeatableElementsMatchMode(this);
		}
	}

	public final RepeatableElementsMatchModeContext repeatableElementsMatchMode() throws RecognitionException {
		RepeatableElementsMatchModeContext _localctx = new RepeatableElementsMatchModeContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_repeatableElementsMatchMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(REPEATABLE);
			setState(2074);
			elementBindingsOrElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DifferentEdgesMatchModeContext extends ParserRuleContext {
		public TerminalNode DIFFERENT() { return getToken(GQL_20240412Parser.DIFFERENT, 0); }
		public EdgeBindingsOrEdgesContext edgeBindingsOrEdges() {
			return getRuleContext(EdgeBindingsOrEdgesContext.class,0);
		}
		public DifferentEdgesMatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_differentEdgesMatchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDifferentEdgesMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDifferentEdgesMatchMode(this);
		}
	}

	public final DifferentEdgesMatchModeContext differentEdgesMatchMode() throws RecognitionException {
		DifferentEdgesMatchModeContext _localctx = new DifferentEdgesMatchModeContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_differentEdgesMatchMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			match(DIFFERENT);
			setState(2077);
			edgeBindingsOrEdges();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementBindingsOrElementsContext extends ParserRuleContext {
		public TerminalNode ELEMENT() { return getToken(GQL_20240412Parser.ELEMENT, 0); }
		public TerminalNode BINDINGS() { return getToken(GQL_20240412Parser.BINDINGS, 0); }
		public TerminalNode ELEMENTS() { return getToken(GQL_20240412Parser.ELEMENTS, 0); }
		public ElementBindingsOrElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementBindingsOrElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementBindingsOrElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementBindingsOrElements(this);
		}
	}

	public final ElementBindingsOrElementsContext elementBindingsOrElements() throws RecognitionException {
		ElementBindingsOrElementsContext _localctx = new ElementBindingsOrElementsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_elementBindingsOrElements);
		try {
			setState(2084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELEMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2079);
				match(ELEMENT);
				setState(2081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(2080);
					match(BINDINGS);
					}
					break;
				}
				}
				break;
			case ELEMENTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2083);
				match(ELEMENTS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeBindingsOrEdgesContext extends ParserRuleContext {
		public EdgeSynonymContext edgeSynonym() {
			return getRuleContext(EdgeSynonymContext.class,0);
		}
		public TerminalNode BINDINGS() { return getToken(GQL_20240412Parser.BINDINGS, 0); }
		public EdgesSynonymContext edgesSynonym() {
			return getRuleContext(EdgesSynonymContext.class,0);
		}
		public EdgeBindingsOrEdgesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeBindingsOrEdges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeBindingsOrEdges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeBindingsOrEdges(this);
		}
	}

	public final EdgeBindingsOrEdgesContext edgeBindingsOrEdges() throws RecognitionException {
		EdgeBindingsOrEdgesContext _localctx = new EdgeBindingsOrEdgesContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_edgeBindingsOrEdges);
		try {
			setState(2091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EDGE:
			case RELATIONSHIP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2086);
				edgeSynonym();
				setState(2088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(2087);
					match(BINDINGS);
					}
					break;
				}
				}
				break;
			case EDGES:
			case RELATIONSHIPS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2090);
				edgesSynonym();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternListContext extends ParserRuleContext {
		public List<PathPatternContext> pathPattern() {
			return getRuleContexts(PathPatternContext.class);
		}
		public PathPatternContext pathPattern(int i) {
			return getRuleContext(PathPatternContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public PathPatternListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathPatternList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathPatternList(this);
		}
	}

	public final PathPatternListContext pathPatternList() throws RecognitionException {
		PathPatternListContext _localctx = new PathPatternListContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_pathPatternList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2093);
			pathPattern();
			setState(2098);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2094);
					match(COMMA);
					setState(2095);
					pathPattern();
					}
					} 
				}
				setState(2100);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternContext extends ParserRuleContext {
		public PathPatternExpressionContext pathPatternExpression() {
			return getRuleContext(PathPatternExpressionContext.class,0);
		}
		public PathVariableDeclarationContext pathVariableDeclaration() {
			return getRuleContext(PathVariableDeclarationContext.class,0);
		}
		public PathPatternPrefixContext pathPatternPrefix() {
			return getRuleContext(PathPatternPrefixContext.class,0);
		}
		public PathPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathPattern(this);
		}
	}

	public final PathPatternContext pathPattern() throws RecognitionException {
		PathPatternContext _localctx = new PathPatternContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_pathPattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(2101);
				pathVariableDeclaration();
				}
				break;
			}
			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==ANY || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 18167711662081L) != 0) {
				{
				setState(2104);
				pathPatternPrefix();
				}
			}

			setState(2107);
			pathPatternExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableDeclarationContext extends ParserRuleContext {
		public PathVariableContext pathVariable() {
			return getRuleContext(PathVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public PathVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathVariableDeclaration(this);
		}
	}

	public final PathVariableDeclarationContext pathVariableDeclaration() throws RecognitionException {
		PathVariableDeclarationContext _localctx = new PathVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_pathVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			pathVariable();
			setState(2110);
			match(EQUALS_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeepClauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(GQL_20240412Parser.KEEP, 0); }
		public PathPatternPrefixContext pathPatternPrefix() {
			return getRuleContext(PathPatternPrefixContext.class,0);
		}
		public KeepClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keepClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterKeepClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitKeepClause(this);
		}
	}

	public final KeepClauseContext keepClause() throws RecognitionException {
		KeepClauseContext _localctx = new KeepClauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_keepClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			match(KEEP);
			setState(2113);
			pathPatternPrefix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQL_20240412Parser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public GraphPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternWhereClause(this);
		}
	}

	public final GraphPatternWhereClauseContext graphPatternWhereClause() throws RecognitionException {
		GraphPatternWhereClauseContext _localctx = new GraphPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_graphPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2115);
			match(WHERE);
			setState(2116);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertGraphPatternContext extends ParserRuleContext {
		public InsertPathPatternListContext insertPathPatternList() {
			return getRuleContext(InsertPathPatternListContext.class,0);
		}
		public InsertGraphPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertGraphPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertGraphPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertGraphPattern(this);
		}
	}

	public final InsertGraphPatternContext insertGraphPattern() throws RecognitionException {
		InsertGraphPatternContext _localctx = new InsertGraphPatternContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_insertGraphPattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2118);
			insertPathPatternList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertPathPatternListContext extends ParserRuleContext {
		public List<InsertPathPatternContext> insertPathPattern() {
			return getRuleContexts(InsertPathPatternContext.class);
		}
		public InsertPathPatternContext insertPathPattern(int i) {
			return getRuleContext(InsertPathPatternContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public InsertPathPatternListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertPathPatternList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertPathPatternList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertPathPatternList(this);
		}
	}

	public final InsertPathPatternListContext insertPathPatternList() throws RecognitionException {
		InsertPathPatternListContext _localctx = new InsertPathPatternListContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_insertPathPatternList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2120);
			insertPathPattern();
			setState(2125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2121);
				match(COMMA);
				setState(2122);
				insertPathPattern();
				}
				}
				setState(2127);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertPathPatternContext extends ParserRuleContext {
		public List<InsertNodePatternContext> insertNodePattern() {
			return getRuleContexts(InsertNodePatternContext.class);
		}
		public InsertNodePatternContext insertNodePattern(int i) {
			return getRuleContext(InsertNodePatternContext.class,i);
		}
		public List<InsertEdgePatternContext> insertEdgePattern() {
			return getRuleContexts(InsertEdgePatternContext.class);
		}
		public InsertEdgePatternContext insertEdgePattern(int i) {
			return getRuleContext(InsertEdgePatternContext.class,i);
		}
		public InsertPathPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertPathPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertPathPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertPathPattern(this);
		}
	}

	public final InsertPathPatternContext insertPathPattern() throws RecognitionException {
		InsertPathPatternContext _localctx = new InsertPathPatternContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_insertPathPattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128);
			insertNodePattern();
			setState(2134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & 131137L) != 0) {
				{
				{
				setState(2129);
				insertEdgePattern();
				setState(2130);
				insertNodePattern();
				}
				}
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertNodePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertNodePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertNodePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertNodePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertNodePattern(this);
		}
	}

	public final InsertNodePatternContext insertNodePattern() throws RecognitionException {
		InsertNodePatternContext _localctx = new InsertNodePatternContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_insertNodePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2137);
			match(LEFT_PAREN);
			setState(2139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0 || _la==COLON || _la==LEFT_BRACE) {
				{
				setState(2138);
				insertElementPatternFiller();
				}
			}

			setState(2141);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePatternContext extends ParserRuleContext {
		public InsertEdgePointingLeftContext insertEdgePointingLeft() {
			return getRuleContext(InsertEdgePointingLeftContext.class,0);
		}
		public InsertEdgePointingRightContext insertEdgePointingRight() {
			return getRuleContext(InsertEdgePointingRightContext.class,0);
		}
		public InsertEdgeUndirectedContext insertEdgeUndirected() {
			return getRuleContext(InsertEdgeUndirectedContext.class,0);
		}
		public InsertEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertEdgePattern(this);
		}
	}

	public final InsertEdgePatternContext insertEdgePattern() throws RecognitionException {
		InsertEdgePatternContext _localctx = new InsertEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_insertEdgePattern);
		try {
			setState(2146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_ARROW_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2143);
				insertEdgePointingLeft();
				}
				break;
			case MINUS_LEFT_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2144);
				insertEdgePointingRight();
				}
				break;
			case TILDE_LEFT_BRACKET:
				enterOuterAlt(_localctx, 3);
				{
				setState(2145);
				insertEdgeUndirected();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ARROW_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET_MINUS() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_MINUS, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertEdgePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertEdgePointingLeft(this);
		}
	}

	public final InsertEdgePointingLeftContext insertEdgePointingLeft() throws RecognitionException {
		InsertEdgePointingLeftContext _localctx = new InsertEdgePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_insertEdgePointingLeft);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			match(LEFT_ARROW_BRACKET);
			setState(2150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0 || _la==COLON || _la==LEFT_BRACE) {
				{
				setState(2149);
				insertElementPatternFiller();
				}
			}

			setState(2152);
			match(RIGHT_BRACKET_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_LEFT_BRACKET() { return getToken(GQL_20240412Parser.MINUS_LEFT_BRACKET, 0); }
		public TerminalNode BRACKET_RIGHT_ARROW() { return getToken(GQL_20240412Parser.BRACKET_RIGHT_ARROW, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertEdgePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertEdgePointingRight(this);
		}
	}

	public final InsertEdgePointingRightContext insertEdgePointingRight() throws RecognitionException {
		InsertEdgePointingRightContext _localctx = new InsertEdgePointingRightContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_insertEdgePointingRight);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			match(MINUS_LEFT_BRACKET);
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0 || _la==COLON || _la==LEFT_BRACE) {
				{
				setState(2155);
				insertElementPatternFiller();
				}
			}

			setState(2158);
			match(BRACKET_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgeUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE_LEFT_BRACKET() { return getToken(GQL_20240412Parser.TILDE_LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET_TILDE() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_TILDE, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertEdgeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertEdgeUndirected(this);
		}
	}

	public final InsertEdgeUndirectedContext insertEdgeUndirected() throws RecognitionException {
		InsertEdgeUndirectedContext _localctx = new InsertEdgeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_insertEdgeUndirected);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2160);
			match(TILDE_LEFT_BRACKET);
			setState(2162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0 || _la==COLON || _la==LEFT_BRACE) {
				{
				setState(2161);
				insertElementPatternFiller();
				}
			}

			setState(2164);
			match(RIGHT_BRACKET_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertElementPatternFillerContext extends ParserRuleContext {
		public ElementVariableDeclarationContext elementVariableDeclaration() {
			return getRuleContext(ElementVariableDeclarationContext.class,0);
		}
		public LabelAndPropertySetSpecificationContext labelAndPropertySetSpecification() {
			return getRuleContext(LabelAndPropertySetSpecificationContext.class,0);
		}
		public InsertElementPatternFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertElementPatternFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterInsertElementPatternFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitInsertElementPatternFiller(this);
		}
	}

	public final InsertElementPatternFillerContext insertElementPatternFiller() throws RecognitionException {
		InsertElementPatternFillerContext _localctx = new InsertElementPatternFillerContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_insertElementPatternFiller);
		int _la;
		try {
			setState(2174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2166);
				elementVariableDeclaration();
				setState(2168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS || _la==COLON || _la==LEFT_BRACE) {
					{
					setState(2167);
					labelAndPropertySetSpecification();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
					{
					setState(2170);
					elementVariableDeclaration();
					}
				}

				setState(2173);
				labelAndPropertySetSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelAndPropertySetSpecificationContext extends ParserRuleContext {
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelSetSpecificationContext labelSetSpecification() {
			return getRuleContext(LabelSetSpecificationContext.class,0);
		}
		public ElementPropertySpecificationContext elementPropertySpecification() {
			return getRuleContext(ElementPropertySpecificationContext.class,0);
		}
		public LabelAndPropertySetSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelAndPropertySetSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelAndPropertySetSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelAndPropertySetSpecification(this);
		}
	}

	public final LabelAndPropertySetSpecificationContext labelAndPropertySetSpecification() throws RecognitionException {
		LabelAndPropertySetSpecificationContext _localctx = new LabelAndPropertySetSpecificationContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_labelAndPropertySetSpecification);
		int _la;
		try {
			setState(2187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2176);
				isOrColon();
				setState(2177);
				labelSetSpecification();
				setState(2179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE) {
					{
					setState(2178);
					elementPropertySpecification();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS || _la==COLON) {
					{
					setState(2181);
					isOrColon();
					setState(2182);
					labelSetSpecification();
					}
				}

				setState(2186);
				elementPropertySpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternPrefixContext extends ParserRuleContext {
		public PathModePrefixContext pathModePrefix() {
			return getRuleContext(PathModePrefixContext.class,0);
		}
		public PathSearchPrefixContext pathSearchPrefix() {
			return getRuleContext(PathSearchPrefixContext.class,0);
		}
		public PathPatternPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathPatternPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathPatternPrefix(this);
		}
	}

	public final PathPatternPrefixContext pathPatternPrefix() throws RecognitionException {
		PathPatternPrefixContext _localctx = new PathPatternPrefixContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_pathPatternPrefix);
		try {
			setState(2191);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case SIMPLE:
			case TRAIL:
			case WALK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2189);
				pathModePrefix();
				}
				break;
			case ALL:
			case ANY:
			case SHORTEST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2190);
				pathSearchPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathModePrefixContext extends ParserRuleContext {
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public PathModePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathModePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathModePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathModePrefix(this);
		}
	}

	public final PathModePrefixContext pathModePrefix() throws RecognitionException {
		PathModePrefixContext _localctx = new PathModePrefixContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_pathModePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2193);
			pathMode();
			setState(2195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(2194);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathModeContext extends ParserRuleContext {
		public TerminalNode WALK() { return getToken(GQL_20240412Parser.WALK, 0); }
		public TerminalNode TRAIL() { return getToken(GQL_20240412Parser.TRAIL, 0); }
		public TerminalNode SIMPLE() { return getToken(GQL_20240412Parser.SIMPLE, 0); }
		public TerminalNode ACYCLIC() { return getToken(GQL_20240412Parser.ACYCLIC, 0); }
		public PathModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathMode(this);
		}
	}

	public final PathModeContext pathMode() throws RecognitionException {
		PathModeContext _localctx = new PathModeContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_pathMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2197);
			_la = _input.LA(1);
			if ( !((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 18159121727489L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathSearchPrefixContext extends ParserRuleContext {
		public AllPathSearchContext allPathSearch() {
			return getRuleContext(AllPathSearchContext.class,0);
		}
		public AnyPathSearchContext anyPathSearch() {
			return getRuleContext(AnyPathSearchContext.class,0);
		}
		public ShortestPathSearchContext shortestPathSearch() {
			return getRuleContext(ShortestPathSearchContext.class,0);
		}
		public PathSearchPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathSearchPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathSearchPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathSearchPrefix(this);
		}
	}

	public final PathSearchPrefixContext pathSearchPrefix() throws RecognitionException {
		PathSearchPrefixContext _localctx = new PathSearchPrefixContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_pathSearchPrefix);
		try {
			setState(2202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2199);
				allPathSearch();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2200);
				anyPathSearch();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2201);
				shortestPathSearch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllPathSearchContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GQL_20240412Parser.ALL, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AllPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAllPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAllPathSearch(this);
		}
	}

	public final AllPathSearchContext allPathSearch() throws RecognitionException {
		AllPathSearchContext _localctx = new AllPathSearchContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_allPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204);
			match(ALL);
			setState(2206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2205);
				pathMode();
				}
				break;
			}
			setState(2209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2208);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathOrPathsContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQL_20240412Parser.PATH, 0); }
		public TerminalNode PATHS() { return getToken(GQL_20240412Parser.PATHS, 0); }
		public PathOrPathsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathOrPaths; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathOrPaths(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathOrPaths(this);
		}
	}

	public final PathOrPathsContext pathOrPaths() throws RecognitionException {
		PathOrPathsContext _localctx = new PathOrPathsContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_pathOrPaths);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			_la = _input.LA(1);
			if ( !(_la==PATH || _la==PATHS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyPathSearchContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public NumberOfPathsContext numberOfPaths() {
			return getRuleContext(NumberOfPathsContext.class,0);
		}
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AnyPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAnyPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAnyPathSearch(this);
		}
	}

	public final AnyPathSearchContext anyPathSearch() throws RecognitionException {
		AnyPathSearchContext _localctx = new AnyPathSearchContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_anyPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2213);
			match(ANY);
			setState(2215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(2214);
				numberOfPaths();
				}
				break;
			}
			setState(2218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2217);
				pathMode();
				}
				break;
			}
			setState(2221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2220);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberOfPathsContext extends ParserRuleContext {
		public NonNegativeIntegerSpecificationContext nonNegativeIntegerSpecification() {
			return getRuleContext(NonNegativeIntegerSpecificationContext.class,0);
		}
		public NumberOfPathsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberOfPaths; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumberOfPaths(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumberOfPaths(this);
		}
	}

	public final NumberOfPathsContext numberOfPaths() throws RecognitionException {
		NumberOfPathsContext _localctx = new NumberOfPathsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_numberOfPaths);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2223);
			nonNegativeIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShortestPathSearchContext extends ParserRuleContext {
		public AllShortestPathSearchContext allShortestPathSearch() {
			return getRuleContext(AllShortestPathSearchContext.class,0);
		}
		public AnyShortestPathSearchContext anyShortestPathSearch() {
			return getRuleContext(AnyShortestPathSearchContext.class,0);
		}
		public CountedShortestPathSearchContext countedShortestPathSearch() {
			return getRuleContext(CountedShortestPathSearchContext.class,0);
		}
		public CountedShortestGroupSearchContext countedShortestGroupSearch() {
			return getRuleContext(CountedShortestGroupSearchContext.class,0);
		}
		public ShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitShortestPathSearch(this);
		}
	}

	public final ShortestPathSearchContext shortestPathSearch() throws RecognitionException {
		ShortestPathSearchContext _localctx = new ShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_shortestPathSearch);
		try {
			setState(2229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2225);
				allShortestPathSearch();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2226);
				anyShortestPathSearch();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2227);
				countedShortestPathSearch();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2228);
				countedShortestGroupSearch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GQL_20240412Parser.ALL, 0); }
		public TerminalNode SHORTEST() { return getToken(GQL_20240412Parser.SHORTEST, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AllShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAllShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAllShortestPathSearch(this);
		}
	}

	public final AllShortestPathSearchContext allShortestPathSearch() throws RecognitionException {
		AllShortestPathSearchContext _localctx = new AllShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_allShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2231);
			match(ALL);
			setState(2232);
			match(SHORTEST);
			setState(2234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2233);
				pathMode();
				}
				break;
			}
			setState(2237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2236);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public TerminalNode SHORTEST() { return getToken(GQL_20240412Parser.SHORTEST, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AnyShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAnyShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAnyShortestPathSearch(this);
		}
	}

	public final AnyShortestPathSearchContext anyShortestPathSearch() throws RecognitionException {
		AnyShortestPathSearchContext _localctx = new AnyShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_anyShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			match(ANY);
			setState(2240);
			match(SHORTEST);
			setState(2242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2241);
				pathMode();
				}
				break;
			}
			setState(2245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(2244);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CountedShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode SHORTEST() { return getToken(GQL_20240412Parser.SHORTEST, 0); }
		public NumberOfPathsContext numberOfPaths() {
			return getRuleContext(NumberOfPathsContext.class,0);
		}
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public CountedShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countedShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCountedShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCountedShortestPathSearch(this);
		}
	}

	public final CountedShortestPathSearchContext countedShortestPathSearch() throws RecognitionException {
		CountedShortestPathSearchContext _localctx = new CountedShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_countedShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			match(SHORTEST);
			setState(2248);
			numberOfPaths();
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(2249);
				pathMode();
				}
				break;
			}
			setState(2253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2252);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CountedShortestGroupSearchContext extends ParserRuleContext {
		public TerminalNode SHORTEST() { return getToken(GQL_20240412Parser.SHORTEST, 0); }
		public TerminalNode GROUP() { return getToken(GQL_20240412Parser.GROUP, 0); }
		public TerminalNode GROUPS() { return getToken(GQL_20240412Parser.GROUPS, 0); }
		public NumberOfGroupsContext numberOfGroups() {
			return getRuleContext(NumberOfGroupsContext.class,0);
		}
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public CountedShortestGroupSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countedShortestGroupSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCountedShortestGroupSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCountedShortestGroupSearch(this);
		}
	}

	public final CountedShortestGroupSearchContext countedShortestGroupSearch() throws RecognitionException {
		CountedShortestGroupSearchContext _localctx = new CountedShortestGroupSearchContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_countedShortestGroupSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(SHORTEST);
			setState(2257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0 || _la==GENERAL_PARAMETER_REFERENCE) {
				{
				setState(2256);
				numberOfGroups();
				}
			}

			setState(2260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 18159121727489L) != 0) {
				{
				setState(2259);
				pathMode();
				}
			}

			setState(2263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATH || _la==PATHS) {
				{
				setState(2262);
				pathOrPaths();
				}
			}

			setState(2265);
			_la = _input.LA(1);
			if ( !(_la==GROUP || _la==GROUPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberOfGroupsContext extends ParserRuleContext {
		public NonNegativeIntegerSpecificationContext nonNegativeIntegerSpecification() {
			return getRuleContext(NonNegativeIntegerSpecificationContext.class,0);
		}
		public NumberOfGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberOfGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumberOfGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumberOfGroups(this);
		}
	}

	public final NumberOfGroupsContext numberOfGroups() throws RecognitionException {
		NumberOfGroupsContext _localctx = new NumberOfGroupsContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_numberOfGroups);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			nonNegativeIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternExpressionContext extends ParserRuleContext {
		public PathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternExpression; }
	 
		public PathPatternExpressionContext() { }
		public void copyFrom(PathPatternExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpePatternUnionContext extends PathPatternExpressionContext {
		public List<PathTermContext> pathTerm() {
			return getRuleContexts(PathTermContext.class);
		}
		public PathTermContext pathTerm(int i) {
			return getRuleContext(PathTermContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQL_20240412Parser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQL_20240412Parser.VERTICAL_BAR, i);
		}
		public PpePatternUnionContext(PathPatternExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpePatternUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpePatternUnion(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpePathTermContext extends PathPatternExpressionContext {
		public PathTermContext pathTerm() {
			return getRuleContext(PathTermContext.class,0);
		}
		public PpePathTermContext(PathPatternExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpePathTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpePathTerm(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpeMultisetAlternationContext extends PathPatternExpressionContext {
		public List<PathTermContext> pathTerm() {
			return getRuleContexts(PathTermContext.class);
		}
		public PathTermContext pathTerm(int i) {
			return getRuleContext(PathTermContext.class,i);
		}
		public List<TerminalNode> MULTISET_ALTERNATION_OPERATOR() { return getTokens(GQL_20240412Parser.MULTISET_ALTERNATION_OPERATOR); }
		public TerminalNode MULTISET_ALTERNATION_OPERATOR(int i) {
			return getToken(GQL_20240412Parser.MULTISET_ALTERNATION_OPERATOR, i);
		}
		public PpeMultisetAlternationContext(PathPatternExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpeMultisetAlternation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpeMultisetAlternation(this);
		}
	}

	public final PathPatternExpressionContext pathPatternExpression() throws RecognitionException {
		PathPatternExpressionContext _localctx = new PathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_pathPatternExpression);
		try {
			int _alt;
			setState(2284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				_localctx = new PpePathTermContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2269);
				pathTerm();
				}
				break;
			case 2:
				_localctx = new PpeMultisetAlternationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2270);
				pathTerm();
				setState(2273); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2271);
						match(MULTISET_ALTERNATION_OPERATOR);
						setState(2272);
						pathTerm();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2275); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				_localctx = new PpePatternUnionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2277);
				pathTerm();
				setState(2280); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2278);
						match(VERTICAL_BAR);
						setState(2279);
						pathTerm();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2282); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,191,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathTermContext extends ParserRuleContext {
		public List<PathFactorContext> pathFactor() {
			return getRuleContexts(PathFactorContext.class);
		}
		public PathFactorContext pathFactor(int i) {
			return getRuleContext(PathFactorContext.class,i);
		}
		public PathTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathTerm(this);
		}
	}

	public final PathTermContext pathTerm() throws RecognitionException {
		PathTermContext _localctx = new PathTermContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_pathTerm);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2287); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2286);
					pathFactor();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2289); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,193,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathFactorContext extends ParserRuleContext {
		public PathFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathFactor; }
	 
		public PathFactorContext() { }
		public void copyFrom(PathFactorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PfQuantifiedPathPrimaryContext extends PathFactorContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public GraphPatternQuantifierContext graphPatternQuantifier() {
			return getRuleContext(GraphPatternQuantifierContext.class,0);
		}
		public PfQuantifiedPathPrimaryContext(PathFactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPfQuantifiedPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPfQuantifiedPathPrimary(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PfQuestionedPathPrimaryContext extends PathFactorContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public TerminalNode QUESTION_MARK() { return getToken(GQL_20240412Parser.QUESTION_MARK, 0); }
		public PfQuestionedPathPrimaryContext(PathFactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPfQuestionedPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPfQuestionedPathPrimary(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PfPathPrimaryContext extends PathFactorContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public PfPathPrimaryContext(PathFactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPfPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPfPathPrimary(this);
		}
	}

	public final PathFactorContext pathFactor() throws RecognitionException {
		PathFactorContext _localctx = new PathFactorContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_pathFactor);
		try {
			setState(2298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				_localctx = new PfPathPrimaryContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2291);
				pathPrimary();
				}
				break;
			case 2:
				_localctx = new PfQuantifiedPathPrimaryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2292);
				pathPrimary();
				setState(2293);
				graphPatternQuantifier();
				}
				break;
			case 3:
				_localctx = new PfQuestionedPathPrimaryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2295);
				pathPrimary();
				setState(2296);
				match(QUESTION_MARK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPrimaryContext extends ParserRuleContext {
		public PathPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPrimary; }
	 
		public PathPrimaryContext() { }
		public void copyFrom(PathPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpParenthesizedPathPatternExpressionContext extends PathPrimaryContext {
		public ParenthesizedPathPatternExpressionContext parenthesizedPathPatternExpression() {
			return getRuleContext(ParenthesizedPathPatternExpressionContext.class,0);
		}
		public PpParenthesizedPathPatternExpressionContext(PathPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpParenthesizedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpParenthesizedPathPatternExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpElementPatternContext extends PathPrimaryContext {
		public ElementPatternContext elementPattern() {
			return getRuleContext(ElementPatternContext.class,0);
		}
		public PpElementPatternContext(PathPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpElementPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpElementPattern(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PpSimplifiedPathPatternExpressionContext extends PathPrimaryContext {
		public SimplifiedPathPatternExpressionContext simplifiedPathPatternExpression() {
			return getRuleContext(SimplifiedPathPatternExpressionContext.class,0);
		}
		public PpSimplifiedPathPatternExpressionContext(PathPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPpSimplifiedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPpSimplifiedPathPatternExpression(this);
		}
	}

	public final PathPrimaryContext pathPrimary() throws RecognitionException {
		PathPrimaryContext _localctx = new PathPrimaryContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_pathPrimary);
		try {
			setState(2303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				_localctx = new PpElementPatternContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2300);
				elementPattern();
				}
				break;
			case 2:
				_localctx = new PpParenthesizedPathPatternExpressionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2301);
				parenthesizedPathPatternExpression();
				}
				break;
			case 3:
				_localctx = new PpSimplifiedPathPatternExpressionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2302);
				simplifiedPathPatternExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternContext extends ParserRuleContext {
		public NodePatternContext nodePattern() {
			return getRuleContext(NodePatternContext.class,0);
		}
		public EdgePatternContext edgePattern() {
			return getRuleContext(EdgePatternContext.class,0);
		}
		public ElementPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementPattern(this);
		}
	}

	public final ElementPatternContext elementPattern() throws RecognitionException {
		ElementPatternContext _localctx = new ElementPatternContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_elementPattern);
		try {
			setState(2307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2305);
				nodePattern();
				}
				break;
			case LEFT_ARROW:
			case LEFT_ARROW_TILDE:
			case LEFT_ARROW_BRACKET:
			case LEFT_ARROW_TILDE_BRACKET:
			case LEFT_MINUS_RIGHT:
			case MINUS_LEFT_BRACKET:
			case RIGHT_ARROW:
			case TILDE_LEFT_BRACKET:
			case TILDE_RIGHT_ARROW:
			case MINUS_SIGN:
			case TILDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2306);
				edgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NodePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodePattern(this);
		}
	}

	public final NodePatternContext nodePattern() throws RecognitionException {
		NodePatternContext _localctx = new NodePatternContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_nodePattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2309);
			match(LEFT_PAREN);
			setState(2310);
			elementPatternFiller();
			setState(2311);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternFillerContext extends ParserRuleContext {
		public ElementVariableDeclarationContext elementVariableDeclaration() {
			return getRuleContext(ElementVariableDeclarationContext.class,0);
		}
		public IsLabelExpressionContext isLabelExpression() {
			return getRuleContext(IsLabelExpressionContext.class,0);
		}
		public ElementPatternPredicateContext elementPatternPredicate() {
			return getRuleContext(ElementPatternPredicateContext.class,0);
		}
		public ElementPatternFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementPatternFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementPatternFiller(this);
		}
	}

	public final ElementPatternFillerContext elementPatternFiller() throws RecognitionException {
		ElementPatternFillerContext _localctx = new ElementPatternFillerContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_elementPatternFiller);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(2313);
				elementVariableDeclaration();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==COLON) {
				{
				setState(2316);
				isLabelExpression();
				}
			}

			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE || _la==LEFT_BRACE) {
				{
				setState(2319);
				elementPatternPredicate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableDeclarationContext extends ParserRuleContext {
		public ElementVariableContext elementVariable() {
			return getRuleContext(ElementVariableContext.class,0);
		}
		public TerminalNode TEMP() { return getToken(GQL_20240412Parser.TEMP, 0); }
		public ElementVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementVariableDeclaration(this);
		}
	}

	public final ElementVariableDeclarationContext elementVariableDeclaration() throws RecognitionException {
		ElementVariableDeclarationContext _localctx = new ElementVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_elementVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				setState(2322);
				match(TEMP);
				}
				break;
			}
			setState(2325);
			elementVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsLabelExpressionContext extends ParserRuleContext {
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public IsLabelExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isLabelExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIsLabelExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIsLabelExpression(this);
		}
	}

	public final IsLabelExpressionContext isLabelExpression() throws RecognitionException {
		IsLabelExpressionContext _localctx = new IsLabelExpressionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_isLabelExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2327);
			isOrColon();
			setState(2328);
			labelExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsOrColonContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode COLON() { return getToken(GQL_20240412Parser.COLON, 0); }
		public IsOrColonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isOrColon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIsOrColon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIsOrColon(this);
		}
	}

	public final IsOrColonContext isOrColon() throws RecognitionException {
		IsOrColonContext _localctx = new IsOrColonContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_isOrColon);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			_la = _input.LA(1);
			if ( !(_la==IS || _la==COLON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternPredicateContext extends ParserRuleContext {
		public ElementPatternWhereClauseContext elementPatternWhereClause() {
			return getRuleContext(ElementPatternWhereClauseContext.class,0);
		}
		public ElementPropertySpecificationContext elementPropertySpecification() {
			return getRuleContext(ElementPropertySpecificationContext.class,0);
		}
		public ElementPatternPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementPatternPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementPatternPredicate(this);
		}
	}

	public final ElementPatternPredicateContext elementPatternPredicate() throws RecognitionException {
		ElementPatternPredicateContext _localctx = new ElementPatternPredicateContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_elementPatternPredicate);
		try {
			setState(2334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2332);
				elementPatternWhereClause();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2333);
				elementPropertySpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQL_20240412Parser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public ElementPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementPatternWhereClause(this);
		}
	}

	public final ElementPatternWhereClauseContext elementPatternWhereClause() throws RecognitionException {
		ElementPatternWhereClauseContext _localctx = new ElementPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_elementPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2336);
			match(WHERE);
			setState(2337);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPropertySpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public PropertyKeyValuePairListContext propertyKeyValuePairList() {
			return getRuleContext(PropertyKeyValuePairListContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public ElementPropertySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPropertySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementPropertySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementPropertySpecification(this);
		}
	}

	public final ElementPropertySpecificationContext elementPropertySpecification() throws RecognitionException {
		ElementPropertySpecificationContext _localctx = new ElementPropertySpecificationContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_elementPropertySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			match(LEFT_BRACE);
			setState(2340);
			propertyKeyValuePairList();
			setState(2341);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyValuePairListContext extends ParserRuleContext {
		public List<PropertyKeyValuePairContext> propertyKeyValuePair() {
			return getRuleContexts(PropertyKeyValuePairContext.class);
		}
		public PropertyKeyValuePairContext propertyKeyValuePair(int i) {
			return getRuleContext(PropertyKeyValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public PropertyKeyValuePairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKeyValuePairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyKeyValuePairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyKeyValuePairList(this);
		}
	}

	public final PropertyKeyValuePairListContext propertyKeyValuePairList() throws RecognitionException {
		PropertyKeyValuePairListContext _localctx = new PropertyKeyValuePairListContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_propertyKeyValuePairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			propertyKeyValuePair();
			setState(2348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2344);
				match(COMMA);
				setState(2345);
				propertyKeyValuePair();
				}
				}
				setState(2350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyValuePairContext extends ParserRuleContext {
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode COLON() { return getToken(GQL_20240412Parser.COLON, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PropertyKeyValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKeyValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyKeyValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyKeyValuePair(this);
		}
	}

	public final PropertyKeyValuePairContext propertyKeyValuePair() throws RecognitionException {
		PropertyKeyValuePairContext _localctx = new PropertyKeyValuePairContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_propertyKeyValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			propertyName();
			setState(2352);
			match(COLON);
			setState(2353);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgePatternContext extends ParserRuleContext {
		public FullEdgePatternContext fullEdgePattern() {
			return getRuleContext(FullEdgePatternContext.class,0);
		}
		public AbbreviatedEdgePatternContext abbreviatedEdgePattern() {
			return getRuleContext(AbbreviatedEdgePatternContext.class,0);
		}
		public EdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgePattern(this);
		}
	}

	public final EdgePatternContext edgePattern() throws RecognitionException {
		EdgePatternContext _localctx = new EdgePatternContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_edgePattern);
		try {
			setState(2357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_ARROW_BRACKET:
			case LEFT_ARROW_TILDE_BRACKET:
			case MINUS_LEFT_BRACKET:
			case TILDE_LEFT_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2355);
				fullEdgePattern();
				}
				break;
			case LEFT_ARROW:
			case LEFT_ARROW_TILDE:
			case LEFT_MINUS_RIGHT:
			case RIGHT_ARROW:
			case TILDE_RIGHT_ARROW:
			case MINUS_SIGN:
			case TILDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2356);
				abbreviatedEdgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePatternContext extends ParserRuleContext {
		public FullEdgePointingLeftContext fullEdgePointingLeft() {
			return getRuleContext(FullEdgePointingLeftContext.class,0);
		}
		public FullEdgeUndirectedContext fullEdgeUndirected() {
			return getRuleContext(FullEdgeUndirectedContext.class,0);
		}
		public FullEdgePointingRightContext fullEdgePointingRight() {
			return getRuleContext(FullEdgePointingRightContext.class,0);
		}
		public FullEdgeLeftOrUndirectedContext fullEdgeLeftOrUndirected() {
			return getRuleContext(FullEdgeLeftOrUndirectedContext.class,0);
		}
		public FullEdgeUndirectedOrRightContext fullEdgeUndirectedOrRight() {
			return getRuleContext(FullEdgeUndirectedOrRightContext.class,0);
		}
		public FullEdgeLeftOrRightContext fullEdgeLeftOrRight() {
			return getRuleContext(FullEdgeLeftOrRightContext.class,0);
		}
		public FullEdgeAnyDirectionContext fullEdgeAnyDirection() {
			return getRuleContext(FullEdgeAnyDirectionContext.class,0);
		}
		public FullEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgePattern(this);
		}
	}

	public final FullEdgePatternContext fullEdgePattern() throws RecognitionException {
		FullEdgePatternContext _localctx = new FullEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_fullEdgePattern);
		try {
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2359);
				fullEdgePointingLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2360);
				fullEdgeUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2361);
				fullEdgePointingRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2362);
				fullEdgeLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2363);
				fullEdgeUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2364);
				fullEdgeLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2365);
				fullEdgeAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ARROW_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_MINUS() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_MINUS, 0); }
		public FullEdgePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgePointingLeft(this);
		}
	}

	public final FullEdgePointingLeftContext fullEdgePointingLeft() throws RecognitionException {
		FullEdgePointingLeftContext _localctx = new FullEdgePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_fullEdgePointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(LEFT_ARROW_BRACKET);
			setState(2369);
			elementPatternFiller();
			setState(2370);
			match(RIGHT_BRACKET_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE_LEFT_BRACKET() { return getToken(GQL_20240412Parser.TILDE_LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_TILDE() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_TILDE, 0); }
		public FullEdgeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgeUndirected(this);
		}
	}

	public final FullEdgeUndirectedContext fullEdgeUndirected() throws RecognitionException {
		FullEdgeUndirectedContext _localctx = new FullEdgeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_fullEdgeUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(TILDE_LEFT_BRACKET);
			setState(2373);
			elementPatternFiller();
			setState(2374);
			match(RIGHT_BRACKET_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_LEFT_BRACKET() { return getToken(GQL_20240412Parser.MINUS_LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode BRACKET_RIGHT_ARROW() { return getToken(GQL_20240412Parser.BRACKET_RIGHT_ARROW, 0); }
		public FullEdgePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgePointingRight(this);
		}
	}

	public final FullEdgePointingRightContext fullEdgePointingRight() throws RecognitionException {
		FullEdgePointingRightContext _localctx = new FullEdgePointingRightContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_fullEdgePointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			match(MINUS_LEFT_BRACKET);
			setState(2377);
			elementPatternFiller();
			setState(2378);
			match(BRACKET_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_TILDE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ARROW_TILDE_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_TILDE() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_TILDE, 0); }
		public FullEdgeLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgeLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgeLeftOrUndirected(this);
		}
	}

	public final FullEdgeLeftOrUndirectedContext fullEdgeLeftOrUndirected() throws RecognitionException {
		FullEdgeLeftOrUndirectedContext _localctx = new FullEdgeLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_fullEdgeLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			match(LEFT_ARROW_TILDE_BRACKET);
			setState(2381);
			elementPatternFiller();
			setState(2382);
			match(RIGHT_BRACKET_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE_LEFT_BRACKET() { return getToken(GQL_20240412Parser.TILDE_LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode BRACKET_TILDE_RIGHT_ARROW() { return getToken(GQL_20240412Parser.BRACKET_TILDE_RIGHT_ARROW, 0); }
		public FullEdgeUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgeUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgeUndirectedOrRight(this);
		}
	}

	public final FullEdgeUndirectedOrRightContext fullEdgeUndirectedOrRight() throws RecognitionException {
		FullEdgeUndirectedOrRightContext _localctx = new FullEdgeUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_fullEdgeUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			match(TILDE_LEFT_BRACKET);
			setState(2385);
			elementPatternFiller();
			setState(2386);
			match(BRACKET_TILDE_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ARROW_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode BRACKET_RIGHT_ARROW() { return getToken(GQL_20240412Parser.BRACKET_RIGHT_ARROW, 0); }
		public FullEdgeLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgeLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgeLeftOrRight(this);
		}
	}

	public final FullEdgeLeftOrRightContext fullEdgeLeftOrRight() throws RecognitionException {
		FullEdgeLeftOrRightContext _localctx = new FullEdgeLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_fullEdgeLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2388);
			match(LEFT_ARROW_BRACKET);
			setState(2389);
			elementPatternFiller();
			setState(2390);
			match(BRACKET_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeAnyDirectionContext extends ParserRuleContext {
		public TerminalNode MINUS_LEFT_BRACKET() { return getToken(GQL_20240412Parser.MINUS_LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_MINUS() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_MINUS, 0); }
		public FullEdgeAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFullEdgeAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFullEdgeAnyDirection(this);
		}
	}

	public final FullEdgeAnyDirectionContext fullEdgeAnyDirection() throws RecognitionException {
		FullEdgeAnyDirectionContext _localctx = new FullEdgeAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_fullEdgeAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			match(MINUS_LEFT_BRACKET);
			setState(2393);
			elementPatternFiller();
			setState(2394);
			match(RIGHT_BRACKET_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW() { return getToken(GQL_20240412Parser.LEFT_ARROW, 0); }
		public TerminalNode TILDE() { return getToken(GQL_20240412Parser.TILDE, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQL_20240412Parser.RIGHT_ARROW, 0); }
		public TerminalNode LEFT_ARROW_TILDE() { return getToken(GQL_20240412Parser.LEFT_ARROW_TILDE, 0); }
		public TerminalNode TILDE_RIGHT_ARROW() { return getToken(GQL_20240412Parser.TILDE_RIGHT_ARROW, 0); }
		public TerminalNode LEFT_MINUS_RIGHT() { return getToken(GQL_20240412Parser.LEFT_MINUS_RIGHT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQL_20240412Parser.MINUS_SIGN, 0); }
		public AbbreviatedEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAbbreviatedEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAbbreviatedEdgePattern(this);
		}
	}

	public final AbbreviatedEdgePatternContext abbreviatedEdgePattern() throws RecognitionException {
		AbbreviatedEdgePatternContext _localctx = new AbbreviatedEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_abbreviatedEdgePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2396);
			_la = _input.LA(1);
			if ( !((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & 281612416714771L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedPathPatternExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PathPatternExpressionContext pathPatternExpression() {
			return getRuleContext(PathPatternExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public SubpathVariableDeclarationContext subpathVariableDeclaration() {
			return getRuleContext(SubpathVariableDeclarationContext.class,0);
		}
		public PathModePrefixContext pathModePrefix() {
			return getRuleContext(PathModePrefixContext.class,0);
		}
		public ParenthesizedPathPatternWhereClauseContext parenthesizedPathPatternWhereClause() {
			return getRuleContext(ParenthesizedPathPatternWhereClauseContext.class,0);
		}
		public ParenthesizedPathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedPathPatternExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterParenthesizedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitParenthesizedPathPatternExpression(this);
		}
	}

	public final ParenthesizedPathPatternExpressionContext parenthesizedPathPatternExpression() throws RecognitionException {
		ParenthesizedPathPatternExpressionContext _localctx = new ParenthesizedPathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_parenthesizedPathPatternExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			match(LEFT_PAREN);
			setState(2400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2399);
				subpathVariableDeclaration();
				}
				break;
			}
			setState(2403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 18159121727489L) != 0) {
				{
				setState(2402);
				pathModePrefix();
				}
			}

			setState(2405);
			pathPatternExpression();
			setState(2407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2406);
				parenthesizedPathPatternWhereClause();
				}
			}

			setState(2409);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpathVariableDeclarationContext extends ParserRuleContext {
		public SubpathVariableContext subpathVariable() {
			return getRuleContext(SubpathVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public SubpathVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpathVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSubpathVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSubpathVariableDeclaration(this);
		}
	}

	public final SubpathVariableDeclarationContext subpathVariableDeclaration() throws RecognitionException {
		SubpathVariableDeclarationContext _localctx = new SubpathVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_subpathVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			subpathVariable();
			setState(2412);
			match(EQUALS_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedPathPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQL_20240412Parser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public ParenthesizedPathPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedPathPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterParenthesizedPathPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitParenthesizedPathPatternWhereClause(this);
		}
	}

	public final ParenthesizedPathPatternWhereClauseContext parenthesizedPathPatternWhereClause() throws RecognitionException {
		ParenthesizedPathPatternWhereClauseContext _localctx = new ParenthesizedPathPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_parenthesizedPathPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			match(WHERE);
			setState(2415);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionContext extends ParserRuleContext {
		public LabelExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelExpression; }
	 
		public LabelExpressionContext() { }
		public void copyFrom(LabelExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionNegationContext extends LabelExpressionContext {
		public TerminalNode EXCLAMATION_MARK() { return getToken(GQL_20240412Parser.EXCLAMATION_MARK, 0); }
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public LabelExpressionNegationContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionNegation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionNegation(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionDisjunctionContext extends LabelExpressionContext {
		public List<LabelExpressionContext> labelExpression() {
			return getRuleContexts(LabelExpressionContext.class);
		}
		public LabelExpressionContext labelExpression(int i) {
			return getRuleContext(LabelExpressionContext.class,i);
		}
		public TerminalNode VERTICAL_BAR() { return getToken(GQL_20240412Parser.VERTICAL_BAR, 0); }
		public LabelExpressionDisjunctionContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionDisjunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionDisjunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionParenthesizedContext extends LabelExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public LabelExpressionParenthesizedContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionParenthesized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionParenthesized(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionWildcardContext extends LabelExpressionContext {
		public TerminalNode PERCENT() { return getToken(GQL_20240412Parser.PERCENT, 0); }
		public LabelExpressionWildcardContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionWildcard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionWildcard(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionConjunctionContext extends LabelExpressionContext {
		public List<LabelExpressionContext> labelExpression() {
			return getRuleContexts(LabelExpressionContext.class);
		}
		public LabelExpressionContext labelExpression(int i) {
			return getRuleContext(LabelExpressionContext.class,i);
		}
		public TerminalNode AMPERSAND() { return getToken(GQL_20240412Parser.AMPERSAND, 0); }
		public LabelExpressionConjunctionContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionConjunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionConjunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionNameContext extends LabelExpressionContext {
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public LabelExpressionNameContext(LabelExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelExpressionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelExpressionName(this);
		}
	}

	public final LabelExpressionContext labelExpression() throws RecognitionException {
		return labelExpression(0);
	}

	private LabelExpressionContext labelExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		LabelExpressionContext _localctx = new LabelExpressionContext(_ctx, _parentState);
		LabelExpressionContext _prevctx = _localctx;
		int _startState = 426;
		enterRecursionRule(_localctx, 426, RULE_labelExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCLAMATION_MARK:
				{
				_localctx = new LabelExpressionNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(2418);
				match(EXCLAMATION_MARK);
				setState(2419);
				labelExpression(6);
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				{
				_localctx = new LabelExpressionNameContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2420);
				labelName();
				}
				break;
			case PERCENT:
				{
				_localctx = new LabelExpressionWildcardContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2421);
				match(PERCENT);
				}
				break;
			case LEFT_PAREN:
				{
				_localctx = new LabelExpressionParenthesizedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(2422);
				match(LEFT_PAREN);
				setState(2423);
				labelExpression(0);
				setState(2424);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2436);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2434);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
					case 1:
						{
						_localctx = new LabelExpressionConjunctionContext(new LabelExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_labelExpression);
						setState(2428);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2429);
						match(AMPERSAND);
						setState(2430);
						labelExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new LabelExpressionDisjunctionContext(new LabelExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_labelExpression);
						setState(2431);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2432);
						match(VERTICAL_BAR);
						setState(2433);
						labelExpression(5);
						}
						break;
					}
					} 
				}
				setState(2438);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,210,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableReferenceContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public PathVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathVariableReference(this);
		}
	}

	public final PathVariableReferenceContext pathVariableReference() throws RecognitionException {
		PathVariableReferenceContext _localctx = new PathVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_pathVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2439);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableReferenceContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public ElementVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementVariableReference(this);
		}
	}

	public final ElementVariableReferenceContext elementVariableReference() throws RecognitionException {
		ElementVariableReferenceContext _localctx = new ElementVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_elementVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternQuantifierContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(GQL_20240412Parser.PLUS_SIGN, 0); }
		public FixedQuantifierContext fixedQuantifier() {
			return getRuleContext(FixedQuantifierContext.class,0);
		}
		public GeneralQuantifierContext generalQuantifier() {
			return getRuleContext(GeneralQuantifierContext.class,0);
		}
		public GraphPatternQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphPatternQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphPatternQuantifier(this);
		}
	}

	public final GraphPatternQuantifierContext graphPatternQuantifier() throws RecognitionException {
		GraphPatternQuantifierContext _localctx = new GraphPatternQuantifierContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_graphPatternQuantifier);
		try {
			setState(2447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2443);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2444);
				match(PLUS_SIGN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2445);
				fixedQuantifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2446);
				generalQuantifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FixedQuantifierContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public FixedQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixedQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFixedQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFixedQuantifier(this);
		}
	}

	public final FixedQuantifierContext fixedQuantifier() throws RecognitionException {
		FixedQuantifierContext _localctx = new FixedQuantifierContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_fixedQuantifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			match(LEFT_BRACE);
			setState(2450);
			unsignedInteger();
			setState(2451);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralQuantifierContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public LowerBoundContext lowerBound() {
			return getRuleContext(LowerBoundContext.class,0);
		}
		public UpperBoundContext upperBound() {
			return getRuleContext(UpperBoundContext.class,0);
		}
		public GeneralQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralQuantifier(this);
		}
	}

	public final GeneralQuantifierContext generalQuantifier() throws RecognitionException {
		GeneralQuantifierContext _localctx = new GeneralQuantifierContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_generalQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(LEFT_BRACE);
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0) {
				{
				setState(2454);
				lowerBound();
				}
			}

			setState(2457);
			match(COMMA);
			setState(2459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0) {
				{
				setState(2458);
				upperBound();
				}
			}

			setState(2461);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LowerBoundContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lowerBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLowerBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLowerBound(this);
		}
	}

	public final LowerBoundContext lowerBound() throws RecognitionException {
		LowerBoundContext _localctx = new LowerBoundContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_lowerBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpperBoundContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upperBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUpperBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUpperBound(this);
		}
	}

	public final UpperBoundContext upperBound() throws RecognitionException {
		UpperBoundContext _localctx = new UpperBoundContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_upperBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2465);
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPathPatternExpressionContext extends ParserRuleContext {
		public SimplifiedDefaultingLeftContext simplifiedDefaultingLeft() {
			return getRuleContext(SimplifiedDefaultingLeftContext.class,0);
		}
		public SimplifiedDefaultingUndirectedContext simplifiedDefaultingUndirected() {
			return getRuleContext(SimplifiedDefaultingUndirectedContext.class,0);
		}
		public SimplifiedDefaultingRightContext simplifiedDefaultingRight() {
			return getRuleContext(SimplifiedDefaultingRightContext.class,0);
		}
		public SimplifiedDefaultingLeftOrUndirectedContext simplifiedDefaultingLeftOrUndirected() {
			return getRuleContext(SimplifiedDefaultingLeftOrUndirectedContext.class,0);
		}
		public SimplifiedDefaultingUndirectedOrRightContext simplifiedDefaultingUndirectedOrRight() {
			return getRuleContext(SimplifiedDefaultingUndirectedOrRightContext.class,0);
		}
		public SimplifiedDefaultingLeftOrRightContext simplifiedDefaultingLeftOrRight() {
			return getRuleContext(SimplifiedDefaultingLeftOrRightContext.class,0);
		}
		public SimplifiedDefaultingAnyDirectionContext simplifiedDefaultingAnyDirection() {
			return getRuleContext(SimplifiedDefaultingAnyDirectionContext.class,0);
		}
		public SimplifiedPathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPathPatternExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedPathPatternExpression(this);
		}
	}

	public final SimplifiedPathPatternExpressionContext simplifiedPathPatternExpression() throws RecognitionException {
		SimplifiedPathPatternExpressionContext _localctx = new SimplifiedPathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_simplifiedPathPatternExpression);
		try {
			setState(2474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2467);
				simplifiedDefaultingLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2468);
				simplifiedDefaultingUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2469);
				simplifiedDefaultingRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2470);
				simplifiedDefaultingLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2471);
				simplifiedDefaultingUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2472);
				simplifiedDefaultingLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2473);
				simplifiedDefaultingAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_MINUS_SLASH() { return getToken(GQL_20240412Parser.LEFT_MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS() { return getToken(GQL_20240412Parser.SLASH_MINUS, 0); }
		public SimplifiedDefaultingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingLeft(this);
		}
	}

	public final SimplifiedDefaultingLeftContext simplifiedDefaultingLeft() throws RecognitionException {
		SimplifiedDefaultingLeftContext _localctx = new SimplifiedDefaultingLeftContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_simplifiedDefaultingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(LEFT_MINUS_SLASH);
			setState(2477);
			simplifiedContents();
			setState(2478);
			match(SLASH_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE_SLASH() { return getToken(GQL_20240412Parser.TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_TILDE() { return getToken(GQL_20240412Parser.SLASH_TILDE, 0); }
		public SimplifiedDefaultingUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingUndirected(this);
		}
	}

	public final SimplifiedDefaultingUndirectedContext simplifiedDefaultingUndirected() throws RecognitionException {
		SimplifiedDefaultingUndirectedContext _localctx = new SimplifiedDefaultingUndirectedContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_simplifiedDefaultingUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2480);
			match(TILDE_SLASH);
			setState(2481);
			simplifiedContents();
			setState(2482);
			match(SLASH_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_SLASH() { return getToken(GQL_20240412Parser.MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS_RIGHT() { return getToken(GQL_20240412Parser.SLASH_MINUS_RIGHT, 0); }
		public SimplifiedDefaultingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingRight(this);
		}
	}

	public final SimplifiedDefaultingRightContext simplifiedDefaultingRight() throws RecognitionException {
		SimplifiedDefaultingRightContext _localctx = new SimplifiedDefaultingRightContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_simplifiedDefaultingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2484);
			match(MINUS_SLASH);
			setState(2485);
			simplifiedContents();
			setState(2486);
			match(SLASH_MINUS_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_TILDE_SLASH() { return getToken(GQL_20240412Parser.LEFT_TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_TILDE() { return getToken(GQL_20240412Parser.SLASH_TILDE, 0); }
		public SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	public final SimplifiedDefaultingLeftOrUndirectedContext simplifiedDefaultingLeftOrUndirected() throws RecognitionException {
		SimplifiedDefaultingLeftOrUndirectedContext _localctx = new SimplifiedDefaultingLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_simplifiedDefaultingLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			match(LEFT_TILDE_SLASH);
			setState(2489);
			simplifiedContents();
			setState(2490);
			match(SLASH_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE_SLASH() { return getToken(GQL_20240412Parser.TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_TILDE_RIGHT() { return getToken(GQL_20240412Parser.SLASH_TILDE_RIGHT, 0); }
		public SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	public final SimplifiedDefaultingUndirectedOrRightContext simplifiedDefaultingUndirectedOrRight() throws RecognitionException {
		SimplifiedDefaultingUndirectedOrRightContext _localctx = new SimplifiedDefaultingUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_simplifiedDefaultingUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			match(TILDE_SLASH);
			setState(2493);
			simplifiedContents();
			setState(2494);
			match(SLASH_TILDE_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_MINUS_SLASH() { return getToken(GQL_20240412Parser.LEFT_MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS_RIGHT() { return getToken(GQL_20240412Parser.SLASH_MINUS_RIGHT, 0); }
		public SimplifiedDefaultingLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingLeftOrRight(this);
		}
	}

	public final SimplifiedDefaultingLeftOrRightContext simplifiedDefaultingLeftOrRight() throws RecognitionException {
		SimplifiedDefaultingLeftOrRightContext _localctx = new SimplifiedDefaultingLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_simplifiedDefaultingLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2496);
			match(LEFT_MINUS_SLASH);
			setState(2497);
			simplifiedContents();
			setState(2498);
			match(SLASH_MINUS_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingAnyDirectionContext extends ParserRuleContext {
		public TerminalNode MINUS_SLASH() { return getToken(GQL_20240412Parser.MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS() { return getToken(GQL_20240412Parser.SLASH_MINUS, 0); }
		public SimplifiedDefaultingAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDefaultingAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDefaultingAnyDirection(this);
		}
	}

	public final SimplifiedDefaultingAnyDirectionContext simplifiedDefaultingAnyDirection() throws RecognitionException {
		SimplifiedDefaultingAnyDirectionContext _localctx = new SimplifiedDefaultingAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_simplifiedDefaultingAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			match(MINUS_SLASH);
			setState(2501);
			simplifiedContents();
			setState(2502);
			match(SLASH_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedContentsContext extends ParserRuleContext {
		public SimplifiedTermContext simplifiedTerm() {
			return getRuleContext(SimplifiedTermContext.class,0);
		}
		public SimplifiedPathUnionContext simplifiedPathUnion() {
			return getRuleContext(SimplifiedPathUnionContext.class,0);
		}
		public SimplifiedMultisetAlternationContext simplifiedMultisetAlternation() {
			return getRuleContext(SimplifiedMultisetAlternationContext.class,0);
		}
		public SimplifiedContentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedContents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedContents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedContents(this);
		}
	}

	public final SimplifiedContentsContext simplifiedContents() throws RecognitionException {
		SimplifiedContentsContext _localctx = new SimplifiedContentsContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_simplifiedContents);
		try {
			setState(2507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2504);
				simplifiedTerm(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2505);
				simplifiedPathUnion();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2506);
				simplifiedMultisetAlternation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPathUnionContext extends ParserRuleContext {
		public List<SimplifiedTermContext> simplifiedTerm() {
			return getRuleContexts(SimplifiedTermContext.class);
		}
		public SimplifiedTermContext simplifiedTerm(int i) {
			return getRuleContext(SimplifiedTermContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQL_20240412Parser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQL_20240412Parser.VERTICAL_BAR, i);
		}
		public SimplifiedPathUnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPathUnion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedPathUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedPathUnion(this);
		}
	}

	public final SimplifiedPathUnionContext simplifiedPathUnion() throws RecognitionException {
		SimplifiedPathUnionContext _localctx = new SimplifiedPathUnionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_simplifiedPathUnion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			simplifiedTerm(0);
			setState(2510);
			match(VERTICAL_BAR);
			setState(2511);
			simplifiedTerm(0);
			setState(2516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==VERTICAL_BAR) {
				{
				{
				setState(2512);
				match(VERTICAL_BAR);
				setState(2513);
				simplifiedTerm(0);
				}
				}
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedMultisetAlternationContext extends ParserRuleContext {
		public List<SimplifiedTermContext> simplifiedTerm() {
			return getRuleContexts(SimplifiedTermContext.class);
		}
		public SimplifiedTermContext simplifiedTerm(int i) {
			return getRuleContext(SimplifiedTermContext.class,i);
		}
		public List<TerminalNode> MULTISET_ALTERNATION_OPERATOR() { return getTokens(GQL_20240412Parser.MULTISET_ALTERNATION_OPERATOR); }
		public TerminalNode MULTISET_ALTERNATION_OPERATOR(int i) {
			return getToken(GQL_20240412Parser.MULTISET_ALTERNATION_OPERATOR, i);
		}
		public SimplifiedMultisetAlternationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedMultisetAlternation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedMultisetAlternation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedMultisetAlternation(this);
		}
	}

	public final SimplifiedMultisetAlternationContext simplifiedMultisetAlternation() throws RecognitionException {
		SimplifiedMultisetAlternationContext _localctx = new SimplifiedMultisetAlternationContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_simplifiedMultisetAlternation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2519);
			simplifiedTerm(0);
			setState(2520);
			match(MULTISET_ALTERNATION_OPERATOR);
			setState(2521);
			simplifiedTerm(0);
			setState(2526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==MULTISET_ALTERNATION_OPERATOR) {
				{
				{
				setState(2522);
				match(MULTISET_ALTERNATION_OPERATOR);
				setState(2523);
				simplifiedTerm(0);
				}
				}
				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedTermContext extends ParserRuleContext {
		public SimplifiedTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedTerm; }
	 
		public SimplifiedTermContext() { }
		public void copyFrom(SimplifiedTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorLowLabelContext extends SimplifiedTermContext {
		public SimplifiedFactorLowContext simplifiedFactorLow() {
			return getRuleContext(SimplifiedFactorLowContext.class,0);
		}
		public SimplifiedFactorLowLabelContext(SimplifiedTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedFactorLowLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedFactorLowLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedConcatenationLabelContext extends SimplifiedTermContext {
		public SimplifiedTermContext simplifiedTerm() {
			return getRuleContext(SimplifiedTermContext.class,0);
		}
		public SimplifiedFactorLowContext simplifiedFactorLow() {
			return getRuleContext(SimplifiedFactorLowContext.class,0);
		}
		public SimplifiedConcatenationLabelContext(SimplifiedTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedConcatenationLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedConcatenationLabel(this);
		}
	}

	public final SimplifiedTermContext simplifiedTerm() throws RecognitionException {
		return simplifiedTerm(0);
	}

	private SimplifiedTermContext simplifiedTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimplifiedTermContext _localctx = new SimplifiedTermContext(_ctx, _parentState);
		SimplifiedTermContext _prevctx = _localctx;
		int _startState = 464;
		enterRecursionRule(_localctx, 464, RULE_simplifiedTerm, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimplifiedFactorLowLabelContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2530);
			simplifiedFactorLow(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2536);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SimplifiedConcatenationLabelContext(new SimplifiedTermContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_simplifiedTerm);
					setState(2532);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2533);
					simplifiedFactorLow(0);
					}
					} 
				}
				setState(2538);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorLowContext extends ParserRuleContext {
		public SimplifiedFactorLowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedFactorLow; }
	 
		public SimplifiedFactorLowContext() { }
		public void copyFrom(SimplifiedFactorLowContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedConjunctionLabelContext extends SimplifiedFactorLowContext {
		public SimplifiedFactorLowContext simplifiedFactorLow() {
			return getRuleContext(SimplifiedFactorLowContext.class,0);
		}
		public TerminalNode AMPERSAND() { return getToken(GQL_20240412Parser.AMPERSAND, 0); }
		public SimplifiedFactorHighContext simplifiedFactorHigh() {
			return getRuleContext(SimplifiedFactorHighContext.class,0);
		}
		public SimplifiedConjunctionLabelContext(SimplifiedFactorLowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedConjunctionLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedConjunctionLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorHighLabelContext extends SimplifiedFactorLowContext {
		public SimplifiedFactorHighContext simplifiedFactorHigh() {
			return getRuleContext(SimplifiedFactorHighContext.class,0);
		}
		public SimplifiedFactorHighLabelContext(SimplifiedFactorLowContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedFactorHighLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedFactorHighLabel(this);
		}
	}

	public final SimplifiedFactorLowContext simplifiedFactorLow() throws RecognitionException {
		return simplifiedFactorLow(0);
	}

	private SimplifiedFactorLowContext simplifiedFactorLow(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimplifiedFactorLowContext _localctx = new SimplifiedFactorLowContext(_ctx, _parentState);
		SimplifiedFactorLowContext _prevctx = _localctx;
		int _startState = 466;
		enterRecursionRule(_localctx, 466, RULE_simplifiedFactorLow, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimplifiedFactorHighLabelContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2540);
			simplifiedFactorHigh();
			}
			_ctx.stop = _input.LT(-1);
			setState(2547);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SimplifiedConjunctionLabelContext(new SimplifiedFactorLowContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_simplifiedFactorLow);
					setState(2542);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2543);
					match(AMPERSAND);
					setState(2544);
					simplifiedFactorHigh();
					}
					} 
				}
				setState(2549);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorHighContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public SimplifiedQuantifiedContext simplifiedQuantified() {
			return getRuleContext(SimplifiedQuantifiedContext.class,0);
		}
		public SimplifiedQuestionedContext simplifiedQuestioned() {
			return getRuleContext(SimplifiedQuestionedContext.class,0);
		}
		public SimplifiedFactorHighContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedFactorHigh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedFactorHigh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedFactorHigh(this);
		}
	}

	public final SimplifiedFactorHighContext simplifiedFactorHigh() throws RecognitionException {
		SimplifiedFactorHighContext _localctx = new SimplifiedFactorHighContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_simplifiedFactorHigh);
		try {
			setState(2553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2550);
				simplifiedTertiary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2551);
				simplifiedQuantified();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2552);
				simplifiedQuestioned();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedQuantifiedContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public GraphPatternQuantifierContext graphPatternQuantifier() {
			return getRuleContext(GraphPatternQuantifierContext.class,0);
		}
		public SimplifiedQuantifiedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedQuantified; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedQuantified(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedQuantified(this);
		}
	}

	public final SimplifiedQuantifiedContext simplifiedQuantified() throws RecognitionException {
		SimplifiedQuantifiedContext _localctx = new SimplifiedQuantifiedContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_simplifiedQuantified);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2555);
			simplifiedTertiary();
			setState(2556);
			graphPatternQuantifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedQuestionedContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public TerminalNode QUESTION_MARK() { return getToken(GQL_20240412Parser.QUESTION_MARK, 0); }
		public SimplifiedQuestionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedQuestioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedQuestioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedQuestioned(this);
		}
	}

	public final SimplifiedQuestionedContext simplifiedQuestioned() throws RecognitionException {
		SimplifiedQuestionedContext _localctx = new SimplifiedQuestionedContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_simplifiedQuestioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			simplifiedTertiary();
			setState(2559);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedTertiaryContext extends ParserRuleContext {
		public SimplifiedDirectionOverrideContext simplifiedDirectionOverride() {
			return getRuleContext(SimplifiedDirectionOverrideContext.class,0);
		}
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedTertiaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedTertiary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedTertiary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedTertiary(this);
		}
	}

	public final SimplifiedTertiaryContext simplifiedTertiary() throws RecognitionException {
		SimplifiedTertiaryContext _localctx = new SimplifiedTertiaryContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_simplifiedTertiary);
		try {
			setState(2563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2561);
				simplifiedDirectionOverride();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2562);
				simplifiedSecondary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDirectionOverrideContext extends ParserRuleContext {
		public SimplifiedOverrideLeftContext simplifiedOverrideLeft() {
			return getRuleContext(SimplifiedOverrideLeftContext.class,0);
		}
		public SimplifiedOverrideUndirectedContext simplifiedOverrideUndirected() {
			return getRuleContext(SimplifiedOverrideUndirectedContext.class,0);
		}
		public SimplifiedOverrideRightContext simplifiedOverrideRight() {
			return getRuleContext(SimplifiedOverrideRightContext.class,0);
		}
		public SimplifiedOverrideLeftOrUndirectedContext simplifiedOverrideLeftOrUndirected() {
			return getRuleContext(SimplifiedOverrideLeftOrUndirectedContext.class,0);
		}
		public SimplifiedOverrideUndirectedOrRightContext simplifiedOverrideUndirectedOrRight() {
			return getRuleContext(SimplifiedOverrideUndirectedOrRightContext.class,0);
		}
		public SimplifiedOverrideLeftOrRightContext simplifiedOverrideLeftOrRight() {
			return getRuleContext(SimplifiedOverrideLeftOrRightContext.class,0);
		}
		public SimplifiedOverrideAnyDirectionContext simplifiedOverrideAnyDirection() {
			return getRuleContext(SimplifiedOverrideAnyDirectionContext.class,0);
		}
		public SimplifiedDirectionOverrideContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDirectionOverride; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedDirectionOverride(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedDirectionOverride(this);
		}
	}

	public final SimplifiedDirectionOverrideContext simplifiedDirectionOverride() throws RecognitionException {
		SimplifiedDirectionOverrideContext _localctx = new SimplifiedDirectionOverrideContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_simplifiedDirectionOverride);
		try {
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2565);
				simplifiedOverrideLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2566);
				simplifiedOverrideUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2567);
				simplifiedOverrideRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2568);
				simplifiedOverrideLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2569);
				simplifiedOverrideUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2570);
				simplifiedOverrideLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2571);
				simplifiedOverrideAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ANGLE_BRACKET, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideLeft(this);
		}
	}

	public final SimplifiedOverrideLeftContext simplifiedOverrideLeft() throws RecognitionException {
		SimplifiedOverrideLeftContext _localctx = new SimplifiedOverrideLeftContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_simplifiedOverrideLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(LEFT_ANGLE_BRACKET);
			setState(2575);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(GQL_20240412Parser.TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideUndirected(this);
		}
	}

	public final SimplifiedOverrideUndirectedContext simplifiedOverrideUndirected() throws RecognitionException {
		SimplifiedOverrideUndirectedContext _localctx = new SimplifiedOverrideUndirectedContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_simplifiedOverrideUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			match(TILDE);
			setState(2578);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideRightContext extends ParserRuleContext {
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideRight(this);
		}
	}

	public final SimplifiedOverrideRightContext simplifiedOverrideRight() throws RecognitionException {
		SimplifiedOverrideRightContext _localctx = new SimplifiedOverrideRightContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_simplifiedOverrideRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580);
			simplifiedSecondary();
			setState(2581);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_TILDE() { return getToken(GQL_20240412Parser.LEFT_ARROW_TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	public final SimplifiedOverrideLeftOrUndirectedContext simplifiedOverrideLeftOrUndirected() throws RecognitionException {
		SimplifiedOverrideLeftOrUndirectedContext _localctx = new SimplifiedOverrideLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_simplifiedOverrideLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			match(LEFT_ARROW_TILDE);
			setState(2584);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(GQL_20240412Parser.TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	public final SimplifiedOverrideUndirectedOrRightContext simplifiedOverrideUndirectedOrRight() throws RecognitionException {
		SimplifiedOverrideUndirectedOrRightContext _localctx = new SimplifiedOverrideUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_simplifiedOverrideUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(TILDE);
			setState(2587);
			simplifiedSecondary();
			setState(2588);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ANGLE_BRACKET, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideLeftOrRight(this);
		}
	}

	public final SimplifiedOverrideLeftOrRightContext simplifiedOverrideLeftOrRight() throws RecognitionException {
		SimplifiedOverrideLeftOrRightContext _localctx = new SimplifiedOverrideLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_simplifiedOverrideLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(LEFT_ANGLE_BRACKET);
			setState(2591);
			simplifiedSecondary();
			setState(2592);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideAnyDirectionContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQL_20240412Parser.MINUS_SIGN, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedOverrideAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedOverrideAnyDirection(this);
		}
	}

	public final SimplifiedOverrideAnyDirectionContext simplifiedOverrideAnyDirection() throws RecognitionException {
		SimplifiedOverrideAnyDirectionContext _localctx = new SimplifiedOverrideAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_simplifiedOverrideAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(MINUS_SIGN);
			setState(2595);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedSecondaryContext extends ParserRuleContext {
		public SimplifiedPrimaryContext simplifiedPrimary() {
			return getRuleContext(SimplifiedPrimaryContext.class,0);
		}
		public SimplifiedNegationContext simplifiedNegation() {
			return getRuleContext(SimplifiedNegationContext.class,0);
		}
		public SimplifiedSecondaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedSecondary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedSecondary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedSecondary(this);
		}
	}

	public final SimplifiedSecondaryContext simplifiedSecondary() throws RecognitionException {
		SimplifiedSecondaryContext _localctx = new SimplifiedSecondaryContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_simplifiedSecondary);
		try {
			setState(2599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2597);
				simplifiedPrimary();
				}
				break;
			case EXCLAMATION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2598);
				simplifiedNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedNegationContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_MARK() { return getToken(GQL_20240412Parser.EXCLAMATION_MARK, 0); }
		public SimplifiedPrimaryContext simplifiedPrimary() {
			return getRuleContext(SimplifiedPrimaryContext.class,0);
		}
		public SimplifiedNegationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedNegation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedNegation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedNegation(this);
		}
	}

	public final SimplifiedNegationContext simplifiedNegation() throws RecognitionException {
		SimplifiedNegationContext _localctx = new SimplifiedNegationContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_simplifiedNegation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2601);
			match(EXCLAMATION_MARK);
			setState(2602);
			simplifiedPrimary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPrimaryContext extends ParserRuleContext {
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public SimplifiedPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimplifiedPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimplifiedPrimary(this);
		}
	}

	public final SimplifiedPrimaryContext simplifiedPrimary() throws RecognitionException {
		SimplifiedPrimaryContext _localctx = new SimplifiedPrimaryContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_simplifiedPrimary);
		try {
			setState(2609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2604);
				labelName();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2605);
				match(LEFT_PAREN);
				setState(2606);
				simplifiedContents();
				setState(2607);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQL_20240412Parser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitWhereClause(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(WHERE);
			setState(2612);
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldClauseContext extends ParserRuleContext {
		public TerminalNode YIELD() { return getToken(GQL_20240412Parser.YIELD, 0); }
		public YieldItemListContext yieldItemList() {
			return getRuleContext(YieldItemListContext.class,0);
		}
		public YieldClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterYieldClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitYieldClause(this);
		}
	}

	public final YieldClauseContext yieldClause() throws RecognitionException {
		YieldClauseContext _localctx = new YieldClauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_yieldClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2614);
			match(YIELD);
			setState(2615);
			yieldItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemListContext extends ParserRuleContext {
		public List<YieldItemContext> yieldItem() {
			return getRuleContexts(YieldItemContext.class);
		}
		public YieldItemContext yieldItem(int i) {
			return getRuleContext(YieldItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public YieldItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterYieldItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitYieldItemList(this);
		}
	}

	public final YieldItemListContext yieldItemList() throws RecognitionException {
		YieldItemListContext _localctx = new YieldItemListContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_yieldItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2617);
			yieldItem();
			setState(2622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2618);
				match(COMMA);
				setState(2619);
				yieldItem();
				}
				}
				setState(2624);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemContext extends ParserRuleContext {
		public YieldItemNameContext yieldItemName() {
			return getRuleContext(YieldItemNameContext.class,0);
		}
		public YieldItemAliasContext yieldItemAlias() {
			return getRuleContext(YieldItemAliasContext.class,0);
		}
		public YieldItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterYieldItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitYieldItem(this);
		}
	}

	public final YieldItemContext yieldItem() throws RecognitionException {
		YieldItemContext _localctx = new YieldItemContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_yieldItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2625);
			yieldItemName();
			setState(2627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2626);
				yieldItemAlias();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemNameContext extends ParserRuleContext {
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public YieldItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterYieldItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitYieldItemName(this);
		}
	}

	public final YieldItemNameContext yieldItemName() throws RecognitionException {
		YieldItemNameContext _localctx = new YieldItemNameContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_yieldItemName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2629);
			fieldName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public YieldItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterYieldItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitYieldItemAlias(this);
		}
	}

	public final YieldItemAliasContext yieldItemAlias() throws RecognitionException {
		YieldItemAliasContext _localctx = new YieldItemAliasContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_yieldItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			match(AS);
			setState(2632);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(GQL_20240412Parser.GROUP, 0); }
		public TerminalNode BY() { return getToken(GQL_20240412Parser.BY, 0); }
		public GroupingElementListContext groupingElementList() {
			return getRuleContext(GroupingElementListContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGroupByClause(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2634);
			match(GROUP);
			setState(2635);
			match(BY);
			setState(2636);
			groupingElementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementListContext extends ParserRuleContext {
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public GroupingElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGroupingElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGroupingElementList(this);
		}
	}

	public final GroupingElementListContext groupingElementList() throws RecognitionException {
		GroupingElementListContext _localctx = new GroupingElementListContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_groupingElementList);
		try {
			int _alt;
			setState(2647);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2638);
				groupingElement();
				setState(2643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2639);
						match(COMMA);
						setState(2640);
						groupingElement();
						}
						} 
					}
					setState(2645);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2646);
				emptyGroupingSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGroupingElement(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_groupingElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEmptyGroupingSet(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(LEFT_PAREN);
			setState(2652);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(GQL_20240412Parser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GQL_20240412Parser.BY, 0); }
		public SortSpecificationListContext sortSpecificationList() {
			return getRuleContext(SortSpecificationListContext.class,0);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOrderByClause(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_orderByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654);
			match(ORDER);
			setState(2655);
			match(BY);
			setState(2656);
			sortSpecificationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortSpecificationListContext extends ParserRuleContext {
		public List<SortSpecificationContext> sortSpecification() {
			return getRuleContexts(SortSpecificationContext.class);
		}
		public SortSpecificationContext sortSpecification(int i) {
			return getRuleContext(SortSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public SortSpecificationListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecificationList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSortSpecificationList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSortSpecificationList(this);
		}
	}

	public final SortSpecificationListContext sortSpecificationList() throws RecognitionException {
		SortSpecificationListContext _localctx = new SortSpecificationListContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_sortSpecificationList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			sortSpecification();
			setState(2663);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2659);
					match(COMMA);
					setState(2660);
					sortSpecification();
					}
					} 
				}
				setState(2665);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortSpecificationContext extends ParserRuleContext {
		public SortKeyContext sortKey() {
			return getRuleContext(SortKeyContext.class,0);
		}
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public NullOrderingContext nullOrdering() {
			return getRuleContext(NullOrderingContext.class,0);
		}
		public SortSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSortSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSortSpecification(this);
		}
	}

	public final SortSpecificationContext sortSpecification() throws RecognitionException {
		SortSpecificationContext _localctx = new SortSpecificationContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_sortSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			sortKey();
			setState(2668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2667);
				orderingSpecification();
				}
				break;
			}
			setState(2671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2670);
				nullOrdering();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortKeyContext extends ParserRuleContext {
		public AggregatingValueExpressionContext aggregatingValueExpression() {
			return getRuleContext(AggregatingValueExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSortKey(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2673);
			aggregatingValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderingSpecificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(GQL_20240412Parser.ASC, 0); }
		public TerminalNode ASCENDING() { return getToken(GQL_20240412Parser.ASCENDING, 0); }
		public TerminalNode DESC() { return getToken(GQL_20240412Parser.DESC, 0); }
		public TerminalNode DESCENDING() { return getToken(GQL_20240412Parser.DESCENDING, 0); }
		public OrderingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOrderingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOrderingSpecification(this);
		}
	}

	public final OrderingSpecificationContext orderingSpecification() throws RecognitionException {
		OrderingSpecificationContext _localctx = new OrderingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_orderingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2675);
			_la = _input.LA(1);
			if ( !((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 1688849860263939L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullOrderingContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(GQL_20240412Parser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(GQL_20240412Parser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(GQL_20240412Parser.LAST, 0); }
		public NullOrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrdering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNullOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNullOrdering(this);
		}
	}

	public final NullOrderingContext nullOrdering() throws RecognitionException {
		NullOrderingContext _localctx = new NullOrderingContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_nullOrdering);
		try {
			setState(2681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2677);
				match(NULLS);
				setState(2678);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2679);
				match(NULLS);
				setState(2680);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(GQL_20240412Parser.LIMIT, 0); }
		public NonNegativeIntegerSpecificationContext nonNegativeIntegerSpecification() {
			return getRuleContext(NonNegativeIntegerSpecificationContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLimitClause(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(LIMIT);
			setState(2684);
			nonNegativeIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OffsetClauseContext extends ParserRuleContext {
		public OffsetSynonymContext offsetSynonym() {
			return getRuleContext(OffsetSynonymContext.class,0);
		}
		public NonNegativeIntegerSpecificationContext nonNegativeIntegerSpecification() {
			return getRuleContext(NonNegativeIntegerSpecificationContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOffsetClause(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_offsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2686);
			offsetSynonym();
			setState(2687);
			nonNegativeIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OffsetSynonymContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(GQL_20240412Parser.OFFSET, 0); }
		public TerminalNode SKIP_RESERVED_WORD() { return getToken(GQL_20240412Parser.SKIP_RESERVED_WORD, 0); }
		public OffsetSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOffsetSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOffsetSynonym(this);
		}
	}

	public final OffsetSynonymContext offsetSynonym() throws RecognitionException {
		OffsetSynonymContext _localctx = new OffsetSynonymContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_offsetSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2689);
			_la = _input.LA(1);
			if ( !(_la==OFFSET || _la==SKIP_RESERVED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaReferenceContext extends ParserRuleContext {
		public AbsoluteCatalogSchemaReferenceContext absoluteCatalogSchemaReference() {
			return getRuleContext(AbsoluteCatalogSchemaReferenceContext.class,0);
		}
		public RelativeCatalogSchemaReferenceContext relativeCatalogSchemaReference() {
			return getRuleContext(RelativeCatalogSchemaReferenceContext.class,0);
		}
		public ReferenceParameterSpecificationContext referenceParameterSpecification() {
			return getRuleContext(ReferenceParameterSpecificationContext.class,0);
		}
		public SchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSchemaReference(this);
		}
	}

	public final SchemaReferenceContext schemaReference() throws RecognitionException {
		SchemaReferenceContext _localctx = new SchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_schemaReference);
		try {
			setState(2694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2691);
				absoluteCatalogSchemaReference();
				}
				break;
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case DOUBLE_PERIOD:
			case PERIOD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2692);
				relativeCatalogSchemaReference();
				}
				break;
			case SUBSTITUTED_PARAMETER_REFERENCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2693);
				referenceParameterSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteCatalogSchemaReferenceContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(GQL_20240412Parser.SOLIDUS, 0); }
		public AbsoluteDirectoryPathContext absoluteDirectoryPath() {
			return getRuleContext(AbsoluteDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AbsoluteCatalogSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absoluteCatalogSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAbsoluteCatalogSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAbsoluteCatalogSchemaReference(this);
		}
	}

	public final AbsoluteCatalogSchemaReferenceContext absoluteCatalogSchemaReference() throws RecognitionException {
		AbsoluteCatalogSchemaReferenceContext _localctx = new AbsoluteCatalogSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_absoluteCatalogSchemaReference);
		try {
			setState(2700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2696);
				match(SOLIDUS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2697);
				absoluteDirectoryPath();
				setState(2698);
				schemaName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogSchemaParentAndNameContext extends ParserRuleContext {
		public AbsoluteDirectoryPathContext absoluteDirectoryPath() {
			return getRuleContext(AbsoluteDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public CatalogSchemaParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogSchemaParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCatalogSchemaParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCatalogSchemaParentAndName(this);
		}
	}

	public final CatalogSchemaParentAndNameContext catalogSchemaParentAndName() throws RecognitionException {
		CatalogSchemaParentAndNameContext _localctx = new CatalogSchemaParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_catalogSchemaParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2702);
			absoluteDirectoryPath();
			setState(2703);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelativeCatalogSchemaReferenceContext extends ParserRuleContext {
		public PredefinedSchemaReferenceContext predefinedSchemaReference() {
			return getRuleContext(PredefinedSchemaReferenceContext.class,0);
		}
		public RelativeDirectoryPathContext relativeDirectoryPath() {
			return getRuleContext(RelativeDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public RelativeCatalogSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relativeCatalogSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRelativeCatalogSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRelativeCatalogSchemaReference(this);
		}
	}

	public final RelativeCatalogSchemaReferenceContext relativeCatalogSchemaReference() throws RecognitionException {
		RelativeCatalogSchemaReferenceContext _localctx = new RelativeCatalogSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_relativeCatalogSchemaReference);
		try {
			setState(2709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case PERIOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2705);
				predefinedSchemaReference();
				}
				break;
			case DOUBLE_PERIOD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2706);
				relativeDirectoryPath();
				setState(2707);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedSchemaReferenceContext extends ParserRuleContext {
		public TerminalNode HOME_SCHEMA() { return getToken(GQL_20240412Parser.HOME_SCHEMA, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(GQL_20240412Parser.CURRENT_SCHEMA, 0); }
		public TerminalNode PERIOD() { return getToken(GQL_20240412Parser.PERIOD, 0); }
		public PredefinedSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPredefinedSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPredefinedSchemaReference(this);
		}
	}

	public final PredefinedSchemaReferenceContext predefinedSchemaReference() throws RecognitionException {
		PredefinedSchemaReferenceContext _localctx = new PredefinedSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_predefinedSchemaReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2711);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_SCHEMA || _la==HOME_SCHEMA || _la==PERIOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteDirectoryPathContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(GQL_20240412Parser.SOLIDUS, 0); }
		public SimpleDirectoryPathContext simpleDirectoryPath() {
			return getRuleContext(SimpleDirectoryPathContext.class,0);
		}
		public AbsoluteDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absoluteDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAbsoluteDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAbsoluteDirectoryPath(this);
		}
	}

	public final AbsoluteDirectoryPathContext absoluteDirectoryPath() throws RecognitionException {
		AbsoluteDirectoryPathContext _localctx = new AbsoluteDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_absoluteDirectoryPath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2713);
			match(SOLIDUS);
			setState(2715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2714);
				simpleDirectoryPath();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelativeDirectoryPathContext extends ParserRuleContext {
		public List<TerminalNode> DOUBLE_PERIOD() { return getTokens(GQL_20240412Parser.DOUBLE_PERIOD); }
		public TerminalNode DOUBLE_PERIOD(int i) {
			return getToken(GQL_20240412Parser.DOUBLE_PERIOD, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(GQL_20240412Parser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(GQL_20240412Parser.SOLIDUS, i);
		}
		public SimpleDirectoryPathContext simpleDirectoryPath() {
			return getRuleContext(SimpleDirectoryPathContext.class,0);
		}
		public RelativeDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relativeDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRelativeDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRelativeDirectoryPath(this);
		}
	}

	public final RelativeDirectoryPathContext relativeDirectoryPath() throws RecognitionException {
		RelativeDirectoryPathContext _localctx = new RelativeDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_relativeDirectoryPath);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			match(DOUBLE_PERIOD);
			setState(2722);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2718);
					match(SOLIDUS);
					setState(2719);
					match(DOUBLE_PERIOD);
					}
					} 
				}
				setState(2724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			}
			setState(2725);
			match(SOLIDUS);
			setState(2727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(2726);
				simpleDirectoryPath();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDirectoryPathContext extends ParserRuleContext {
		public List<DirectoryNameContext> directoryName() {
			return getRuleContexts(DirectoryNameContext.class);
		}
		public DirectoryNameContext directoryName(int i) {
			return getRuleContext(DirectoryNameContext.class,i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(GQL_20240412Parser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(GQL_20240412Parser.SOLIDUS, i);
		}
		public SimpleDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleDirectoryPath(this);
		}
	}

	public final SimpleDirectoryPathContext simpleDirectoryPath() throws RecognitionException {
		SimpleDirectoryPathContext _localctx = new SimpleDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_simpleDirectoryPath);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2732); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2729);
					directoryName();
					setState(2730);
					match(SOLIDUS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2734); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,239,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphReferenceContext extends ParserRuleContext {
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public GraphNameContext graphName() {
			return getRuleContext(GraphNameContext.class,0);
		}
		public DelimitedGraphNameContext delimitedGraphName() {
			return getRuleContext(DelimitedGraphNameContext.class,0);
		}
		public HomeGraphContext homeGraph() {
			return getRuleContext(HomeGraphContext.class,0);
		}
		public ReferenceParameterSpecificationContext referenceParameterSpecification() {
			return getRuleContext(ReferenceParameterSpecificationContext.class,0);
		}
		public GraphReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphReference(this);
		}
	}

	public final GraphReferenceContext graphReference() throws RecognitionException {
		GraphReferenceContext _localctx = new GraphReferenceContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_graphReference);
		try {
			setState(2742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2736);
				catalogObjectParentReference();
				setState(2737);
				graphName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2739);
				delimitedGraphName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2740);
				homeGraph();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2741);
				referenceParameterSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogGraphParentAndNameContext extends ParserRuleContext {
		public GraphNameContext graphName() {
			return getRuleContext(GraphNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogGraphParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogGraphParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCatalogGraphParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCatalogGraphParentAndName(this);
		}
	}

	public final CatalogGraphParentAndNameContext catalogGraphParentAndName() throws RecognitionException {
		CatalogGraphParentAndNameContext _localctx = new CatalogGraphParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_catalogGraphParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2744);
				catalogObjectParentReference();
				}
				break;
			}
			setState(2747);
			graphName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HomeGraphContext extends ParserRuleContext {
		public TerminalNode HOME_PROPERTY_GRAPH() { return getToken(GQL_20240412Parser.HOME_PROPERTY_GRAPH, 0); }
		public TerminalNode HOME_GRAPH() { return getToken(GQL_20240412Parser.HOME_GRAPH, 0); }
		public HomeGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_homeGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterHomeGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitHomeGraph(this);
		}
	}

	public final HomeGraphContext homeGraph() throws RecognitionException {
		HomeGraphContext _localctx = new HomeGraphContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_homeGraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			_la = _input.LA(1);
			if ( !(_la==HOME_GRAPH || _la==HOME_PROPERTY_GRAPH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeReferenceContext extends ParserRuleContext {
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public ReferenceParameterSpecificationContext referenceParameterSpecification() {
			return getRuleContext(ReferenceParameterSpecificationContext.class,0);
		}
		public GraphTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphTypeReference(this);
		}
	}

	public final GraphTypeReferenceContext graphTypeReference() throws RecognitionException {
		GraphTypeReferenceContext _localctx = new GraphTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_graphTypeReference);
		try {
			setState(2753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2751);
				catalogGraphTypeParentAndName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2752);
				referenceParameterSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogGraphTypeParentAndNameContext extends ParserRuleContext {
		public GraphTypeNameContext graphTypeName() {
			return getRuleContext(GraphTypeNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogGraphTypeParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogGraphTypeParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCatalogGraphTypeParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCatalogGraphTypeParentAndName(this);
		}
	}

	public final CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() throws RecognitionException {
		CatalogGraphTypeParentAndNameContext _localctx = new CatalogGraphTypeParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_catalogGraphTypeParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(2755);
				catalogObjectParentReference();
				}
				break;
			}
			setState(2758);
			graphTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableReferenceContext extends ParserRuleContext {
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public BindingTableNameContext bindingTableName() {
			return getRuleContext(BindingTableNameContext.class,0);
		}
		public DelimitedBindingTableNameContext delimitedBindingTableName() {
			return getRuleContext(DelimitedBindingTableNameContext.class,0);
		}
		public ReferenceParameterSpecificationContext referenceParameterSpecification() {
			return getRuleContext(ReferenceParameterSpecificationContext.class,0);
		}
		public BindingTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableReference(this);
		}
	}

	public final BindingTableReferenceContext bindingTableReference() throws RecognitionException {
		BindingTableReferenceContext _localctx = new BindingTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_bindingTableReference);
		try {
			setState(2765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2760);
				catalogObjectParentReference();
				setState(2761);
				bindingTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2763);
				delimitedBindingTableName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2764);
				referenceParameterSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureReferenceContext extends ParserRuleContext {
		public CatalogProcedureParentAndNameContext catalogProcedureParentAndName() {
			return getRuleContext(CatalogProcedureParentAndNameContext.class,0);
		}
		public ReferenceParameterSpecificationContext referenceParameterSpecification() {
			return getRuleContext(ReferenceParameterSpecificationContext.class,0);
		}
		public ProcedureReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureReference(this);
		}
	}

	public final ProcedureReferenceContext procedureReference() throws RecognitionException {
		ProcedureReferenceContext _localctx = new ProcedureReferenceContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_procedureReference);
		try {
			setState(2769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2767);
				catalogProcedureParentAndName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2768);
				referenceParameterSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogProcedureParentAndNameContext extends ParserRuleContext {
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogProcedureParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogProcedureParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCatalogProcedureParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCatalogProcedureParentAndName(this);
		}
	}

	public final CatalogProcedureParentAndNameContext catalogProcedureParentAndName() throws RecognitionException {
		CatalogProcedureParentAndNameContext _localctx = new CatalogProcedureParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_catalogProcedureParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2771);
				catalogObjectParentReference();
				}
				break;
			}
			setState(2774);
			procedureName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogObjectParentReferenceContext extends ParserRuleContext {
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQL_20240412Parser.SOLIDUS, 0); }
		public List<ObjectNameContext> objectName() {
			return getRuleContexts(ObjectNameContext.class);
		}
		public ObjectNameContext objectName(int i) {
			return getRuleContext(ObjectNameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(GQL_20240412Parser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(GQL_20240412Parser.PERIOD, i);
		}
		public CatalogObjectParentReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogObjectParentReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCatalogObjectParentReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCatalogObjectParentReference(this);
		}
	}

	public final CatalogObjectParentReferenceContext catalogObjectParentReference() throws RecognitionException {
		CatalogObjectParentReferenceContext _localctx = new CatalogObjectParentReferenceContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_catalogObjectParentReference);
		int _la;
		try {
			int _alt;
			setState(2795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case SUBSTITUTED_PARAMETER_REFERENCE:
			case DOUBLE_PERIOD:
			case PERIOD:
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2776);
				schemaReference();
				setState(2778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SOLIDUS) {
					{
					setState(2777);
					match(SOLIDUS);
					}
				}

				setState(2785);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2780);
						objectName();
						setState(2781);
						match(PERIOD);
						}
						} 
					}
					setState(2787);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				}
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2791); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2788);
						objectName();
						setState(2789);
						match(PERIOD);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2793); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,249,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceParameterSpecificationContext extends ParserRuleContext {
		public TerminalNode SUBSTITUTED_PARAMETER_REFERENCE() { return getToken(GQL_20240412Parser.SUBSTITUTED_PARAMETER_REFERENCE, 0); }
		public ReferenceParameterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceParameterSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReferenceParameterSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReferenceParameterSpecification(this);
		}
	}

	public final ReferenceParameterSpecificationContext referenceParameterSpecification() throws RecognitionException {
		ReferenceParameterSpecificationContext _localctx = new ReferenceParameterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_referenceParameterSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2797);
			match(SUBSTITUTED_PARAMETER_REFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedGraphTypeSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public GraphTypeSpecificationBodyContext graphTypeSpecificationBody() {
			return getRuleContext(GraphTypeSpecificationBodyContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public NestedGraphTypeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedGraphTypeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNestedGraphTypeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNestedGraphTypeSpecification(this);
		}
	}

	public final NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() throws RecognitionException {
		NestedGraphTypeSpecificationContext _localctx = new NestedGraphTypeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_nestedGraphTypeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2799);
			match(LEFT_BRACE);
			setState(2800);
			graphTypeSpecificationBody();
			setState(2801);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeSpecificationBodyContext extends ParserRuleContext {
		public ElementTypeListContext elementTypeList() {
			return getRuleContext(ElementTypeListContext.class,0);
		}
		public GraphTypeSpecificationBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeSpecificationBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphTypeSpecificationBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphTypeSpecificationBody(this);
		}
	}

	public final GraphTypeSpecificationBodyContext graphTypeSpecificationBody() throws RecognitionException {
		GraphTypeSpecificationBodyContext _localctx = new GraphTypeSpecificationBodyContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_graphTypeSpecificationBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			elementTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementTypeListContext extends ParserRuleContext {
		public List<ElementTypeSpecificationContext> elementTypeSpecification() {
			return getRuleContexts(ElementTypeSpecificationContext.class);
		}
		public ElementTypeSpecificationContext elementTypeSpecification(int i) {
			return getRuleContext(ElementTypeSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public ElementTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementTypeList(this);
		}
	}

	public final ElementTypeListContext elementTypeList() throws RecognitionException {
		ElementTypeListContext _localctx = new ElementTypeListContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_elementTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			elementTypeSpecification();
			setState(2810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2806);
				match(COMMA);
				setState(2807);
				elementTypeSpecification();
				}
				}
				setState(2812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementTypeSpecificationContext extends ParserRuleContext {
		public NodeTypeSpecificationContext nodeTypeSpecification() {
			return getRuleContext(NodeTypeSpecificationContext.class,0);
		}
		public EdgeTypeSpecificationContext edgeTypeSpecification() {
			return getRuleContext(EdgeTypeSpecificationContext.class,0);
		}
		public ElementTypeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementTypeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementTypeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementTypeSpecification(this);
		}
	}

	public final ElementTypeSpecificationContext elementTypeSpecification() throws RecognitionException {
		ElementTypeSpecificationContext _localctx = new ElementTypeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_elementTypeSpecification);
		try {
			setState(2815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2813);
				nodeTypeSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2814);
				edgeTypeSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeSpecificationContext extends ParserRuleContext {
		public NodeTypePatternContext nodeTypePattern() {
			return getRuleContext(NodeTypePatternContext.class,0);
		}
		public NodeTypePhraseContext nodeTypePhrase() {
			return getRuleContext(NodeTypePhraseContext.class,0);
		}
		public NodeTypeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeSpecification(this);
		}
	}

	public final NodeTypeSpecificationContext nodeTypeSpecification() throws RecognitionException {
		NodeTypeSpecificationContext _localctx = new NodeTypeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_nodeTypeSpecification);
		try {
			setState(2819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2817);
				nodeTypePattern();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2818);
				nodeTypePhrase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NodeSynonymContext nodeSynonym() {
			return getRuleContext(NodeSynonymContext.class,0);
		}
		public NodeTypeNameContext nodeTypeName() {
			return getRuleContext(NodeTypeNameContext.class,0);
		}
		public LocalNodeTypeAliasContext localNodeTypeAlias() {
			return getRuleContext(LocalNodeTypeAliasContext.class,0);
		}
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public NodeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypePattern(this);
		}
	}

	public final NodeTypePatternContext nodeTypePattern() throws RecognitionException {
		NodeTypePatternContext _localctx = new NodeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_nodeTypePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODE || _la==VERTEX) {
				{
				setState(2821);
				nodeSynonym();
				setState(2823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2822);
					match(TYPE);
					}
					break;
				}
				setState(2825);
				nodeTypeName();
				}
			}

			setState(2829);
			match(LEFT_PAREN);
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2830);
				localNodeTypeAlias();
				}
				break;
			}
			setState(2834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IMPLIES || _la==IS || _la==LABEL || _la==LABELS || _la==COLON || _la==LEFT_BRACE) {
				{
				setState(2833);
				nodeTypeFiller();
				}
			}

			setState(2836);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePhraseContext extends ParserRuleContext {
		public NodeSynonymContext nodeSynonym() {
			return getRuleContext(NodeSynonymContext.class,0);
		}
		public NodeTypePhraseFillerContext nodeTypePhraseFiller() {
			return getRuleContext(NodeTypePhraseFillerContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public LocalNodeTypeAliasContext localNodeTypeAlias() {
			return getRuleContext(LocalNodeTypeAliasContext.class,0);
		}
		public NodeTypePhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypePhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypePhrase(this);
		}
	}

	public final NodeTypePhraseContext nodeTypePhrase() throws RecognitionException {
		NodeTypePhraseContext _localctx = new NodeTypePhraseContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_nodeTypePhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838);
			nodeSynonym();
			setState(2840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2839);
				match(TYPE);
				}
				break;
			}
			setState(2842);
			nodeTypePhraseFiller();
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(2843);
				match(AS);
				setState(2844);
				localNodeTypeAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePhraseFillerContext extends ParserRuleContext {
		public NodeTypeNameContext nodeTypeName() {
			return getRuleContext(NodeTypeNameContext.class,0);
		}
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public NodeTypePhraseFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePhraseFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypePhraseFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypePhraseFiller(this);
		}
	}

	public final NodeTypePhraseFillerContext nodeTypePhraseFiller() throws RecognitionException {
		NodeTypePhraseFillerContext _localctx = new NodeTypePhraseFillerContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_nodeTypePhraseFiller);
		try {
			setState(2852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2847);
				nodeTypeName();
				setState(2849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(2848);
					nodeTypeFiller();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2851);
				nodeTypeFiller();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeFillerContext extends ParserRuleContext {
		public NodeTypeKeyLabelSetContext nodeTypeKeyLabelSet() {
			return getRuleContext(NodeTypeKeyLabelSetContext.class,0);
		}
		public NodeTypeImpliedContentContext nodeTypeImpliedContent() {
			return getRuleContext(NodeTypeImpliedContentContext.class,0);
		}
		public NodeTypeFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeFiller(this);
		}
	}

	public final NodeTypeFillerContext nodeTypeFiller() throws RecognitionException {
		NodeTypeFillerContext _localctx = new NodeTypeFillerContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_nodeTypeFiller);
		try {
			setState(2859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2854);
				nodeTypeKeyLabelSet();
				setState(2856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2855);
					nodeTypeImpliedContent();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2858);
				nodeTypeImpliedContent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocalNodeTypeAliasContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public LocalNodeTypeAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localNodeTypeAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLocalNodeTypeAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLocalNodeTypeAlias(this);
		}
	}

	public final LocalNodeTypeAliasContext localNodeTypeAlias() throws RecognitionException {
		LocalNodeTypeAliasContext _localctx = new LocalNodeTypeAliasContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_localNodeTypeAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2861);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeImpliedContentContext extends ParserRuleContext {
		public NodeTypeLabelSetContext nodeTypeLabelSet() {
			return getRuleContext(NodeTypeLabelSetContext.class,0);
		}
		public NodeTypePropertyTypesContext nodeTypePropertyTypes() {
			return getRuleContext(NodeTypePropertyTypesContext.class,0);
		}
		public NodeTypeImpliedContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeImpliedContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeImpliedContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeImpliedContent(this);
		}
	}

	public final NodeTypeImpliedContentContext nodeTypeImpliedContent() throws RecognitionException {
		NodeTypeImpliedContentContext _localctx = new NodeTypeImpliedContentContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_nodeTypeImpliedContent);
		try {
			setState(2868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2863);
				nodeTypeLabelSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2864);
				nodeTypePropertyTypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2865);
				nodeTypeLabelSet();
				setState(2866);
				nodeTypePropertyTypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeKeyLabelSetContext extends ParserRuleContext {
		public TerminalNode IMPLIES() { return getToken(GQL_20240412Parser.IMPLIES, 0); }
		public LabelSetPhraseContext labelSetPhrase() {
			return getRuleContext(LabelSetPhraseContext.class,0);
		}
		public NodeTypeKeyLabelSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeKeyLabelSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeKeyLabelSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeKeyLabelSet(this);
		}
	}

	public final NodeTypeKeyLabelSetContext nodeTypeKeyLabelSet() throws RecognitionException {
		NodeTypeKeyLabelSetContext _localctx = new NodeTypeKeyLabelSetContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_nodeTypeKeyLabelSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==LABEL || _la==LABELS || _la==COLON) {
				{
				setState(2870);
				labelSetPhrase();
				}
			}

			setState(2873);
			match(IMPLIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeLabelSetContext extends ParserRuleContext {
		public LabelSetPhraseContext labelSetPhrase() {
			return getRuleContext(LabelSetPhraseContext.class,0);
		}
		public NodeTypeLabelSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeLabelSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeLabelSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeLabelSet(this);
		}
	}

	public final NodeTypeLabelSetContext nodeTypeLabelSet() throws RecognitionException {
		NodeTypeLabelSetContext _localctx = new NodeTypeLabelSetContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_nodeTypeLabelSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875);
			labelSetPhrase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePropertyTypesContext extends ParserRuleContext {
		public PropertyTypesSpecificationContext propertyTypesSpecification() {
			return getRuleContext(PropertyTypesSpecificationContext.class,0);
		}
		public NodeTypePropertyTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePropertyTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypePropertyTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypePropertyTypes(this);
		}
	}

	public final NodeTypePropertyTypesContext nodeTypePropertyTypes() throws RecognitionException {
		NodeTypePropertyTypesContext _localctx = new NodeTypePropertyTypesContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_nodeTypePropertyTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			propertyTypesSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeSpecificationContext extends ParserRuleContext {
		public EdgeTypePatternContext edgeTypePattern() {
			return getRuleContext(EdgeTypePatternContext.class,0);
		}
		public EdgeTypePhraseContext edgeTypePhrase() {
			return getRuleContext(EdgeTypePhraseContext.class,0);
		}
		public EdgeTypeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeSpecification(this);
		}
	}

	public final EdgeTypeSpecificationContext edgeTypeSpecification() throws RecognitionException {
		EdgeTypeSpecificationContext _localctx = new EdgeTypeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_edgeTypeSpecification);
		try {
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2879);
				edgeTypePattern();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2880);
				edgeTypePhrase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternContext extends ParserRuleContext {
		public EdgeTypePatternDirectedContext edgeTypePatternDirected() {
			return getRuleContext(EdgeTypePatternDirectedContext.class,0);
		}
		public EdgeTypePatternUndirectedContext edgeTypePatternUndirected() {
			return getRuleContext(EdgeTypePatternUndirectedContext.class,0);
		}
		public EdgeSynonymContext edgeSynonym() {
			return getRuleContext(EdgeSynonymContext.class,0);
		}
		public EdgeTypeNameContext edgeTypeName() {
			return getRuleContext(EdgeTypeNameContext.class,0);
		}
		public EdgeKindContext edgeKind() {
			return getRuleContext(EdgeKindContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public EdgeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePattern(this);
		}
	}

	public final EdgeTypePatternContext edgeTypePattern() throws RecognitionException {
		EdgeTypePatternContext _localctx = new EdgeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_edgeTypePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & 68736253955L) != 0) {
				{
				setState(2884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIRECTED || _la==UNDIRECTED) {
					{
					setState(2883);
					edgeKind();
					}
				}

				setState(2886);
				edgeSynonym();
				setState(2888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(2887);
					match(TYPE);
					}
					break;
				}
				setState(2890);
				edgeTypeName();
				}
			}

			setState(2896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2894);
				edgeTypePatternDirected();
				}
				break;
			case 2:
				{
				setState(2895);
				edgeTypePatternUndirected();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePhraseContext extends ParserRuleContext {
		public EdgeKindContext edgeKind() {
			return getRuleContext(EdgeKindContext.class,0);
		}
		public EdgeSynonymContext edgeSynonym() {
			return getRuleContext(EdgeSynonymContext.class,0);
		}
		public EdgeTypePhraseFillerContext edgeTypePhraseFiller() {
			return getRuleContext(EdgeTypePhraseFillerContext.class,0);
		}
		public EndpointPairPhraseContext endpointPairPhrase() {
			return getRuleContext(EndpointPairPhraseContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public EdgeTypePhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePhrase(this);
		}
	}

	public final EdgeTypePhraseContext edgeTypePhrase() throws RecognitionException {
		EdgeTypePhraseContext _localctx = new EdgeTypePhraseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_edgeTypePhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			edgeKind();
			setState(2899);
			edgeSynonym();
			setState(2901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2900);
				match(TYPE);
				}
				break;
			}
			setState(2903);
			edgeTypePhraseFiller();
			setState(2904);
			endpointPairPhrase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePhraseFillerContext extends ParserRuleContext {
		public EdgeTypeNameContext edgeTypeName() {
			return getRuleContext(EdgeTypeNameContext.class,0);
		}
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public EdgeTypePhraseFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePhraseFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePhraseFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePhraseFiller(this);
		}
	}

	public final EdgeTypePhraseFillerContext edgeTypePhraseFiller() throws RecognitionException {
		EdgeTypePhraseFillerContext _localctx = new EdgeTypePhraseFillerContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_edgeTypePhraseFiller);
		int _la;
		try {
			setState(2911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2906);
				edgeTypeName();
				setState(2908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMPLIES || _la==IS || _la==LABEL || _la==LABELS || _la==COLON || _la==LEFT_BRACE) {
					{
					setState(2907);
					edgeTypeFiller();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2910);
				edgeTypeFiller();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeFillerContext extends ParserRuleContext {
		public EdgeTypeKeyLabelSetContext edgeTypeKeyLabelSet() {
			return getRuleContext(EdgeTypeKeyLabelSetContext.class,0);
		}
		public EdgeTypeImpliedContentContext edgeTypeImpliedContent() {
			return getRuleContext(EdgeTypeImpliedContentContext.class,0);
		}
		public EdgeTypeFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeFiller(this);
		}
	}

	public final EdgeTypeFillerContext edgeTypeFiller() throws RecognitionException {
		EdgeTypeFillerContext _localctx = new EdgeTypeFillerContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_edgeTypeFiller);
		int _la;
		try {
			setState(2918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2913);
				edgeTypeKeyLabelSet();
				setState(2915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS || _la==LABEL || _la==LABELS || _la==COLON || _la==LEFT_BRACE) {
					{
					setState(2914);
					edgeTypeImpliedContent();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2917);
				edgeTypeImpliedContent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeImpliedContentContext extends ParserRuleContext {
		public EdgeTypeLabelSetContext edgeTypeLabelSet() {
			return getRuleContext(EdgeTypeLabelSetContext.class,0);
		}
		public EdgeTypePropertyTypesContext edgeTypePropertyTypes() {
			return getRuleContext(EdgeTypePropertyTypesContext.class,0);
		}
		public EdgeTypeImpliedContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeImpliedContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeImpliedContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeImpliedContent(this);
		}
	}

	public final EdgeTypeImpliedContentContext edgeTypeImpliedContent() throws RecognitionException {
		EdgeTypeImpliedContentContext _localctx = new EdgeTypeImpliedContentContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_edgeTypeImpliedContent);
		try {
			setState(2925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2920);
				edgeTypeLabelSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2921);
				edgeTypePropertyTypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2922);
				edgeTypeLabelSet();
				setState(2923);
				edgeTypePropertyTypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeKeyLabelSetContext extends ParserRuleContext {
		public TerminalNode IMPLIES() { return getToken(GQL_20240412Parser.IMPLIES, 0); }
		public LabelSetPhraseContext labelSetPhrase() {
			return getRuleContext(LabelSetPhraseContext.class,0);
		}
		public EdgeTypeKeyLabelSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeKeyLabelSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeKeyLabelSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeKeyLabelSet(this);
		}
	}

	public final EdgeTypeKeyLabelSetContext edgeTypeKeyLabelSet() throws RecognitionException {
		EdgeTypeKeyLabelSetContext _localctx = new EdgeTypeKeyLabelSetContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_edgeTypeKeyLabelSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==LABEL || _la==LABELS || _la==COLON) {
				{
				setState(2927);
				labelSetPhrase();
				}
			}

			setState(2930);
			match(IMPLIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeLabelSetContext extends ParserRuleContext {
		public LabelSetPhraseContext labelSetPhrase() {
			return getRuleContext(LabelSetPhraseContext.class,0);
		}
		public EdgeTypeLabelSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeLabelSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeLabelSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeLabelSet(this);
		}
	}

	public final EdgeTypeLabelSetContext edgeTypeLabelSet() throws RecognitionException {
		EdgeTypeLabelSetContext _localctx = new EdgeTypeLabelSetContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_edgeTypeLabelSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932);
			labelSetPhrase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePropertyTypesContext extends ParserRuleContext {
		public PropertyTypesSpecificationContext propertyTypesSpecification() {
			return getRuleContext(PropertyTypesSpecificationContext.class,0);
		}
		public EdgeTypePropertyTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePropertyTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePropertyTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePropertyTypes(this);
		}
	}

	public final EdgeTypePropertyTypesContext edgeTypePropertyTypes() throws RecognitionException {
		EdgeTypePropertyTypesContext _localctx = new EdgeTypePropertyTypesContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_edgeTypePropertyTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			propertyTypesSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternDirectedContext extends ParserRuleContext {
		public EdgeTypePatternPointingRightContext edgeTypePatternPointingRight() {
			return getRuleContext(EdgeTypePatternPointingRightContext.class,0);
		}
		public EdgeTypePatternPointingLeftContext edgeTypePatternPointingLeft() {
			return getRuleContext(EdgeTypePatternPointingLeftContext.class,0);
		}
		public EdgeTypePatternDirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePatternDirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePatternDirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePatternDirected(this);
		}
	}

	public final EdgeTypePatternDirectedContext edgeTypePatternDirected() throws RecognitionException {
		EdgeTypePatternDirectedContext _localctx = new EdgeTypePatternDirectedContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_edgeTypePatternDirected);
		try {
			setState(2938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2936);
				edgeTypePatternPointingRight();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2937);
				edgeTypePatternPointingLeft();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternPointingRightContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public ArcTypePointingRightContext arcTypePointingRight() {
			return getRuleContext(ArcTypePointingRightContext.class,0);
		}
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public EdgeTypePatternPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePatternPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePatternPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePatternPointingRight(this);
		}
	}

	public final EdgeTypePatternPointingRightContext edgeTypePatternPointingRight() throws RecognitionException {
		EdgeTypePatternPointingRightContext _localctx = new EdgeTypePatternPointingRightContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_edgeTypePatternPointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			sourceNodeTypeReference();
			setState(2941);
			arcTypePointingRight();
			setState(2942);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternPointingLeftContext extends ParserRuleContext {
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public ArcTypePointingLeftContext arcTypePointingLeft() {
			return getRuleContext(ArcTypePointingLeftContext.class,0);
		}
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public EdgeTypePatternPointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePatternPointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePatternPointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePatternPointingLeft(this);
		}
	}

	public final EdgeTypePatternPointingLeftContext edgeTypePatternPointingLeft() throws RecognitionException {
		EdgeTypePatternPointingLeftContext _localctx = new EdgeTypePatternPointingLeftContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_edgeTypePatternPointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2944);
			destinationNodeTypeReference();
			setState(2945);
			arcTypePointingLeft();
			setState(2946);
			sourceNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternUndirectedContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public ArcTypeUndirectedContext arcTypeUndirected() {
			return getRuleContext(ArcTypeUndirectedContext.class,0);
		}
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public EdgeTypePatternUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePatternUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypePatternUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypePatternUndirected(this);
		}
	}

	public final EdgeTypePatternUndirectedContext edgeTypePatternUndirected() throws RecognitionException {
		EdgeTypePatternUndirectedContext _localctx = new EdgeTypePatternUndirectedContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_edgeTypePatternUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			sourceNodeTypeReference();
			setState(2949);
			arcTypeUndirected();
			setState(2950);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_LEFT_BRACKET() { return getToken(GQL_20240412Parser.MINUS_LEFT_BRACKET, 0); }
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public TerminalNode BRACKET_RIGHT_ARROW() { return getToken(GQL_20240412Parser.BRACKET_RIGHT_ARROW, 0); }
		public ArcTypePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterArcTypePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitArcTypePointingRight(this);
		}
	}

	public final ArcTypePointingRightContext arcTypePointingRight() throws RecognitionException {
		ArcTypePointingRightContext _localctx = new ArcTypePointingRightContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_arcTypePointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2952);
			match(MINUS_LEFT_BRACKET);
			setState(2953);
			edgeTypeFiller();
			setState(2954);
			match(BRACKET_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ARROW_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ARROW_BRACKET, 0); }
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_MINUS() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_MINUS, 0); }
		public ArcTypePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterArcTypePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitArcTypePointingLeft(this);
		}
	}

	public final ArcTypePointingLeftContext arcTypePointingLeft() throws RecognitionException {
		ArcTypePointingLeftContext _localctx = new ArcTypePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_arcTypePointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			match(LEFT_ARROW_BRACKET);
			setState(2957);
			edgeTypeFiller();
			setState(2958);
			match(RIGHT_BRACKET_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypeUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE_LEFT_BRACKET() { return getToken(GQL_20240412Parser.TILDE_LEFT_BRACKET, 0); }
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET_TILDE() { return getToken(GQL_20240412Parser.RIGHT_BRACKET_TILDE, 0); }
		public ArcTypeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterArcTypeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitArcTypeUndirected(this);
		}
	}

	public final ArcTypeUndirectedContext arcTypeUndirected() throws RecognitionException {
		ArcTypeUndirectedContext _localctx = new ArcTypeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_arcTypeUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			match(TILDE_LEFT_BRACKET);
			setState(2961);
			edgeTypeFiller();
			setState(2962);
			match(RIGHT_BRACKET_TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceNodeTypeReferenceContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public SourceNodeTypeAliasContext sourceNodeTypeAlias() {
			return getRuleContext(SourceNodeTypeAliasContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public SourceNodeTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceNodeTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSourceNodeTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSourceNodeTypeReference(this);
		}
	}

	public final SourceNodeTypeReferenceContext sourceNodeTypeReference() throws RecognitionException {
		SourceNodeTypeReferenceContext _localctx = new SourceNodeTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_sourceNodeTypeReference);
		int _la;
		try {
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2964);
				match(LEFT_PAREN);
				setState(2965);
				sourceNodeTypeAlias();
				setState(2966);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2968);
				match(LEFT_PAREN);
				setState(2970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMPLIES || _la==IS || _la==LABEL || _la==LABELS || _la==COLON || _la==LEFT_BRACE) {
					{
					setState(2969);
					nodeTypeFiller();
					}
				}

				setState(2972);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationNodeTypeReferenceContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public DestinationNodeTypeAliasContext destinationNodeTypeAlias() {
			return getRuleContext(DestinationNodeTypeAliasContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public DestinationNodeTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destinationNodeTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDestinationNodeTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDestinationNodeTypeReference(this);
		}
	}

	public final DestinationNodeTypeReferenceContext destinationNodeTypeReference() throws RecognitionException {
		DestinationNodeTypeReferenceContext _localctx = new DestinationNodeTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_destinationNodeTypeReference);
		int _la;
		try {
			setState(2984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2975);
				match(LEFT_PAREN);
				setState(2976);
				destinationNodeTypeAlias();
				setState(2977);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2979);
				match(LEFT_PAREN);
				setState(2981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMPLIES || _la==IS || _la==LABEL || _la==LABELS || _la==COLON || _la==LEFT_BRACE) {
					{
					setState(2980);
					nodeTypeFiller();
					}
				}

				setState(2983);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeKindContext extends ParserRuleContext {
		public TerminalNode DIRECTED() { return getToken(GQL_20240412Parser.DIRECTED, 0); }
		public TerminalNode UNDIRECTED() { return getToken(GQL_20240412Parser.UNDIRECTED, 0); }
		public EdgeKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeKind(this);
		}
	}

	public final EdgeKindContext edgeKind() throws RecognitionException {
		EdgeKindContext _localctx = new EdgeKindContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_edgeKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2986);
			_la = _input.LA(1);
			if ( !(_la==DIRECTED || _la==UNDIRECTED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairPhraseContext extends ParserRuleContext {
		public TerminalNode CONNECTING() { return getToken(GQL_20240412Parser.CONNECTING, 0); }
		public EndpointPairContext endpointPair() {
			return getRuleContext(EndpointPairContext.class,0);
		}
		public EndpointPairPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPairPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPairPhrase(this);
		}
	}

	public final EndpointPairPhraseContext endpointPairPhrase() throws RecognitionException {
		EndpointPairPhraseContext _localctx = new EndpointPairPhraseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_endpointPairPhrase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			match(CONNECTING);
			setState(2989);
			endpointPair();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairContext extends ParserRuleContext {
		public EndpointPairDirectedContext endpointPairDirected() {
			return getRuleContext(EndpointPairDirectedContext.class,0);
		}
		public EndpointPairUndirectedContext endpointPairUndirected() {
			return getRuleContext(EndpointPairUndirectedContext.class,0);
		}
		public EndpointPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPair(this);
		}
	}

	public final EndpointPairContext endpointPair() throws RecognitionException {
		EndpointPairContext _localctx = new EndpointPairContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_endpointPair);
		try {
			setState(2993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2991);
				endpointPairDirected();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2992);
				endpointPairUndirected();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairDirectedContext extends ParserRuleContext {
		public EndpointPairPointingRightContext endpointPairPointingRight() {
			return getRuleContext(EndpointPairPointingRightContext.class,0);
		}
		public EndpointPairPointingLeftContext endpointPairPointingLeft() {
			return getRuleContext(EndpointPairPointingLeftContext.class,0);
		}
		public EndpointPairDirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairDirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPairDirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPairDirected(this);
		}
	}

	public final EndpointPairDirectedContext endpointPairDirected() throws RecognitionException {
		EndpointPairDirectedContext _localctx = new EndpointPairDirectedContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_endpointPairDirected);
		try {
			setState(2997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2995);
				endpointPairPointingRight();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2996);
				endpointPairPointingLeft();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairPointingRightContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public SourceNodeTypeAliasContext sourceNodeTypeAlias() {
			return getRuleContext(SourceNodeTypeAliasContext.class,0);
		}
		public ConnectorPointingRightContext connectorPointingRight() {
			return getRuleContext(ConnectorPointingRightContext.class,0);
		}
		public DestinationNodeTypeAliasContext destinationNodeTypeAlias() {
			return getRuleContext(DestinationNodeTypeAliasContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public EndpointPairPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPairPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPairPointingRight(this);
		}
	}

	public final EndpointPairPointingRightContext endpointPairPointingRight() throws RecognitionException {
		EndpointPairPointingRightContext _localctx = new EndpointPairPointingRightContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_endpointPairPointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			match(LEFT_PAREN);
			setState(3000);
			sourceNodeTypeAlias();
			setState(3001);
			connectorPointingRight();
			setState(3002);
			destinationNodeTypeAlias();
			setState(3003);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairPointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public DestinationNodeTypeAliasContext destinationNodeTypeAlias() {
			return getRuleContext(DestinationNodeTypeAliasContext.class,0);
		}
		public TerminalNode LEFT_ARROW() { return getToken(GQL_20240412Parser.LEFT_ARROW, 0); }
		public SourceNodeTypeAliasContext sourceNodeTypeAlias() {
			return getRuleContext(SourceNodeTypeAliasContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public EndpointPairPointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairPointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPairPointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPairPointingLeft(this);
		}
	}

	public final EndpointPairPointingLeftContext endpointPairPointingLeft() throws RecognitionException {
		EndpointPairPointingLeftContext _localctx = new EndpointPairPointingLeftContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_endpointPairPointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005);
			match(LEFT_PAREN);
			setState(3006);
			destinationNodeTypeAlias();
			setState(3007);
			match(LEFT_ARROW);
			setState(3008);
			sourceNodeTypeAlias();
			setState(3009);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public SourceNodeTypeAliasContext sourceNodeTypeAlias() {
			return getRuleContext(SourceNodeTypeAliasContext.class,0);
		}
		public ConnectorUndirectedContext connectorUndirected() {
			return getRuleContext(ConnectorUndirectedContext.class,0);
		}
		public DestinationNodeTypeAliasContext destinationNodeTypeAlias() {
			return getRuleContext(DestinationNodeTypeAliasContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public EndpointPairUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEndpointPairUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEndpointPairUndirected(this);
		}
	}

	public final EndpointPairUndirectedContext endpointPairUndirected() throws RecognitionException {
		EndpointPairUndirectedContext _localctx = new EndpointPairUndirectedContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_endpointPairUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			match(LEFT_PAREN);
			setState(3012);
			sourceNodeTypeAlias();
			setState(3013);
			connectorUndirected();
			setState(3014);
			destinationNodeTypeAlias();
			setState(3015);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectorPointingRightContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(GQL_20240412Parser.TO, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQL_20240412Parser.RIGHT_ARROW, 0); }
		public ConnectorPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectorPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterConnectorPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitConnectorPointingRight(this);
		}
	}

	public final ConnectorPointingRightContext connectorPointingRight() throws RecognitionException {
		ConnectorPointingRightContext _localctx = new ConnectorPointingRightContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_connectorPointingRight);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			_la = _input.LA(1);
			if ( !(_la==TO || _la==RIGHT_ARROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectorUndirectedContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(GQL_20240412Parser.TO, 0); }
		public TerminalNode TILDE() { return getToken(GQL_20240412Parser.TILDE, 0); }
		public ConnectorUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectorUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterConnectorUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitConnectorUndirected(this);
		}
	}

	public final ConnectorUndirectedContext connectorUndirected() throws RecognitionException {
		ConnectorUndirectedContext _localctx = new ConnectorUndirectedContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_connectorUndirected);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			_la = _input.LA(1);
			if ( !(_la==TO || _la==TILDE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceNodeTypeAliasContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public SourceNodeTypeAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceNodeTypeAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSourceNodeTypeAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSourceNodeTypeAlias(this);
		}
	}

	public final SourceNodeTypeAliasContext sourceNodeTypeAlias() throws RecognitionException {
		SourceNodeTypeAliasContext _localctx = new SourceNodeTypeAliasContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_sourceNodeTypeAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationNodeTypeAliasContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public DestinationNodeTypeAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destinationNodeTypeAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDestinationNodeTypeAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDestinationNodeTypeAlias(this);
		}
	}

	public final DestinationNodeTypeAliasContext destinationNodeTypeAlias() throws RecognitionException {
		DestinationNodeTypeAliasContext _localctx = new DestinationNodeTypeAliasContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_destinationNodeTypeAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelSetPhraseContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(GQL_20240412Parser.LABEL, 0); }
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public TerminalNode LABELS() { return getToken(GQL_20240412Parser.LABELS, 0); }
		public LabelSetSpecificationContext labelSetSpecification() {
			return getRuleContext(LabelSetSpecificationContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelSetPhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelSetPhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelSetPhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelSetPhrase(this);
		}
	}

	public final LabelSetPhraseContext labelSetPhrase() throws RecognitionException {
		LabelSetPhraseContext _localctx = new LabelSetPhraseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_labelSetPhrase);
		try {
			setState(3032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LABEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3025);
				match(LABEL);
				setState(3026);
				labelName();
				}
				break;
			case LABELS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3027);
				match(LABELS);
				setState(3028);
				labelSetSpecification();
				}
				break;
			case IS:
			case COLON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3029);
				isOrColon();
				setState(3030);
				labelSetSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelSetSpecificationContext extends ParserRuleContext {
		public List<LabelNameContext> labelName() {
			return getRuleContexts(LabelNameContext.class);
		}
		public LabelNameContext labelName(int i) {
			return getRuleContext(LabelNameContext.class,i);
		}
		public List<TerminalNode> AMPERSAND() { return getTokens(GQL_20240412Parser.AMPERSAND); }
		public TerminalNode AMPERSAND(int i) {
			return getToken(GQL_20240412Parser.AMPERSAND, i);
		}
		public LabelSetSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelSetSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelSetSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelSetSpecification(this);
		}
	}

	public final LabelSetSpecificationContext labelSetSpecification() throws RecognitionException {
		LabelSetSpecificationContext _localctx = new LabelSetSpecificationContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_labelSetSpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			labelName();
			setState(3039);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3035);
					match(AMPERSAND);
					setState(3036);
					labelName();
					}
					} 
				}
				setState(3041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypesSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public PropertyTypeListContext propertyTypeList() {
			return getRuleContext(PropertyTypeListContext.class,0);
		}
		public PropertyTypesSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyTypesSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyTypesSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyTypesSpecification(this);
		}
	}

	public final PropertyTypesSpecificationContext propertyTypesSpecification() throws RecognitionException {
		PropertyTypesSpecificationContext _localctx = new PropertyTypesSpecificationContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_propertyTypesSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			match(LEFT_BRACE);
			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(3043);
				propertyTypeList();
				}
			}

			setState(3046);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypeListContext extends ParserRuleContext {
		public List<PropertyTypeContext> propertyType() {
			return getRuleContexts(PropertyTypeContext.class);
		}
		public PropertyTypeContext propertyType(int i) {
			return getRuleContext(PropertyTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public PropertyTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyTypeList(this);
		}
	}

	public final PropertyTypeListContext propertyTypeList() throws RecognitionException {
		PropertyTypeListContext _localctx = new PropertyTypeListContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_propertyTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			propertyType();
			setState(3053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3049);
				match(COMMA);
				setState(3050);
				propertyType();
				}
				}
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypeContext extends ParserRuleContext {
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public PropertyValueTypeContext propertyValueType() {
			return getRuleContext(PropertyValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public PropertyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyType(this);
		}
	}

	public final PropertyTypeContext propertyType() throws RecognitionException {
		PropertyTypeContext _localctx = new PropertyTypeContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_propertyType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056);
			propertyName();
			setState(3058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(3057);
				typed();
				}
			}

			setState(3060);
			propertyValueType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyValueTypeContext extends ParserRuleContext {
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public PropertyValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyValueType(this);
		}
	}

	public final PropertyValueTypeContext propertyValueType() throws RecognitionException {
		PropertyValueTypeContext _localctx = new PropertyValueTypeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_propertyValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableTypeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQL_20240412Parser.TABLE, 0); }
		public FieldTypesSpecificationContext fieldTypesSpecification() {
			return getRuleContext(FieldTypesSpecificationContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQL_20240412Parser.BINDING, 0); }
		public BindingTableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableType(this);
		}
	}

	public final BindingTableTypeContext bindingTableType() throws RecognitionException {
		BindingTableTypeContext _localctx = new BindingTableTypeContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_bindingTableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(3064);
				match(BINDING);
				}
			}

			setState(3067);
			match(TABLE);
			setState(3068);
			fieldTypesSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueTypeContext extends ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueType; }
	 
		public ValueTypeContext() { }
		public void copyFrom(ValueTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DynamicPropertyValueTypeLabelContext extends ValueTypeContext {
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DynamicPropertyValueTypeLabelContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDynamicPropertyValueTypeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDynamicPropertyValueTypeLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClosedDynamicUnionTypeAtl1Context extends ValueTypeContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ANGLE_BRACKET, 0); }
		public List<ValueTypeContext> valueType() {
			return getRuleContexts(ValueTypeContext.class);
		}
		public ValueTypeContext valueType(int i) {
			return getRuleContext(ValueTypeContext.class,i);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQL_20240412Parser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQL_20240412Parser.VERTICAL_BAR, i);
		}
		public ClosedDynamicUnionTypeAtl1Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterClosedDynamicUnionTypeAtl1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitClosedDynamicUnionTypeAtl1(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClosedDynamicUnionTypeAtl2Context extends ValueTypeContext {
		public List<ValueTypeContext> valueType() {
			return getRuleContexts(ValueTypeContext.class);
		}
		public ValueTypeContext valueType(int i) {
			return getRuleContext(ValueTypeContext.class,i);
		}
		public TerminalNode VERTICAL_BAR() { return getToken(GQL_20240412Parser.VERTICAL_BAR, 0); }
		public ClosedDynamicUnionTypeAtl2Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterClosedDynamicUnionTypeAtl2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitClosedDynamicUnionTypeAtl2(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PathValueTypeLabelContext extends ValueTypeContext {
		public PathValueTypeContext pathValueType() {
			return getRuleContext(PathValueTypeContext.class,0);
		}
		public PathValueTypeLabelContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathValueTypeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathValueTypeLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeAlt3Context extends ValueTypeContext {
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQL_20240412Parser.LEFT_BRACKET, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_BRACKET, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ListValueTypeAlt3Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueTypeAlt3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueTypeAlt3(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeAlt2Context extends ValueTypeContext {
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQL_20240412Parser.LEFT_BRACKET, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_BRACKET, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ListValueTypeAlt2Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueTypeAlt2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueTypeAlt2(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeAlt1Context extends ValueTypeContext {
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ANGLE_BRACKET, 0); }
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQL_20240412Parser.LEFT_BRACKET, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_BRACKET, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ListValueTypeAlt1Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueTypeAlt1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueTypeAlt1(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedTypeLabelContext extends ValueTypeContext {
		public PredefinedTypeContext predefinedType() {
			return getRuleContext(PredefinedTypeContext.class,0);
		}
		public PredefinedTypeLabelContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPredefinedTypeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPredefinedTypeLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RecordTypeLabelContext extends ValueTypeContext {
		public RecordTypeContext recordType() {
			return getRuleContext(RecordTypeContext.class,0);
		}
		public RecordTypeLabelContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRecordTypeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRecordTypeLabel(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OpenDynamicUnionTypeLabelContext extends ValueTypeContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenDynamicUnionTypeLabelContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOpenDynamicUnionTypeLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOpenDynamicUnionTypeLabel(this);
		}
	}

	public final ValueTypeContext valueType() throws RecognitionException {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueTypeContext _localctx = new ValueTypeContext(_ctx, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				_localctx = new PredefinedTypeLabelContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3071);
				predefinedType();
				}
				break;
			case 2:
				{
				_localctx = new PathValueTypeLabelContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3072);
				pathValueType();
				}
				break;
			case 3:
				{
				_localctx = new ListValueTypeAlt1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3073);
				listValueTypeName();
				setState(3074);
				match(LEFT_ANGLE_BRACKET);
				setState(3075);
				valueType(0);
				setState(3076);
				match(RIGHT_ANGLE_BRACKET);
				setState(3081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(3077);
					match(LEFT_BRACKET);
					setState(3078);
					maxLength();
					setState(3079);
					match(RIGHT_BRACKET);
					}
					break;
				}
				setState(3084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(3083);
					notNull();
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new ListValueTypeAlt3Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3086);
				listValueTypeName();
				setState(3091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(3087);
					match(LEFT_BRACKET);
					setState(3088);
					maxLength();
					setState(3089);
					match(RIGHT_BRACKET);
					}
					break;
				}
				setState(3094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(3093);
					notNull();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new RecordTypeLabelContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3096);
				recordType();
				}
				break;
			case 6:
				{
				_localctx = new OpenDynamicUnionTypeLabelContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3097);
				match(ANY);
				setState(3099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(3098);
					match(VALUE);
					}
					break;
				}
				setState(3102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(3101);
					notNull();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new DynamicPropertyValueTypeLabelContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(3104);
					match(ANY);
					}
				}

				setState(3107);
				match(PROPERTY);
				setState(3108);
				match(VALUE);
				setState(3110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(3109);
					notNull();
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new ClosedDynamicUnionTypeAtl1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3112);
				match(ANY);
				setState(3114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(3113);
					match(VALUE);
					}
				}

				setState(3116);
				match(LEFT_ANGLE_BRACKET);
				setState(3117);
				valueType(0);
				setState(3122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==VERTICAL_BAR) {
					{
					{
					setState(3118);
					match(VERTICAL_BAR);
					setState(3119);
					valueType(0);
					}
					}
					setState(3124);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3125);
				match(RIGHT_ANGLE_BRACKET);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3145);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3143);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						_localctx = new ClosedDynamicUnionTypeAtl2Context(new ValueTypeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueType);
						setState(3129);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3130);
						match(VERTICAL_BAR);
						setState(3131);
						valueType(2);
						}
						break;
					case 2:
						{
						_localctx = new ListValueTypeAlt2Context(new ValueTypeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueType);
						setState(3132);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3133);
						listValueTypeName();
						setState(3138);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
						case 1:
							{
							setState(3134);
							match(LEFT_BRACKET);
							setState(3135);
							maxLength();
							setState(3136);
							match(RIGHT_BRACKET);
							}
							break;
						}
						setState(3141);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
						case 1:
							{
							setState(3140);
							notNull();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(3147);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedContext extends ParserRuleContext {
		public TerminalNode DOUBLE_COLON() { return getToken(GQL_20240412Parser.DOUBLE_COLON, 0); }
		public TerminalNode TYPED() { return getToken(GQL_20240412Parser.TYPED, 0); }
		public TypedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTyped(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTyped(this);
		}
	}

	public final TypedContext typed() throws RecognitionException {
		TypedContext _localctx = new TypedContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_typed);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3148);
			_la = _input.LA(1);
			if ( !(_la==TYPED || _la==DOUBLE_COLON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedTypeContext extends ParserRuleContext {
		public BooleanTypeContext booleanType() {
			return getRuleContext(BooleanTypeContext.class,0);
		}
		public CharacterStringTypeContext characterStringType() {
			return getRuleContext(CharacterStringTypeContext.class,0);
		}
		public ByteStringTypeContext byteStringType() {
			return getRuleContext(ByteStringTypeContext.class,0);
		}
		public NumericTypeContext numericType() {
			return getRuleContext(NumericTypeContext.class,0);
		}
		public TemporalTypeContext temporalType() {
			return getRuleContext(TemporalTypeContext.class,0);
		}
		public ReferenceValueTypeContext referenceValueType() {
			return getRuleContext(ReferenceValueTypeContext.class,0);
		}
		public ImmaterialValueTypeContext immaterialValueType() {
			return getRuleContext(ImmaterialValueTypeContext.class,0);
		}
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPredefinedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPredefinedType(this);
		}
	}

	public final PredefinedTypeContext predefinedType() throws RecognitionException {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_predefinedType);
		try {
			setState(3157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOL:
			case BOOLEAN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				booleanType();
				}
				break;
			case CHAR:
			case STRING:
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3151);
				characterStringType();
				}
				break;
			case BINARY:
			case BYTES:
			case VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3152);
				byteStringType();
				}
				break;
			case BIG:
			case BIGINT:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case FLOAT16:
			case FLOAT32:
			case FLOAT64:
			case FLOAT128:
			case FLOAT256:
			case INT:
			case INTEGER:
			case INT8:
			case INTEGER8:
			case INT16:
			case INTEGER16:
			case INT32:
			case INTEGER32:
			case INT64:
			case INTEGER64:
			case INT128:
			case INTEGER128:
			case INT256:
			case INTEGER256:
			case REAL:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case UINT128:
			case UINT256:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3153);
				numericType();
				}
				break;
			case DATE:
			case DURATION:
			case LOCAL:
			case TIME:
			case TIMESTAMP:
			case ZONED:
				enterOuterAlt(_localctx, 5);
				{
				setState(3154);
				temporalType();
				}
				break;
			case ANY:
			case BINDING:
			case DIRECTED:
			case EDGE:
			case GRAPH:
			case NODE:
			case PROPERTY:
			case RELATIONSHIP:
			case TABLE:
			case UNDIRECTED:
			case VERTEX:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 6);
				{
				setState(3155);
				referenceValueType();
				}
				break;
			case NOTHING:
			case NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3156);
				immaterialValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanTypeContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(GQL_20240412Parser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GQL_20240412Parser.BOOLEAN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public BooleanTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBooleanType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBooleanType(this);
		}
	}

	public final BooleanTypeContext booleanType() throws RecognitionException {
		BooleanTypeContext _localctx = new BooleanTypeContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_booleanType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3159);
			_la = _input.LA(1);
			if ( !(_la==BOOL || _la==BOOLEAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(3160);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterStringTypeContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(GQL_20240412Parser.STRING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public MinLengthContext minLength() {
			return getRuleContext(MinLengthContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(GQL_20240412Parser.CHAR, 0); }
		public FixedLengthContext fixedLength() {
			return getRuleContext(FixedLengthContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(GQL_20240412Parser.VARCHAR, 0); }
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterStringType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCharacterStringType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCharacterStringType(this);
		}
	}

	public final CharacterStringTypeContext characterStringType() throws RecognitionException {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_characterStringType);
		try {
			setState(3198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3163);
				match(STRING);
				setState(3173);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(3164);
					match(LEFT_PAREN);
					setState(3168);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						setState(3165);
						minLength();
						setState(3166);
						match(COMMA);
						}
						break;
					}
					setState(3170);
					maxLength();
					setState(3171);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3175);
					notNull();
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3178);
				match(CHAR);
				setState(3183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(3179);
					match(LEFT_PAREN);
					setState(3180);
					fixedLength();
					setState(3181);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(3185);
					notNull();
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(3188);
				match(VARCHAR);
				setState(3193);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(3189);
					match(LEFT_PAREN);
					setState(3190);
					maxLength();
					setState(3191);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3196);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(3195);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ByteStringTypeContext extends ParserRuleContext {
		public TerminalNode BYTES() { return getToken(GQL_20240412Parser.BYTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public MinLengthContext minLength() {
			return getRuleContext(MinLengthContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public TerminalNode BINARY() { return getToken(GQL_20240412Parser.BINARY, 0); }
		public FixedLengthContext fixedLength() {
			return getRuleContext(FixedLengthContext.class,0);
		}
		public TerminalNode VARBINARY() { return getToken(GQL_20240412Parser.VARBINARY, 0); }
		public ByteStringTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_byteStringType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterByteStringType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitByteStringType(this);
		}
	}

	public final ByteStringTypeContext byteStringType() throws RecognitionException {
		ByteStringTypeContext _localctx = new ByteStringTypeContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_byteStringType);
		try {
			setState(3235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BYTES:
				enterOuterAlt(_localctx, 1);
				{
				setState(3200);
				match(BYTES);
				setState(3210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(3201);
					match(LEFT_PAREN);
					setState(3205);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
					case 1:
						{
						setState(3202);
						minLength();
						setState(3203);
						match(COMMA);
						}
						break;
					}
					setState(3207);
					maxLength();
					setState(3208);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(3212);
					notNull();
					}
					break;
				}
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3215);
				match(BINARY);
				setState(3220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(3216);
					match(LEFT_PAREN);
					setState(3217);
					fixedLength();
					setState(3218);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					setState(3222);
					notNull();
					}
					break;
				}
				}
				break;
			case VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3225);
				match(VARBINARY);
				setState(3230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(3226);
					match(LEFT_PAREN);
					setState(3227);
					maxLength();
					setState(3228);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(3232);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MinLengthContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public MinLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMinLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMinLength(this);
		}
	}

	public final MinLengthContext minLength() throws RecognitionException {
		MinLengthContext _localctx = new MinLengthContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_minLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MaxLengthContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public MaxLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMaxLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMaxLength(this);
		}
	}

	public final MaxLengthContext maxLength() throws RecognitionException {
		MaxLengthContext _localctx = new MaxLengthContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_maxLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3239);
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FixedLengthContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public FixedLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixedLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFixedLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFixedLength(this);
		}
	}

	public final FixedLengthContext fixedLength() throws RecognitionException {
		FixedLengthContext _localctx = new FixedLengthContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_fixedLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericTypeContext extends ParserRuleContext {
		public ExactNumericTypeContext exactNumericType() {
			return getRuleContext(ExactNumericTypeContext.class,0);
		}
		public ApproximateNumericTypeContext approximateNumericType() {
			return getRuleContext(ApproximateNumericTypeContext.class,0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericType(this);
		}
	}

	public final NumericTypeContext numericType() throws RecognitionException {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_numericType);
		try {
			setState(3245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case DEC:
			case DECIMAL:
			case INT:
			case INTEGER:
			case INT8:
			case INTEGER8:
			case INT16:
			case INTEGER16:
			case INT32:
			case INTEGER32:
			case INT64:
			case INTEGER64:
			case INT128:
			case INTEGER128:
			case INT256:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case UINT128:
			case UINT256:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3243);
				exactNumericType();
				}
				break;
			case DOUBLE:
			case FLOAT:
			case FLOAT16:
			case FLOAT32:
			case FLOAT64:
			case FLOAT128:
			case FLOAT256:
			case REAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3244);
				approximateNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExactNumericTypeContext extends ParserRuleContext {
		public BinaryExactNumericTypeContext binaryExactNumericType() {
			return getRuleContext(BinaryExactNumericTypeContext.class,0);
		}
		public DecimalExactNumericTypeContext decimalExactNumericType() {
			return getRuleContext(DecimalExactNumericTypeContext.class,0);
		}
		public ExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitExactNumericType(this);
		}
	}

	public final ExactNumericTypeContext exactNumericType() throws RecognitionException {
		ExactNumericTypeContext _localctx = new ExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_exactNumericType);
		try {
			setState(3249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case INT:
			case INTEGER:
			case INT8:
			case INTEGER8:
			case INT16:
			case INTEGER16:
			case INT32:
			case INTEGER32:
			case INT64:
			case INTEGER64:
			case INT128:
			case INTEGER128:
			case INT256:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case UINT128:
			case UINT256:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3247);
				binaryExactNumericType();
				}
				break;
			case DEC:
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3248);
				decimalExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinaryExactNumericTypeContext extends ParserRuleContext {
		public SignedBinaryExactNumericTypeContext signedBinaryExactNumericType() {
			return getRuleContext(SignedBinaryExactNumericTypeContext.class,0);
		}
		public UnsignedBinaryExactNumericTypeContext unsignedBinaryExactNumericType() {
			return getRuleContext(UnsignedBinaryExactNumericTypeContext.class,0);
		}
		public BinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBinaryExactNumericType(this);
		}
	}

	public final BinaryExactNumericTypeContext binaryExactNumericType() throws RecognitionException {
		BinaryExactNumericTypeContext _localctx = new BinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_binaryExactNumericType);
		try {
			setState(3253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case INT:
			case INTEGER:
			case INT8:
			case INTEGER8:
			case INT16:
			case INTEGER16:
			case INT32:
			case INTEGER32:
			case INT64:
			case INTEGER64:
			case INT128:
			case INTEGER128:
			case INT256:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3251);
				signedBinaryExactNumericType();
				}
				break;
			case UBIGINT:
			case UINT:
			case UINT8:
			case UINT16:
			case UINT32:
			case UINT64:
			case UINT128:
			case UINT256:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3252);
				unsignedBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignedBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode INT8() { return getToken(GQL_20240412Parser.INT8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode INT16() { return getToken(GQL_20240412Parser.INT16, 0); }
		public TerminalNode INT32() { return getToken(GQL_20240412Parser.INT32, 0); }
		public TerminalNode INT64() { return getToken(GQL_20240412Parser.INT64, 0); }
		public TerminalNode INT128() { return getToken(GQL_20240412Parser.INT128, 0); }
		public TerminalNode INT256() { return getToken(GQL_20240412Parser.INT256, 0); }
		public TerminalNode SMALLINT() { return getToken(GQL_20240412Parser.SMALLINT, 0); }
		public TerminalNode INT() { return getToken(GQL_20240412Parser.INT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode BIGINT() { return getToken(GQL_20240412Parser.BIGINT, 0); }
		public VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() {
			return getRuleContext(VerboseBinaryExactNumericTypeContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(GQL_20240412Parser.SIGNED, 0); }
		public SignedBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSignedBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSignedBinaryExactNumericType(this);
		}
	}

	public final SignedBinaryExactNumericTypeContext signedBinaryExactNumericType() throws RecognitionException {
		SignedBinaryExactNumericTypeContext _localctx = new SignedBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_signedBinaryExactNumericType);
		int _la;
		try {
			setState(3301);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3255);
				match(INT8);
				setState(3257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(3256);
					notNull();
					}
					break;
				}
				}
				break;
			case INT16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3259);
				match(INT16);
				setState(3261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(3260);
					notNull();
					}
					break;
				}
				}
				break;
			case INT32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3263);
				match(INT32);
				setState(3265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(3264);
					notNull();
					}
					break;
				}
				}
				break;
			case INT64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3267);
				match(INT64);
				setState(3269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
				case 1:
					{
					setState(3268);
					notNull();
					}
					break;
				}
				}
				break;
			case INT128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3271);
				match(INT128);
				setState(3273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3272);
					notNull();
					}
					break;
				}
				}
				break;
			case INT256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3275);
				match(INT256);
				setState(3277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(3276);
					notNull();
					}
					break;
				}
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3279);
				match(SMALLINT);
				setState(3281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					setState(3280);
					notNull();
					}
					break;
				}
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3283);
				match(INT);
				setState(3288);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3284);
					match(LEFT_PAREN);
					setState(3285);
					precision();
					setState(3286);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(3290);
					notNull();
					}
					break;
				}
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3293);
				match(BIGINT);
				setState(3295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(3294);
					notNull();
					}
					break;
				}
				}
				break;
			case BIG:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case SIGNED:
			case SMALL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED) {
					{
					setState(3297);
					match(SIGNED);
					}
				}

				setState(3300);
				verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode UINT8() { return getToken(GQL_20240412Parser.UINT8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode UINT16() { return getToken(GQL_20240412Parser.UINT16, 0); }
		public TerminalNode UINT32() { return getToken(GQL_20240412Parser.UINT32, 0); }
		public TerminalNode UINT64() { return getToken(GQL_20240412Parser.UINT64, 0); }
		public TerminalNode UINT128() { return getToken(GQL_20240412Parser.UINT128, 0); }
		public TerminalNode UINT256() { return getToken(GQL_20240412Parser.UINT256, 0); }
		public TerminalNode USMALLINT() { return getToken(GQL_20240412Parser.USMALLINT, 0); }
		public TerminalNode UINT() { return getToken(GQL_20240412Parser.UINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode UBIGINT() { return getToken(GQL_20240412Parser.UBIGINT, 0); }
		public TerminalNode UNSIGNED() { return getToken(GQL_20240412Parser.UNSIGNED, 0); }
		public VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() {
			return getRuleContext(VerboseBinaryExactNumericTypeContext.class,0);
		}
		public UnsignedBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedBinaryExactNumericType(this);
		}
	}

	public final UnsignedBinaryExactNumericTypeContext unsignedBinaryExactNumericType() throws RecognitionException {
		UnsignedBinaryExactNumericTypeContext _localctx = new UnsignedBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_unsignedBinaryExactNumericType);
		try {
			setState(3347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UINT8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3303);
				match(UINT8);
				setState(3305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3304);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3307);
				match(UINT16);
				setState(3309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(3308);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3311);
				match(UINT32);
				setState(3313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(3312);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3315);
				match(UINT64);
				setState(3317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(3316);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3319);
				match(UINT128);
				setState(3321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3320);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3323);
				match(UINT256);
				setState(3325);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3324);
					notNull();
					}
					break;
				}
				}
				break;
			case USMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3327);
				match(USMALLINT);
				setState(3329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(3328);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3331);
				match(UINT);
				setState(3336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3332);
					match(LEFT_PAREN);
					setState(3333);
					precision();
					setState(3334);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3338);
					notNull();
					}
					break;
				}
				}
				break;
			case UBIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3341);
				match(UBIGINT);
				setState(3343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(3342);
					notNull();
					}
					break;
				}
				}
				break;
			case UNSIGNED:
				enterOuterAlt(_localctx, 10);
				{
				setState(3345);
				match(UNSIGNED);
				setState(3346);
				verboseBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VerboseBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode INTEGER8() { return getToken(GQL_20240412Parser.INTEGER8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode INTEGER16() { return getToken(GQL_20240412Parser.INTEGER16, 0); }
		public TerminalNode INTEGER32() { return getToken(GQL_20240412Parser.INTEGER32, 0); }
		public TerminalNode INTEGER64() { return getToken(GQL_20240412Parser.INTEGER64, 0); }
		public TerminalNode INTEGER128() { return getToken(GQL_20240412Parser.INTEGER128, 0); }
		public TerminalNode INTEGER256() { return getToken(GQL_20240412Parser.INTEGER256, 0); }
		public TerminalNode SMALL() { return getToken(GQL_20240412Parser.SMALL, 0); }
		public TerminalNode INTEGER() { return getToken(GQL_20240412Parser.INTEGER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode BIG() { return getToken(GQL_20240412Parser.BIG, 0); }
		public VerboseBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_verboseBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterVerboseBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitVerboseBinaryExactNumericType(this);
		}
	}

	public final VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() throws RecognitionException {
		VerboseBinaryExactNumericTypeContext _localctx = new VerboseBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_verboseBinaryExactNumericType);
		try {
			setState(3393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3349);
				match(INTEGER8);
				setState(3351);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3350);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3353);
				match(INTEGER16);
				setState(3355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(3354);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3357);
				match(INTEGER32);
				setState(3359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3358);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3361);
				match(INTEGER64);
				setState(3363);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(3362);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3365);
				match(INTEGER128);
				setState(3367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3366);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3369);
				match(INTEGER256);
				setState(3371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(3370);
					notNull();
					}
					break;
				}
				}
				break;
			case SMALL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3373);
				match(SMALL);
				setState(3374);
				match(INTEGER);
				setState(3376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(3375);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 8);
				{
				setState(3378);
				match(INTEGER);
				setState(3383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3379);
					match(LEFT_PAREN);
					setState(3380);
					precision();
					setState(3381);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					setState(3385);
					notNull();
					}
					break;
				}
				}
				break;
			case BIG:
				enterOuterAlt(_localctx, 9);
				{
				setState(3388);
				match(BIG);
				setState(3389);
				match(INTEGER);
				setState(3391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3390);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DecimalExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(GQL_20240412Parser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(GQL_20240412Parser.DEC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DecimalExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDecimalExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDecimalExactNumericType(this);
		}
	}

	public final DecimalExactNumericTypeContext decimalExactNumericType() throws RecognitionException {
		DecimalExactNumericTypeContext _localctx = new DecimalExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_decimalExactNumericType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			_la = _input.LA(1);
			if ( !(_la==DEC || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3396);
				match(LEFT_PAREN);
				setState(3397);
				precision();
				setState(3400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3398);
					match(COMMA);
					setState(3399);
					scale();
					}
				}

				setState(3402);
				match(RIGHT_PAREN);
				setState(3404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3403);
					notNull();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecisionContext extends ParserRuleContext {
		public UnsignedDecimalIntegerContext unsignedDecimalInteger() {
			return getRuleContext(UnsignedDecimalIntegerContext.class,0);
		}
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrecision(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3408);
			unsignedDecimalInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScaleContext extends ParserRuleContext {
		public UnsignedDecimalIntegerContext unsignedDecimalInteger() {
			return getRuleContext(UnsignedDecimalIntegerContext.class,0);
		}
		public ScaleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scale; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterScale(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitScale(this);
		}
	}

	public final ScaleContext scale() throws RecognitionException {
		ScaleContext _localctx = new ScaleContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_scale);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			unsignedDecimalInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApproximateNumericTypeContext extends ParserRuleContext {
		public TerminalNode FLOAT16() { return getToken(GQL_20240412Parser.FLOAT16, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode FLOAT32() { return getToken(GQL_20240412Parser.FLOAT32, 0); }
		public TerminalNode FLOAT64() { return getToken(GQL_20240412Parser.FLOAT64, 0); }
		public TerminalNode FLOAT128() { return getToken(GQL_20240412Parser.FLOAT128, 0); }
		public TerminalNode FLOAT256() { return getToken(GQL_20240412Parser.FLOAT256, 0); }
		public TerminalNode FLOAT() { return getToken(GQL_20240412Parser.FLOAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public TerminalNode REAL() { return getToken(GQL_20240412Parser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(GQL_20240412Parser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(GQL_20240412Parser.PRECISION, 0); }
		public ApproximateNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximateNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterApproximateNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitApproximateNumericType(this);
		}
	}

	public final ApproximateNumericTypeContext approximateNumericType() throws RecognitionException {
		ApproximateNumericTypeContext _localctx = new ApproximateNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_approximateNumericType);
		int _la;
		try {
			setState(3457);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT16:
				enterOuterAlt(_localctx, 1);
				{
				setState(3412);
				match(FLOAT16);
				setState(3414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3413);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT32:
				enterOuterAlt(_localctx, 2);
				{
				setState(3416);
				match(FLOAT32);
				setState(3418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3417);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT64:
				enterOuterAlt(_localctx, 3);
				{
				setState(3420);
				match(FLOAT64);
				setState(3422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3421);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT128:
				enterOuterAlt(_localctx, 4);
				{
				setState(3424);
				match(FLOAT128);
				setState(3426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3425);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT256:
				enterOuterAlt(_localctx, 5);
				{
				setState(3428);
				match(FLOAT256);
				setState(3430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3429);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3432);
				match(FLOAT);
				setState(3441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3433);
					match(LEFT_PAREN);
					setState(3434);
					precision();
					setState(3437);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3435);
						match(COMMA);
						setState(3436);
						scale();
						}
					}

					setState(3439);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3443);
					notNull();
					}
					break;
				}
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3446);
				match(REAL);
				setState(3448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3447);
					notNull();
					}
					break;
				}
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(3450);
				match(DOUBLE);
				setState(3452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3451);
					match(PRECISION);
					}
					break;
				}
				setState(3455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3454);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalTypeContext extends ParserRuleContext {
		public TemporalInstantTypeContext temporalInstantType() {
			return getRuleContext(TemporalInstantTypeContext.class,0);
		}
		public TemporalDurationTypeContext temporalDurationType() {
			return getRuleContext(TemporalDurationTypeContext.class,0);
		}
		public TemporalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTemporalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTemporalType(this);
		}
	}

	public final TemporalTypeContext temporalType() throws RecognitionException {
		TemporalTypeContext _localctx = new TemporalTypeContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_temporalType);
		try {
			setState(3461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case LOCAL:
			case TIME:
			case TIMESTAMP:
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3459);
				temporalInstantType();
				}
				break;
			case DURATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3460);
				temporalDurationType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalInstantTypeContext extends ParserRuleContext {
		public DatetimeTypeContext datetimeType() {
			return getRuleContext(DatetimeTypeContext.class,0);
		}
		public LocaldatetimeTypeContext localdatetimeType() {
			return getRuleContext(LocaldatetimeTypeContext.class,0);
		}
		public DateTypeContext dateType() {
			return getRuleContext(DateTypeContext.class,0);
		}
		public TimeTypeContext timeType() {
			return getRuleContext(TimeTypeContext.class,0);
		}
		public LocaltimeTypeContext localtimeType() {
			return getRuleContext(LocaltimeTypeContext.class,0);
		}
		public TemporalInstantTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalInstantType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTemporalInstantType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTemporalInstantType(this);
		}
	}

	public final TemporalInstantTypeContext temporalInstantType() throws RecognitionException {
		TemporalInstantTypeContext _localctx = new TemporalInstantTypeContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_temporalInstantType);
		try {
			setState(3468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3463);
				datetimeType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3464);
				localdatetimeType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3465);
				dateType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3466);
				timeType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3467);
				localtimeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeTypeContext extends ParserRuleContext {
		public TerminalNode ZONED() { return getToken(GQL_20240412Parser.ZONED, 0); }
		public TerminalNode DATETIME() { return getToken(GQL_20240412Parser.DATETIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(GQL_20240412Parser.TIMESTAMP, 0); }
		public TerminalNode WITH() { return getToken(GQL_20240412Parser.WITH, 0); }
		public TerminalNode TIME() { return getToken(GQL_20240412Parser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public DatetimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeType(this);
		}
	}

	public final DatetimeTypeContext datetimeType() throws RecognitionException {
		DatetimeTypeContext _localctx = new DatetimeTypeContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_datetimeType);
		try {
			setState(3482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3470);
				match(ZONED);
				setState(3471);
				match(DATETIME);
				setState(3473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3472);
					notNull();
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3475);
				match(TIMESTAMP);
				setState(3476);
				match(WITH);
				setState(3477);
				match(TIME);
				setState(3478);
				match(ZONE);
				setState(3480);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(3479);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaldatetimeTypeContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(GQL_20240412Parser.LOCAL, 0); }
		public TerminalNode DATETIME() { return getToken(GQL_20240412Parser.DATETIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(GQL_20240412Parser.TIMESTAMP, 0); }
		public TerminalNode WITHOUT() { return getToken(GQL_20240412Parser.WITHOUT, 0); }
		public TerminalNode TIME() { return getToken(GQL_20240412Parser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public LocaldatetimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localdatetimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLocaldatetimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLocaldatetimeType(this);
		}
	}

	public final LocaldatetimeTypeContext localdatetimeType() throws RecognitionException {
		LocaldatetimeTypeContext _localctx = new LocaldatetimeTypeContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_localdatetimeType);
		try {
			setState(3498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3484);
				match(LOCAL);
				setState(3485);
				match(DATETIME);
				setState(3487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(3486);
					notNull();
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3489);
				match(TIMESTAMP);
				setState(3493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(3490);
					match(WITHOUT);
					setState(3491);
					match(TIME);
					setState(3492);
					match(ZONE);
					}
					break;
				}
				setState(3496);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3495);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateTypeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GQL_20240412Parser.DATE, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDateType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDateType(this);
		}
	}

	public final DateTypeContext dateType() throws RecognitionException {
		DateTypeContext _localctx = new DateTypeContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_dateType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3500);
			match(DATE);
			setState(3502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(3501);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeTypeContext extends ParserRuleContext {
		public TerminalNode ZONED() { return getToken(GQL_20240412Parser.ZONED, 0); }
		public List<TerminalNode> TIME() { return getTokens(GQL_20240412Parser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(GQL_20240412Parser.TIME, i);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode WITH() { return getToken(GQL_20240412Parser.WITH, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public TimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeType(this);
		}
	}

	public final TimeTypeContext timeType() throws RecognitionException {
		TimeTypeContext _localctx = new TimeTypeContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_timeType);
		try {
			setState(3516);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3504);
				match(ZONED);
				setState(3505);
				match(TIME);
				setState(3507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3506);
					notNull();
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3509);
				match(TIME);
				setState(3510);
				match(WITH);
				setState(3511);
				match(TIME);
				setState(3512);
				match(ZONE);
				setState(3514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(3513);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaltimeTypeContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(GQL_20240412Parser.LOCAL, 0); }
		public List<TerminalNode> TIME() { return getTokens(GQL_20240412Parser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(GQL_20240412Parser.TIME, i);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(GQL_20240412Parser.WITHOUT, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public LocaltimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localtimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLocaltimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLocaltimeType(this);
		}
	}

	public final LocaltimeTypeContext localtimeType() throws RecognitionException {
		LocaltimeTypeContext _localctx = new LocaltimeTypeContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_localtimeType);
		try {
			setState(3530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				match(LOCAL);
				setState(3519);
				match(TIME);
				setState(3521);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(3520);
					notNull();
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3523);
				match(TIME);
				setState(3524);
				match(WITHOUT);
				setState(3525);
				match(TIME);
				setState(3526);
				match(ZONE);
				setState(3528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(3527);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalDurationTypeContext extends ParserRuleContext {
		public TerminalNode DURATION() { return getToken(GQL_20240412Parser.DURATION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TemporalDurationQualifierContext temporalDurationQualifier() {
			return getRuleContext(TemporalDurationQualifierContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TemporalDurationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalDurationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTemporalDurationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTemporalDurationType(this);
		}
	}

	public final TemporalDurationTypeContext temporalDurationType() throws RecognitionException {
		TemporalDurationTypeContext _localctx = new TemporalDurationTypeContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_temporalDurationType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(DURATION);
			setState(3533);
			match(LEFT_PAREN);
			setState(3534);
			temporalDurationQualifier();
			setState(3535);
			match(RIGHT_PAREN);
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3536);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalDurationQualifierContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(GQL_20240412Parser.YEAR, 0); }
		public TerminalNode TO() { return getToken(GQL_20240412Parser.TO, 0); }
		public TerminalNode MONTH() { return getToken(GQL_20240412Parser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(GQL_20240412Parser.DAY, 0); }
		public TerminalNode SECOND() { return getToken(GQL_20240412Parser.SECOND, 0); }
		public TemporalDurationQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalDurationQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTemporalDurationQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTemporalDurationQualifier(this);
		}
	}

	public final TemporalDurationQualifierContext temporalDurationQualifier() throws RecognitionException {
		TemporalDurationQualifierContext _localctx = new TemporalDurationQualifierContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_temporalDurationQualifier);
		try {
			setState(3545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3539);
				match(YEAR);
				setState(3540);
				match(TO);
				setState(3541);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3542);
				match(DAY);
				setState(3543);
				match(TO);
				setState(3544);
				match(SECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceValueTypeContext extends ParserRuleContext {
		public GraphReferenceValueTypeContext graphReferenceValueType() {
			return getRuleContext(GraphReferenceValueTypeContext.class,0);
		}
		public BindingTableReferenceValueTypeContext bindingTableReferenceValueType() {
			return getRuleContext(BindingTableReferenceValueTypeContext.class,0);
		}
		public NodeReferenceValueTypeContext nodeReferenceValueType() {
			return getRuleContext(NodeReferenceValueTypeContext.class,0);
		}
		public EdgeReferenceValueTypeContext edgeReferenceValueType() {
			return getRuleContext(EdgeReferenceValueTypeContext.class,0);
		}
		public ReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitReferenceValueType(this);
		}
	}

	public final ReferenceValueTypeContext referenceValueType() throws RecognitionException {
		ReferenceValueTypeContext _localctx = new ReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_referenceValueType);
		try {
			setState(3551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3547);
				graphReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3548);
				bindingTableReferenceValueType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3549);
				nodeReferenceValueType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3550);
				edgeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImmaterialValueTypeContext extends ParserRuleContext {
		public NullTypeContext nullType() {
			return getRuleContext(NullTypeContext.class,0);
		}
		public EmptyTypeContext emptyType() {
			return getRuleContext(EmptyTypeContext.class,0);
		}
		public ImmaterialValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_immaterialValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterImmaterialValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitImmaterialValueType(this);
		}
	}

	public final ImmaterialValueTypeContext immaterialValueType() throws RecognitionException {
		ImmaterialValueTypeContext _localctx = new ImmaterialValueTypeContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_immaterialValueType);
		try {
			setState(3555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3553);
				nullType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3554);
				emptyType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullTypeContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(GQL_20240412Parser.NULL, 0); }
		public NullTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNullType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNullType(this);
		}
	}

	public final NullTypeContext nullType() throws RecognitionException {
		NullTypeContext _localctx = new NullTypeContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_nullType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyTypeContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(GQL_20240412Parser.NULL, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(GQL_20240412Parser.NOTHING, 0); }
		public EmptyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEmptyType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEmptyType(this);
		}
	}

	public final EmptyTypeContext emptyType() throws RecognitionException {
		EmptyTypeContext _localctx = new EmptyTypeContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_emptyType);
		try {
			setState(3562);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3559);
				match(NULL);
				setState(3560);
				notNull();
				}
				break;
			case NOTHING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3561);
				match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphReferenceValueTypeContext extends ParserRuleContext {
		public OpenGraphReferenceValueTypeContext openGraphReferenceValueType() {
			return getRuleContext(OpenGraphReferenceValueTypeContext.class,0);
		}
		public ClosedGraphReferenceValueTypeContext closedGraphReferenceValueType() {
			return getRuleContext(ClosedGraphReferenceValueTypeContext.class,0);
		}
		public GraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphReferenceValueType(this);
		}
	}

	public final GraphReferenceValueTypeContext graphReferenceValueType() throws RecognitionException {
		GraphReferenceValueTypeContext _localctx = new GraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_graphReferenceValueType);
		try {
			setState(3566);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3564);
				openGraphReferenceValueType();
				}
				break;
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3565);
				closedGraphReferenceValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedGraphReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedGraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedGraphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterClosedGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitClosedGraphReferenceValueType(this);
		}
	}

	public final ClosedGraphReferenceValueTypeContext closedGraphReferenceValueType() throws RecognitionException {
		ClosedGraphReferenceValueTypeContext _localctx = new ClosedGraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_closedGraphReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(3568);
				match(PROPERTY);
				}
			}

			setState(3571);
			match(GRAPH);
			setState(3572);
			nestedGraphTypeSpecification();
			setState(3574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3573);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenGraphReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenGraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openGraphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOpenGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOpenGraphReferenceValueType(this);
		}
	}

	public final OpenGraphReferenceValueTypeContext openGraphReferenceValueType() throws RecognitionException {
		OpenGraphReferenceValueTypeContext _localctx = new OpenGraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_openGraphReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			match(ANY);
			setState(3578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(3577);
				match(PROPERTY);
				}
			}

			setState(3580);
			match(GRAPH);
			setState(3582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3581);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableReferenceValueTypeContext extends ParserRuleContext {
		public BindingTableTypeContext bindingTableType() {
			return getRuleContext(BindingTableTypeContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public BindingTableReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableReferenceValueType(this);
		}
	}

	public final BindingTableReferenceValueTypeContext bindingTableReferenceValueType() throws RecognitionException {
		BindingTableReferenceValueTypeContext _localctx = new BindingTableReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_bindingTableReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			bindingTableType();
			setState(3586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3585);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeReferenceValueTypeContext extends ParserRuleContext {
		public OpenNodeReferenceValueTypeContext openNodeReferenceValueType() {
			return getRuleContext(OpenNodeReferenceValueTypeContext.class,0);
		}
		public ClosedNodeReferenceValueTypeContext closedNodeReferenceValueType() {
			return getRuleContext(ClosedNodeReferenceValueTypeContext.class,0);
		}
		public NodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeReferenceValueType(this);
		}
	}

	public final NodeReferenceValueTypeContext nodeReferenceValueType() throws RecognitionException {
		NodeReferenceValueTypeContext _localctx = new NodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_nodeReferenceValueType);
		try {
			setState(3590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3588);
				openNodeReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3589);
				closedNodeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedNodeReferenceValueTypeContext extends ParserRuleContext {
		public NodeTypeSpecificationContext nodeTypeSpecification() {
			return getRuleContext(NodeTypeSpecificationContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedNodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedNodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterClosedNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitClosedNodeReferenceValueType(this);
		}
	}

	public final ClosedNodeReferenceValueTypeContext closedNodeReferenceValueType() throws RecognitionException {
		ClosedNodeReferenceValueTypeContext _localctx = new ClosedNodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_closedNodeReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			nodeTypeSpecification();
			setState(3594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3593);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenNodeReferenceValueTypeContext extends ParserRuleContext {
		public NodeSynonymContext nodeSynonym() {
			return getRuleContext(NodeSynonymContext.class,0);
		}
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenNodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openNodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOpenNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOpenNodeReferenceValueType(this);
		}
	}

	public final OpenNodeReferenceValueTypeContext openNodeReferenceValueType() throws RecognitionException {
		OpenNodeReferenceValueTypeContext _localctx = new OpenNodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_openNodeReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY) {
				{
				setState(3596);
				match(ANY);
				}
			}

			setState(3599);
			nodeSynonym();
			setState(3601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3600);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeReferenceValueTypeContext extends ParserRuleContext {
		public OpenEdgeReferenceValueTypeContext openEdgeReferenceValueType() {
			return getRuleContext(OpenEdgeReferenceValueTypeContext.class,0);
		}
		public ClosedEdgeReferenceValueTypeContext closedEdgeReferenceValueType() {
			return getRuleContext(ClosedEdgeReferenceValueTypeContext.class,0);
		}
		public EdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeReferenceValueType(this);
		}
	}

	public final EdgeReferenceValueTypeContext edgeReferenceValueType() throws RecognitionException {
		EdgeReferenceValueTypeContext _localctx = new EdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_edgeReferenceValueType);
		try {
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3603);
				openEdgeReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3604);
				closedEdgeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedEdgeReferenceValueTypeContext extends ParserRuleContext {
		public EdgeTypeSpecificationContext edgeTypeSpecification() {
			return getRuleContext(EdgeTypeSpecificationContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedEdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedEdgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterClosedEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitClosedEdgeReferenceValueType(this);
		}
	}

	public final ClosedEdgeReferenceValueTypeContext closedEdgeReferenceValueType() throws RecognitionException {
		ClosedEdgeReferenceValueTypeContext _localctx = new ClosedEdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_closedEdgeReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			edgeTypeSpecification();
			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3608);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenEdgeReferenceValueTypeContext extends ParserRuleContext {
		public EdgeSynonymContext edgeSynonym() {
			return getRuleContext(EdgeSynonymContext.class,0);
		}
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenEdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openEdgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterOpenEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitOpenEdgeReferenceValueType(this);
		}
	}

	public final OpenEdgeReferenceValueTypeContext openEdgeReferenceValueType() throws RecognitionException {
		OpenEdgeReferenceValueTypeContext _localctx = new OpenEdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_openEdgeReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY) {
				{
				setState(3611);
				match(ANY);
				}
			}

			setState(3614);
			edgeSynonym();
			setState(3616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(3615);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueTypeContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQL_20240412Parser.PATH, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public PathValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathValueType(this);
		}
	}

	public final PathValueTypeContext pathValueType() throws RecognitionException {
		PathValueTypeContext _localctx = new PathValueTypeContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_pathValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			match(PATH);
			setState(3620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3619);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeNameContext extends ParserRuleContext {
		public ListValueTypeNameSynonymContext listValueTypeNameSynonym() {
			return getRuleContext(ListValueTypeNameSynonymContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(GQL_20240412Parser.GROUP, 0); }
		public ListValueTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueTypeName(this);
		}
	}

	public final ListValueTypeNameContext listValueTypeName() throws RecognitionException {
		ListValueTypeNameContext _localctx = new ListValueTypeNameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_listValueTypeName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3622);
				match(GROUP);
				}
			}

			setState(3625);
			listValueTypeNameSynonym();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeNameSynonymContext extends ParserRuleContext {
		public TerminalNode LIST() { return getToken(GQL_20240412Parser.LIST, 0); }
		public TerminalNode ARRAY() { return getToken(GQL_20240412Parser.ARRAY, 0); }
		public ListValueTypeNameSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueTypeNameSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueTypeNameSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueTypeNameSynonym(this);
		}
	}

	public final ListValueTypeNameSynonymContext listValueTypeNameSynonym() throws RecognitionException {
		ListValueTypeNameSynonymContext _localctx = new ListValueTypeNameSynonymContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_listValueTypeNameSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3627);
			_la = _input.LA(1);
			if ( !(_la==ARRAY || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordTypeContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(GQL_20240412Parser.RECORD, 0); }
		public TerminalNode ANY() { return getToken(GQL_20240412Parser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public FieldTypesSpecificationContext fieldTypesSpecification() {
			return getRuleContext(FieldTypesSpecificationContext.class,0);
		}
		public RecordTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRecordType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRecordType(this);
		}
	}

	public final RecordTypeContext recordType() throws RecognitionException {
		RecordTypeContext _localctx = new RecordTypeContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_recordType);
		int _la;
		try {
			setState(3643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(3629);
					match(ANY);
					}
				}

				setState(3632);
				match(RECORD);
				setState(3634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(3633);
					notNull();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECORD) {
					{
					setState(3636);
					match(RECORD);
					}
				}

				setState(3639);
				fieldTypesSpecification();
				setState(3641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3640);
					notNull();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypesSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public FieldTypeListContext fieldTypeList() {
			return getRuleContext(FieldTypeListContext.class,0);
		}
		public FieldTypesSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTypesSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldTypesSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldTypesSpecification(this);
		}
	}

	public final FieldTypesSpecificationContext fieldTypesSpecification() throws RecognitionException {
		FieldTypesSpecificationContext _localctx = new FieldTypesSpecificationContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_fieldTypesSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(LEFT_BRACE);
			setState(3647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(3646);
				fieldTypeList();
				}
			}

			setState(3649);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypeListContext extends ParserRuleContext {
		public List<FieldTypeContext> fieldType() {
			return getRuleContexts(FieldTypeContext.class);
		}
		public FieldTypeContext fieldType(int i) {
			return getRuleContext(FieldTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public FieldTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldTypeList(this);
		}
	}

	public final FieldTypeListContext fieldTypeList() throws RecognitionException {
		FieldTypeListContext _localctx = new FieldTypeListContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_fieldTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			fieldType();
			setState(3656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3652);
				match(COMMA);
				setState(3653);
				fieldType();
				}
				}
				setState(3658);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotNullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode NULL() { return getToken(GQL_20240412Parser.NULL, 0); }
		public NotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNotNull(this);
		}
	}

	public final NotNullContext notNull() throws RecognitionException {
		NotNullContext _localctx = new NotNullContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_notNull);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			match(NOT);
			setState(3660);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypeContext extends ParserRuleContext {
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldType(this);
		}
	}

	public final FieldTypeContext fieldType() throws RecognitionException {
		FieldTypeContext _localctx = new FieldTypeContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_fieldType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			fieldName();
			setState(3664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(3663);
				typed();
				}
			}

			setState(3666);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchConditionContext extends ParserRuleContext {
		public BooleanValueExpressionContext booleanValueExpression() {
			return getRuleContext(BooleanValueExpressionContext.class,0);
		}
		public SearchConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSearchCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSearchCondition(this);
		}
	}

	public final SearchConditionContext searchCondition() throws RecognitionException {
		SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_searchCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			booleanValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public ExistsPredicateContext existsPredicate() {
			return getRuleContext(ExistsPredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public ValueTypePredicateContext valueTypePredicate() {
			return getRuleContext(ValueTypePredicateContext.class,0);
		}
		public DirectedPredicateContext directedPredicate() {
			return getRuleContext(DirectedPredicateContext.class,0);
		}
		public LabeledPredicateContext labeledPredicate() {
			return getRuleContext(LabeledPredicateContext.class,0);
		}
		public SourceDestinationPredicateContext sourceDestinationPredicate() {
			return getRuleContext(SourceDestinationPredicateContext.class,0);
		}
		public All_differentPredicateContext all_differentPredicate() {
			return getRuleContext(All_differentPredicateContext.class,0);
		}
		public SamePredicateContext samePredicate() {
			return getRuleContext(SamePredicateContext.class,0);
		}
		public Property_existsPredicateContext property_existsPredicate() {
			return getRuleContext(Property_existsPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_predicate);
		try {
			setState(3679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3670);
				existsPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3671);
				nullPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3672);
				valueTypePredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3673);
				directedPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3674);
				labeledPredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3675);
				sourceDestinationPredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3676);
				all_differentPredicate();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3677);
				samePredicate();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3678);
				property_existsPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonPredicatePart2Context extends ParserRuleContext {
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ComparisonPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterComparisonPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitComparisonPredicatePart2(this);
		}
	}

	public final ComparisonPredicatePart2Context comparisonPredicatePart2() throws RecognitionException {
		ComparisonPredicatePart2Context _localctx = new ComparisonPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 776, RULE_comparisonPredicatePart2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			compOp();
			setState(3682);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.EQUALS_OPERATOR, 0); }
		public TerminalNode NOT_EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.NOT_EQUALS_OPERATOR, 0); }
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.LESS_THAN_OR_EQUALS_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OPERATOR() { return getToken(GQL_20240412Parser.GREATER_THAN_OR_EQUALS_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCompOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCompOp(this);
		}
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3684);
			_la = _input.LA(1);
			if ( !((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & 142807664897L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExistsPredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(GQL_20240412Parser.EXISTS, 0); }
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public GraphPatternContext graphPattern() {
			return getRuleContext(GraphPatternContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public MatchStatementBlockContext matchStatementBlock() {
			return getRuleContext(MatchStatementBlockContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public ExistsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterExistsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitExistsPredicate(this);
		}
	}

	public final ExistsPredicateContext existsPredicate() throws RecognitionException {
		ExistsPredicateContext _localctx = new ExistsPredicateContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			match(EXISTS);
			setState(3704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3687);
				match(LEFT_BRACE);
				setState(3688);
				graphPattern();
				setState(3689);
				match(RIGHT_BRACE);
				}
				break;
			case 2:
				{
				setState(3691);
				match(LEFT_PAREN);
				setState(3692);
				graphPattern();
				setState(3693);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(3695);
				match(LEFT_BRACE);
				setState(3696);
				matchStatementBlock();
				setState(3697);
				match(RIGHT_BRACE);
				}
				break;
			case 4:
				{
				setState(3699);
				match(LEFT_PAREN);
				setState(3700);
				matchStatementBlock();
				setState(3701);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				setState(3703);
				nestedQuerySpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullPredicateContext extends ParserRuleContext {
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public NullPredicatePart2Context nullPredicatePart2() {
			return getRuleContext(NullPredicatePart2Context.class,0);
		}
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNullPredicate(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_nullPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			valueExpressionPrimary(0);
			setState(3707);
			nullPredicatePart2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullPredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode NULL() { return getToken(GQL_20240412Parser.NULL, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public NullPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNullPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNullPredicatePart2(this);
		}
	}

	public final NullPredicatePart2Context nullPredicatePart2() throws RecognitionException {
		NullPredicatePart2Context _localctx = new NullPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 784, RULE_nullPredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(IS);
			setState(3711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3710);
				match(NOT);
				}
			}

			setState(3713);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueTypePredicateContext extends ParserRuleContext {
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public ValueTypePredicatePart2Context valueTypePredicatePart2() {
			return getRuleContext(ValueTypePredicatePart2Context.class,0);
		}
		public ValueTypePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueTypePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueTypePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueTypePredicate(this);
		}
	}

	public final ValueTypePredicateContext valueTypePredicate() throws RecognitionException {
		ValueTypePredicateContext _localctx = new ValueTypePredicateContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_valueTypePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			valueExpressionPrimary(0);
			setState(3716);
			valueTypePredicatePart2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueTypePredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public ValueTypePredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueTypePredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueTypePredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueTypePredicatePart2(this);
		}
	}

	public final ValueTypePredicatePart2Context valueTypePredicatePart2() throws RecognitionException {
		ValueTypePredicatePart2Context _localctx = new ValueTypePredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 788, RULE_valueTypePredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3718);
			match(IS);
			setState(3720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3719);
				match(NOT);
				}
			}

			setState(3722);
			typed();
			setState(3723);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NormalizedPredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode NORMALIZED() { return getToken(GQL_20240412Parser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public NormalFormContext normalForm() {
			return getRuleContext(NormalFormContext.class,0);
		}
		public NormalizedPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalizedPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNormalizedPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNormalizedPredicatePart2(this);
		}
	}

	public final NormalizedPredicatePart2Context normalizedPredicatePart2() throws RecognitionException {
		NormalizedPredicatePart2Context _localctx = new NormalizedPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 790, RULE_normalizedPredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			match(IS);
			setState(3727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3726);
				match(NOT);
				}
			}

			setState(3730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 15L) != 0) {
				{
				setState(3729);
				normalForm();
				}
			}

			setState(3732);
			match(NORMALIZED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectedPredicateContext extends ParserRuleContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public DirectedPredicatePart2Context directedPredicatePart2() {
			return getRuleContext(DirectedPredicatePart2Context.class,0);
		}
		public DirectedPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directedPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDirectedPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDirectedPredicate(this);
		}
	}

	public final DirectedPredicateContext directedPredicate() throws RecognitionException {
		DirectedPredicateContext _localctx = new DirectedPredicateContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_directedPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3734);
			elementVariableReference();
			setState(3735);
			directedPredicatePart2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectedPredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode DIRECTED() { return getToken(GQL_20240412Parser.DIRECTED, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public DirectedPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directedPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDirectedPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDirectedPredicatePart2(this);
		}
	}

	public final DirectedPredicatePart2Context directedPredicatePart2() throws RecognitionException {
		DirectedPredicatePart2Context _localctx = new DirectedPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 794, RULE_directedPredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3737);
			match(IS);
			setState(3739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3738);
				match(NOT);
				}
			}

			setState(3741);
			match(DIRECTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabeledPredicateContext extends ParserRuleContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public LabeledPredicatePart2Context labeledPredicatePart2() {
			return getRuleContext(LabeledPredicatePart2Context.class,0);
		}
		public LabeledPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabeledPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabeledPredicate(this);
		}
	}

	public final LabeledPredicateContext labeledPredicate() throws RecognitionException {
		LabeledPredicateContext _localctx = new LabeledPredicateContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_labeledPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			elementVariableReference();
			setState(3744);
			labeledPredicatePart2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabeledPredicatePart2Context extends ParserRuleContext {
		public IsLabeledOrColonContext isLabeledOrColon() {
			return getRuleContext(IsLabeledOrColonContext.class,0);
		}
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public LabeledPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabeledPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabeledPredicatePart2(this);
		}
	}

	public final LabeledPredicatePart2Context labeledPredicatePart2() throws RecognitionException {
		LabeledPredicatePart2Context _localctx = new LabeledPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 798, RULE_labeledPredicatePart2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3746);
			isLabeledOrColon();
			setState(3747);
			labelExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsLabeledOrColonContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode LABELED() { return getToken(GQL_20240412Parser.LABELED, 0); }
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public TerminalNode COLON() { return getToken(GQL_20240412Parser.COLON, 0); }
		public IsLabeledOrColonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isLabeledOrColon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIsLabeledOrColon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIsLabeledOrColon(this);
		}
	}

	public final IsLabeledOrColonContext isLabeledOrColon() throws RecognitionException {
		IsLabeledOrColonContext _localctx = new IsLabeledOrColonContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_isLabeledOrColon);
		int _la;
		try {
			setState(3755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3749);
				match(IS);
				setState(3751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3750);
					match(NOT);
					}
				}

				setState(3753);
				match(LABELED);
				}
				break;
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(3754);
				match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceDestinationPredicateContext extends ParserRuleContext {
		public NodeReferenceContext nodeReference() {
			return getRuleContext(NodeReferenceContext.class,0);
		}
		public SourcePredicatePart2Context sourcePredicatePart2() {
			return getRuleContext(SourcePredicatePart2Context.class,0);
		}
		public DestinationPredicatePart2Context destinationPredicatePart2() {
			return getRuleContext(DestinationPredicatePart2Context.class,0);
		}
		public SourceDestinationPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceDestinationPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSourceDestinationPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSourceDestinationPredicate(this);
		}
	}

	public final SourceDestinationPredicateContext sourceDestinationPredicate() throws RecognitionException {
		SourceDestinationPredicateContext _localctx = new SourceDestinationPredicateContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_sourceDestinationPredicate);
		try {
			setState(3763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3757);
				nodeReference();
				setState(3758);
				sourcePredicatePart2();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3760);
				nodeReference();
				setState(3761);
				destinationPredicatePart2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeReferenceContext extends ParserRuleContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public NodeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeReference(this);
		}
	}

	public final NodeReferenceContext nodeReference() throws RecognitionException {
		NodeReferenceContext _localctx = new NodeReferenceContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_nodeReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			elementVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourcePredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode SOURCE() { return getToken(GQL_20240412Parser.SOURCE, 0); }
		public TerminalNode OF() { return getToken(GQL_20240412Parser.OF, 0); }
		public EdgeReferenceContext edgeReference() {
			return getRuleContext(EdgeReferenceContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public SourcePredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourcePredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSourcePredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSourcePredicatePart2(this);
		}
	}

	public final SourcePredicatePart2Context sourcePredicatePart2() throws RecognitionException {
		SourcePredicatePart2Context _localctx = new SourcePredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 806, RULE_sourcePredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3767);
			match(IS);
			setState(3769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3768);
				match(NOT);
				}
			}

			setState(3771);
			match(SOURCE);
			setState(3772);
			match(OF);
			setState(3773);
			edgeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationPredicatePart2Context extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TerminalNode DESTINATION() { return getToken(GQL_20240412Parser.DESTINATION, 0); }
		public TerminalNode OF() { return getToken(GQL_20240412Parser.OF, 0); }
		public EdgeReferenceContext edgeReference() {
			return getRuleContext(EdgeReferenceContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public DestinationPredicatePart2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destinationPredicatePart2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDestinationPredicatePart2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDestinationPredicatePart2(this);
		}
	}

	public final DestinationPredicatePart2Context destinationPredicatePart2() throws RecognitionException {
		DestinationPredicatePart2Context _localctx = new DestinationPredicatePart2Context(_ctx, getState());
		enterRule(_localctx, 808, RULE_destinationPredicatePart2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			match(IS);
			setState(3777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3776);
				match(NOT);
				}
			}

			setState(3779);
			match(DESTINATION);
			setState(3780);
			match(OF);
			setState(3781);
			edgeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeReferenceContext extends ParserRuleContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public EdgeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeReference(this);
		}
	}

	public final EdgeReferenceContext edgeReference() throws RecognitionException {
		EdgeReferenceContext _localctx = new EdgeReferenceContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_edgeReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3783);
			elementVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_differentPredicateContext extends ParserRuleContext {
		public TerminalNode ALL_DIFFERENT() { return getToken(GQL_20240412Parser.ALL_DIFFERENT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public List<ElementVariableReferenceContext> elementVariableReference() {
			return getRuleContexts(ElementVariableReferenceContext.class);
		}
		public ElementVariableReferenceContext elementVariableReference(int i) {
			return getRuleContext(ElementVariableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public All_differentPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_differentPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAll_differentPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAll_differentPredicate(this);
		}
	}

	public final All_differentPredicateContext all_differentPredicate() throws RecognitionException {
		All_differentPredicateContext _localctx = new All_differentPredicateContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_all_differentPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(ALL_DIFFERENT);
			setState(3786);
			match(LEFT_PAREN);
			setState(3787);
			elementVariableReference();
			setState(3788);
			match(COMMA);
			setState(3789);
			elementVariableReference();
			setState(3794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3790);
				match(COMMA);
				setState(3791);
				elementVariableReference();
				}
				}
				setState(3796);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3797);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SamePredicateContext extends ParserRuleContext {
		public TerminalNode SAME() { return getToken(GQL_20240412Parser.SAME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public List<ElementVariableReferenceContext> elementVariableReference() {
			return getRuleContexts(ElementVariableReferenceContext.class);
		}
		public ElementVariableReferenceContext elementVariableReference(int i) {
			return getRuleContext(ElementVariableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public SamePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_samePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSamePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSamePredicate(this);
		}
	}

	public final SamePredicateContext samePredicate() throws RecognitionException {
		SamePredicateContext _localctx = new SamePredicateContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_samePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(SAME);
			setState(3800);
			match(LEFT_PAREN);
			setState(3801);
			elementVariableReference();
			setState(3802);
			match(COMMA);
			setState(3803);
			elementVariableReference();
			setState(3808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3804);
				match(COMMA);
				setState(3805);
				elementVariableReference();
				}
				}
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3811);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Property_existsPredicateContext extends ParserRuleContext {
		public TerminalNode PROPERTY_EXISTS() { return getToken(GQL_20240412Parser.PROPERTY_EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public Property_existsPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property_existsPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProperty_existsPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProperty_existsPredicate(this);
		}
	}

	public final Property_existsPredicateContext property_existsPredicate() throws RecognitionException {
		Property_existsPredicateContext _localctx = new Property_existsPredicateContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_property_existsPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813);
			match(PROPERTY_EXISTS);
			setState(3814);
			match(LEFT_PAREN);
			setState(3815);
			elementVariableReference();
			setState(3816);
			match(COMMA);
			setState(3817);
			propertyName();
			setState(3818);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }
	 
		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConjunctiveExprAltContext extends ValueExpressionContext {
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(GQL_20240412Parser.AND, 0); }
		public ConjunctiveExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterConjunctiveExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitConjunctiveExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PropertyGraphExprAltContext extends ValueExpressionContext {
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public PropertyGraphExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyGraphExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyGraphExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MultDivExprAltContext extends ValueExpressionContext {
		public Token operator;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(GQL_20240412Parser.SOLIDUS, 0); }
		public MultDivExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterMultDivExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitMultDivExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableExprAltContext extends ValueExpressionContext {
		public TerminalNode TABLE() { return getToken(GQL_20240412Parser.TABLE, 0); }
		public BindingTableExpressionContext bindingTableExpression() {
			return getRuleContext(BindingTableExpressionContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQL_20240412Parser.BINDING, 0); }
		public BindingTableExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SignedExprAltContext extends ValueExpressionContext {
		public Token sign;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(GQL_20240412Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQL_20240412Parser.MINUS_SIGN, 0); }
		public SignedExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSignedExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSignedExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IsNotExprAltContext extends ValueExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(GQL_20240412Parser.IS, 0); }
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public IsNotExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIsNotExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIsNotExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NormalizedPredicateExprAltContext extends ValueExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public NormalizedPredicatePart2Context normalizedPredicatePart2() {
			return getRuleContext(NormalizedPredicatePart2Context.class,0);
		}
		public NormalizedPredicateExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNormalizedPredicateExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNormalizedPredicateExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NotExprAltContext extends ValueExpressionContext {
		public TerminalNode NOT() { return getToken(GQL_20240412Parser.NOT, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public NotExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNotExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNotExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ValueFunctionExprAltContext extends ValueExpressionContext {
		public ValueFunctionContext valueFunction() {
			return getRuleContext(ValueFunctionContext.class,0);
		}
		public ValueFunctionExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueFunctionExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueFunctionExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConcatenationExprAltContext extends ValueExpressionContext {
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(GQL_20240412Parser.CONCATENATION_OPERATOR, 0); }
		public ConcatenationExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterConcatenationExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitConcatenationExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DisjunctiveExprAltContext extends ValueExpressionContext {
		public Token operator;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode OR() { return getToken(GQL_20240412Parser.OR, 0); }
		public TerminalNode XOR() { return getToken(GQL_20240412Parser.XOR, 0); }
		public DisjunctiveExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDisjunctiveExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDisjunctiveExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonExprAltContext extends ValueExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ComparisonPredicatePart2Context comparisonPredicatePart2() {
			return getRuleContext(ComparisonPredicatePart2Context.class,0);
		}
		public ComparisonExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterComparisonExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitComparisonExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExprAltContext extends ValueExpressionContext {
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public PrimaryExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPrimaryExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPrimaryExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AddSubtractExprAltContext extends ValueExpressionContext {
		public Token operator;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode PLUS_SIGN() { return getToken(GQL_20240412Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQL_20240412Parser.MINUS_SIGN, 0); }
		public AddSubtractExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAddSubtractExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAddSubtractExprAlt(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExprAltContext extends ValueExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprAltContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPredicateExprAlt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPredicateExprAlt(this);
		}
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 818;
		enterRecursionRule(_localctx, 818, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				_localctx = new SignedExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3821);
				((SignedExprAltContext)_localctx).sign = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MINUS_SIGN || _la==PLUS_SIGN) ) {
					((SignedExprAltContext)_localctx).sign = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3822);
				valueExpression(15);
				}
				break;
			case 2:
				{
				_localctx = new NotExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3823);
				match(NOT);
				setState(3824);
				valueExpression(11);
				}
				break;
			case 3:
				{
				_localctx = new PredicateExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3825);
				predicate();
				}
				break;
			case 4:
				{
				_localctx = new PropertyGraphExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(3826);
					match(PROPERTY);
					}
				}

				setState(3829);
				match(GRAPH);
				setState(3830);
				graphExpression();
				}
				break;
			case 5:
				{
				_localctx = new BindingTableExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINDING) {
					{
					setState(3831);
					match(BINDING);
					}
				}

				setState(3834);
				match(TABLE);
				setState(3835);
				bindingTableExpression();
				}
				break;
			case 6:
				{
				_localctx = new ValueFunctionExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3836);
				valueFunction();
				}
				break;
			case 7:
				{
				_localctx = new PrimaryExprAltContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3837);
				valueExpressionPrimary(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3867);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3865);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
					case 1:
						{
						_localctx = new MultDivExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3840);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(3841);
						((MultDivExprAltContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((MultDivExprAltContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3842);
						valueExpression(15);
						}
						break;
					case 2:
						{
						_localctx = new AddSubtractExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3843);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(3844);
						((AddSubtractExprAltContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS_SIGN || _la==PLUS_SIGN) ) {
							((AddSubtractExprAltContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3845);
						valueExpression(14);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3846);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3847);
						match(CONCATENATION_OPERATOR);
						setState(3848);
						valueExpression(13);
						}
						break;
					case 4:
						{
						_localctx = new ConjunctiveExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3849);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3850);
						match(AND);
						setState(3851);
						valueExpression(10);
						}
						break;
					case 5:
						{
						_localctx = new DisjunctiveExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3852);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3853);
						((DisjunctiveExprAltContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==OR || _la==XOR) ) {
							((DisjunctiveExprAltContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3854);
						valueExpression(9);
						}
						break;
					case 6:
						{
						_localctx = new IsNotExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3855);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3856);
						match(IS);
						setState(3858);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3857);
							match(NOT);
							}
						}

						setState(3860);
						truthValue();
						}
						break;
					case 7:
						{
						_localctx = new ComparisonExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3861);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3862);
						comparisonPredicatePart2();
						}
						break;
					case 8:
						{
						_localctx = new NormalizedPredicateExprAltContext(new ValueExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3863);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3864);
						normalizedPredicatePart2();
						}
						break;
					}
					} 
				}
				setState(3869);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueFunctionContext extends ParserRuleContext {
		public NumericValueFunctionContext numericValueFunction() {
			return getRuleContext(NumericValueFunctionContext.class,0);
		}
		public DatetimeSubtractionContext datetimeSubtraction() {
			return getRuleContext(DatetimeSubtractionContext.class,0);
		}
		public DatetimeValueFunctionContext datetimeValueFunction() {
			return getRuleContext(DatetimeValueFunctionContext.class,0);
		}
		public DurationValueFunctionContext durationValueFunction() {
			return getRuleContext(DurationValueFunctionContext.class,0);
		}
		public CharacterOrByteStringFunctionContext characterOrByteStringFunction() {
			return getRuleContext(CharacterOrByteStringFunctionContext.class,0);
		}
		public ListValueFunctionContext listValueFunction() {
			return getRuleContext(ListValueFunctionContext.class,0);
		}
		public ValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueFunction(this);
		}
	}

	public final ValueFunctionContext valueFunction() throws RecognitionException {
		ValueFunctionContext _localctx = new ValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_valueFunction);
		try {
			setState(3876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3870);
				numericValueFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3871);
				datetimeSubtraction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3872);
				datetimeValueFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3873);
				durationValueFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3874);
				characterOrByteStringFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3875);
				listValueFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public BooleanValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBooleanValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBooleanValueExpression(this);
		}
	}

	public final BooleanValueExpressionContext booleanValueExpression() throws RecognitionException {
		BooleanValueExpressionContext _localctx = new BooleanValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_booleanValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterOrByteStringFunctionContext extends ParserRuleContext {
		public SubCharacterOrByteStringContext subCharacterOrByteString() {
			return getRuleContext(SubCharacterOrByteStringContext.class,0);
		}
		public TrimSingleCharacterOrByteStringContext trimSingleCharacterOrByteString() {
			return getRuleContext(TrimSingleCharacterOrByteStringContext.class,0);
		}
		public FoldCharacterStringContext foldCharacterString() {
			return getRuleContext(FoldCharacterStringContext.class,0);
		}
		public TrimMultiCharacterCharacterStringContext trimMultiCharacterCharacterString() {
			return getRuleContext(TrimMultiCharacterCharacterStringContext.class,0);
		}
		public NormalizeCharacterStringContext normalizeCharacterString() {
			return getRuleContext(NormalizeCharacterStringContext.class,0);
		}
		public CharacterOrByteStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterOrByteStringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCharacterOrByteStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCharacterOrByteStringFunction(this);
		}
	}

	public final CharacterOrByteStringFunctionContext characterOrByteStringFunction() throws RecognitionException {
		CharacterOrByteStringFunctionContext _localctx = new CharacterOrByteStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_characterOrByteStringFunction);
		try {
			setState(3885);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3880);
				subCharacterOrByteString();
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 2);
				{
				setState(3881);
				trimSingleCharacterOrByteString();
				}
				break;
			case LOWER:
			case UPPER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3882);
				foldCharacterString();
				}
				break;
			case BTRIM:
			case LTRIM:
			case RTRIM:
				enterOuterAlt(_localctx, 4);
				{
				setState(3883);
				trimMultiCharacterCharacterString();
				}
				break;
			case NORMALIZE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3884);
				normalizeCharacterString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubCharacterOrByteStringContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public StringLengthContext stringLength() {
			return getRuleContext(StringLengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT() { return getToken(GQL_20240412Parser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GQL_20240412Parser.RIGHT, 0); }
		public SubCharacterOrByteStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subCharacterOrByteString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSubCharacterOrByteString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSubCharacterOrByteString(this);
		}
	}

	public final SubCharacterOrByteStringContext subCharacterOrByteString() throws RecognitionException {
		SubCharacterOrByteStringContext _localctx = new SubCharacterOrByteStringContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_subCharacterOrByteString);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3888);
			match(LEFT_PAREN);
			setState(3889);
			valueExpression(0);
			setState(3890);
			match(COMMA);
			setState(3891);
			stringLength();
			setState(3892);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimSingleCharacterOrByteStringContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(GQL_20240412Parser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TrimOperandsContext trimOperands() {
			return getRuleContext(TrimOperandsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TrimSingleCharacterOrByteStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimSingleCharacterOrByteString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimSingleCharacterOrByteString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimSingleCharacterOrByteString(this);
		}
	}

	public final TrimSingleCharacterOrByteStringContext trimSingleCharacterOrByteString() throws RecognitionException {
		TrimSingleCharacterOrByteStringContext _localctx = new TrimSingleCharacterOrByteStringContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_trimSingleCharacterOrByteString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			match(TRIM);
			setState(3895);
			match(LEFT_PAREN);
			setState(3896);
			trimOperands();
			setState(3897);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FoldCharacterStringContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode UPPER() { return getToken(GQL_20240412Parser.UPPER, 0); }
		public TerminalNode LOWER() { return getToken(GQL_20240412Parser.LOWER, 0); }
		public FoldCharacterStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foldCharacterString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFoldCharacterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFoldCharacterString(this);
		}
	}

	public final FoldCharacterStringContext foldCharacterString() throws RecognitionException {
		FoldCharacterStringContext _localctx = new FoldCharacterStringContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_foldCharacterString);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3899);
			_la = _input.LA(1);
			if ( !(_la==LOWER || _la==UPPER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3900);
			match(LEFT_PAREN);
			setState(3901);
			valueExpression(0);
			setState(3902);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimMultiCharacterCharacterStringContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode BTRIM() { return getToken(GQL_20240412Parser.BTRIM, 0); }
		public TerminalNode LTRIM() { return getToken(GQL_20240412Parser.LTRIM, 0); }
		public TerminalNode RTRIM() { return getToken(GQL_20240412Parser.RTRIM, 0); }
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public TrimMultiCharacterCharacterStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimMultiCharacterCharacterString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimMultiCharacterCharacterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimMultiCharacterCharacterString(this);
		}
	}

	public final TrimMultiCharacterCharacterStringContext trimMultiCharacterCharacterString() throws RecognitionException {
		TrimMultiCharacterCharacterStringContext _localctx = new TrimMultiCharacterCharacterStringContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_trimMultiCharacterCharacterString);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			_la = _input.LA(1);
			if ( !(_la==BTRIM || _la==LTRIM || _la==RTRIM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3905);
			match(LEFT_PAREN);
			setState(3906);
			valueExpression(0);
			setState(3909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3907);
				match(COMMA);
				setState(3908);
				valueExpression(0);
				}
			}

			setState(3911);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NormalizeCharacterStringContext extends ParserRuleContext {
		public TerminalNode NORMALIZE() { return getToken(GQL_20240412Parser.NORMALIZE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public NormalFormContext normalForm() {
			return getRuleContext(NormalFormContext.class,0);
		}
		public NormalizeCharacterStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalizeCharacterString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNormalizeCharacterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNormalizeCharacterString(this);
		}
	}

	public final NormalizeCharacterStringContext normalizeCharacterString() throws RecognitionException {
		NormalizeCharacterStringContext _localctx = new NormalizeCharacterStringContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_normalizeCharacterString);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			match(NORMALIZE);
			setState(3914);
			match(LEFT_PAREN);
			setState(3915);
			valueExpression(0);
			setState(3918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3916);
				match(COMMA);
				setState(3917);
				normalForm();
				}
			}

			setState(3920);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeReferenceValueExpressionContext extends ParserRuleContext {
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public NodeReferenceValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeReferenceValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeReferenceValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeReferenceValueExpression(this);
		}
	}

	public final NodeReferenceValueExpressionContext nodeReferenceValueExpression() throws RecognitionException {
		NodeReferenceValueExpressionContext _localctx = new NodeReferenceValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_nodeReferenceValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			valueExpressionPrimary(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeReferenceValueExpressionContext extends ParserRuleContext {
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public EdgeReferenceValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeReferenceValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeReferenceValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeReferenceValueExpression(this);
		}
	}

	public final EdgeReferenceValueExpressionContext edgeReferenceValueExpression() throws RecognitionException {
		EdgeReferenceValueExpressionContext _localctx = new EdgeReferenceValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_edgeReferenceValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			valueExpressionPrimary(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregatingValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public AggregatingValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregatingValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAggregatingValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAggregatingValueExpression(this);
		}
	}

	public final AggregatingValueExpressionContext aggregatingValueExpression() throws RecognitionException {
		AggregatingValueExpressionContext _localctx = new AggregatingValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_aggregatingValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3926);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionPrimaryContext extends ParserRuleContext {
		public ParenthesizedValueExpressionContext parenthesizedValueExpression() {
			return getRuleContext(ParenthesizedValueExpressionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public UnsignedValueSpecificationContext unsignedValueSpecification() {
			return getRuleContext(UnsignedValueSpecificationContext.class,0);
		}
		public PathValueConstructorContext pathValueConstructor() {
			return getRuleContext(PathValueConstructorContext.class,0);
		}
		public ValueQueryExpressionContext valueQueryExpression() {
			return getRuleContext(ValueQueryExpressionContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public Element_idFunctionContext element_idFunction() {
			return getRuleContext(Element_idFunctionContext.class,0);
		}
		public LetValueExpressionContext letValueExpression() {
			return getRuleContext(LetValueExpressionContext.class,0);
		}
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQL_20240412Parser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public ValueExpressionPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpressionPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueExpressionPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueExpressionPrimary(this);
		}
	}

	public final ValueExpressionPrimaryContext valueExpressionPrimary() throws RecognitionException {
		return valueExpressionPrimary(0);
	}

	private ValueExpressionPrimaryContext valueExpressionPrimary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionPrimaryContext _localctx = new ValueExpressionPrimaryContext(_ctx, _parentState);
		ValueExpressionPrimaryContext _prevctx = _localctx;
		int _startState = 842;
		enterRecursionRule(_localctx, 842, RULE_valueExpressionPrimary, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3929);
				parenthesizedValueExpression();
				}
				break;
			case AVG:
			case COLLECT_LIST:
			case COUNT:
			case MAX:
			case MIN:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
				{
				setState(3930);
				aggregateFunction();
				}
				break;
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case ARRAY:
			case DATE:
			case DATETIME:
			case DURATION:
			case GROUP:
			case LIST:
			case NULL:
			case RECORD:
			case SESSION_USER:
			case TIME:
			case TIMESTAMP:
			case GENERAL_PARAMETER_REFERENCE:
			case LEFT_BRACE:
			case LEFT_BRACKET:
				{
				setState(3931);
				unsignedValueSpecification();
				}
				break;
			case PATH:
				{
				setState(3932);
				pathValueConstructor();
				}
				break;
			case VALUE:
				{
				setState(3933);
				valueQueryExpression();
				}
				break;
			case CASE:
			case COALESCE:
			case NULLIF:
				{
				setState(3934);
				caseExpression();
				}
				break;
			case CAST:
				{
				setState(3935);
				castSpecification();
				}
				break;
			case ELEMENT_ID:
				{
				setState(3936);
				element_idFunction();
				}
				break;
			case LET:
				{
				setState(3937);
				letValueExpression();
				}
				break;
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				{
				setState(3938);
				bindingVariableReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(3946);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValueExpressionPrimaryContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valueExpressionPrimary);
					setState(3941);
					if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
					setState(3942);
					match(PERIOD);
					setState(3943);
					propertyName();
					}
					} 
				}
				setState(3948);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,446,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedValueExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public ParenthesizedValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterParenthesizedValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitParenthesizedValueExpression(this);
		}
	}

	public final ParenthesizedValueExpressionContext parenthesizedValueExpression() throws RecognitionException {
		ParenthesizedValueExpressionContext _localctx = new ParenthesizedValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_parenthesizedValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3949);
			match(LEFT_PAREN);
			setState(3950);
			valueExpression(0);
			setState(3951);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonParenthesizedValueExpressionPrimaryContext extends ParserRuleContext {
		public NonParenthesizedValueExpressionPrimarySpecialCaseContext nonParenthesizedValueExpressionPrimarySpecialCase() {
			return getRuleContext(NonParenthesizedValueExpressionPrimarySpecialCaseContext.class,0);
		}
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public NonParenthesizedValueExpressionPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonParenthesizedValueExpressionPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNonParenthesizedValueExpressionPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNonParenthesizedValueExpressionPrimary(this);
		}
	}

	public final NonParenthesizedValueExpressionPrimaryContext nonParenthesizedValueExpressionPrimary() throws RecognitionException {
		NonParenthesizedValueExpressionPrimaryContext _localctx = new NonParenthesizedValueExpressionPrimaryContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_nonParenthesizedValueExpressionPrimary);
		try {
			setState(3955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3953);
				nonParenthesizedValueExpressionPrimarySpecialCase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3954);
				bindingVariableReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonParenthesizedValueExpressionPrimarySpecialCaseContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public UnsignedValueSpecificationContext unsignedValueSpecification() {
			return getRuleContext(UnsignedValueSpecificationContext.class,0);
		}
		public PathValueConstructorContext pathValueConstructor() {
			return getRuleContext(PathValueConstructorContext.class,0);
		}
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQL_20240412Parser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public ValueQueryExpressionContext valueQueryExpression() {
			return getRuleContext(ValueQueryExpressionContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public Element_idFunctionContext element_idFunction() {
			return getRuleContext(Element_idFunctionContext.class,0);
		}
		public LetValueExpressionContext letValueExpression() {
			return getRuleContext(LetValueExpressionContext.class,0);
		}
		public NonParenthesizedValueExpressionPrimarySpecialCaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonParenthesizedValueExpressionPrimarySpecialCase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNonParenthesizedValueExpressionPrimarySpecialCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNonParenthesizedValueExpressionPrimarySpecialCase(this);
		}
	}

	public final NonParenthesizedValueExpressionPrimarySpecialCaseContext nonParenthesizedValueExpressionPrimarySpecialCase() throws RecognitionException {
		NonParenthesizedValueExpressionPrimarySpecialCaseContext _localctx = new NonParenthesizedValueExpressionPrimarySpecialCaseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_nonParenthesizedValueExpressionPrimarySpecialCase);
		try {
			setState(3969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3957);
				aggregateFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3958);
				unsignedValueSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3959);
				pathValueConstructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3960);
				valueExpressionPrimary(0);
				setState(3961);
				match(PERIOD);
				setState(3962);
				propertyName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3964);
				valueQueryExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3965);
				caseExpression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3966);
				castSpecification();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3967);
				element_idFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3968);
				letValueExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedValueSpecificationContext extends ParserRuleContext {
		public UnsignedLiteralContext unsignedLiteral() {
			return getRuleContext(UnsignedLiteralContext.class,0);
		}
		public GeneralValueSpecificationContext generalValueSpecification() {
			return getRuleContext(GeneralValueSpecificationContext.class,0);
		}
		public UnsignedValueSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedValueSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedValueSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedValueSpecification(this);
		}
	}

	public final UnsignedValueSpecificationContext unsignedValueSpecification() throws RecognitionException {
		UnsignedValueSpecificationContext _localctx = new UnsignedValueSpecificationContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_unsignedValueSpecification);
		try {
			setState(3973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case ARRAY:
			case DATE:
			case DATETIME:
			case DURATION:
			case GROUP:
			case LIST:
			case NULL:
			case RECORD:
			case TIME:
			case TIMESTAMP:
			case LEFT_BRACE:
			case LEFT_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3971);
				unsignedLiteral();
				}
				break;
			case SESSION_USER:
			case GENERAL_PARAMETER_REFERENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3972);
				generalValueSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonNegativeIntegerSpecificationContext extends ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public DynamicParameterSpecificationContext dynamicParameterSpecification() {
			return getRuleContext(DynamicParameterSpecificationContext.class,0);
		}
		public NonNegativeIntegerSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonNegativeIntegerSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNonNegativeIntegerSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNonNegativeIntegerSpecification(this);
		}
	}

	public final NonNegativeIntegerSpecificationContext nonNegativeIntegerSpecification() throws RecognitionException {
		NonNegativeIntegerSpecificationContext _localctx = new NonNegativeIntegerSpecificationContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_nonNegativeIntegerSpecification);
		try {
			setState(3977);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3975);
				unsignedInteger();
				}
				break;
			case GENERAL_PARAMETER_REFERENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3976);
				dynamicParameterSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralValueSpecificationContext extends ParserRuleContext {
		public DynamicParameterSpecificationContext dynamicParameterSpecification() {
			return getRuleContext(DynamicParameterSpecificationContext.class,0);
		}
		public TerminalNode SESSION_USER() { return getToken(GQL_20240412Parser.SESSION_USER, 0); }
		public GeneralValueSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalValueSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralValueSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralValueSpecification(this);
		}
	}

	public final GeneralValueSpecificationContext generalValueSpecification() throws RecognitionException {
		GeneralValueSpecificationContext _localctx = new GeneralValueSpecificationContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_generalValueSpecification);
		try {
			setState(3981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GENERAL_PARAMETER_REFERENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3979);
				dynamicParameterSpecification();
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3980);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DynamicParameterSpecificationContext extends ParserRuleContext {
		public TerminalNode GENERAL_PARAMETER_REFERENCE() { return getToken(GQL_20240412Parser.GENERAL_PARAMETER_REFERENCE, 0); }
		public DynamicParameterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamicParameterSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDynamicParameterSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDynamicParameterSpecification(this);
		}
	}

	public final DynamicParameterSpecificationContext dynamicParameterSpecification() throws RecognitionException {
		DynamicParameterSpecificationContext _localctx = new DynamicParameterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_dynamicParameterSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3983);
			match(GENERAL_PARAMETER_REFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetValueExpressionContext extends ParserRuleContext {
		public TerminalNode LET() { return getToken(GQL_20240412Parser.LET, 0); }
		public LetVariableDefinitionListContext letVariableDefinitionList() {
			return getRuleContext(LetVariableDefinitionListContext.class,0);
		}
		public TerminalNode IN() { return getToken(GQL_20240412Parser.IN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GQL_20240412Parser.END, 0); }
		public LetValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLetValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLetValueExpression(this);
		}
	}

	public final LetValueExpressionContext letValueExpression() throws RecognitionException {
		LetValueExpressionContext _localctx = new LetValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_letValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			match(LET);
			setState(3986);
			letVariableDefinitionList();
			setState(3987);
			match(IN);
			setState(3988);
			valueExpression(0);
			setState(3989);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueQueryExpressionContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(GQL_20240412Parser.VALUE, 0); }
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public ValueQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterValueQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitValueQueryExpression(this);
		}
	}

	public final ValueQueryExpressionContext valueQueryExpression() throws RecognitionException {
		ValueQueryExpressionContext _localctx = new ValueQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_valueQueryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			match(VALUE);
			setState(3992);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseExpressionContext extends ParserRuleContext {
		public CaseAbbreviationContext caseAbbreviation() {
			return getRuleContext(CaseAbbreviationContext.class,0);
		}
		public CaseSpecificationContext caseSpecification() {
			return getRuleContext(CaseSpecificationContext.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCaseExpression(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_caseExpression);
		try {
			setState(3996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COALESCE:
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(3994);
				caseAbbreviation();
				}
				break;
			case CASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3995);
				caseSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseAbbreviationContext extends ParserRuleContext {
		public TerminalNode NULLIF() { return getToken(GQL_20240412Parser.NULLIF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode COALESCE() { return getToken(GQL_20240412Parser.COALESCE, 0); }
		public CaseAbbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAbbreviation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCaseAbbreviation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCaseAbbreviation(this);
		}
	}

	public final CaseAbbreviationContext caseAbbreviation() throws RecognitionException {
		CaseAbbreviationContext _localctx = new CaseAbbreviationContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_caseAbbreviation);
		int _la;
		try {
			setState(4016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(3998);
				match(NULLIF);
				setState(3999);
				match(LEFT_PAREN);
				setState(4000);
				valueExpression(0);
				setState(4001);
				match(COMMA);
				setState(4002);
				valueExpression(0);
				setState(4003);
				match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4005);
				match(COALESCE);
				setState(4006);
				match(LEFT_PAREN);
				setState(4007);
				valueExpression(0);
				setState(4010); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4008);
					match(COMMA);
					setState(4009);
					valueExpression(0);
					}
					}
					setState(4012); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(4014);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseSpecificationContext extends ParserRuleContext {
		public SimpleCaseContext simpleCase() {
			return getRuleContext(SimpleCaseContext.class,0);
		}
		public SearchedCaseContext searchedCase() {
			return getRuleContext(SearchedCaseContext.class,0);
		}
		public CaseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCaseSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCaseSpecification(this);
		}
	}

	public final CaseSpecificationContext caseSpecification() throws RecognitionException {
		CaseSpecificationContext _localctx = new CaseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_caseSpecification);
		try {
			setState(4020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4018);
				simpleCase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4019);
				searchedCase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCaseContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(GQL_20240412Parser.CASE, 0); }
		public CaseOperandContext caseOperand() {
			return getRuleContext(CaseOperandContext.class,0);
		}
		public TerminalNode END() { return getToken(GQL_20240412Parser.END, 0); }
		public List<SimpleWhenClauseContext> simpleWhenClause() {
			return getRuleContexts(SimpleWhenClauseContext.class);
		}
		public SimpleWhenClauseContext simpleWhenClause(int i) {
			return getRuleContext(SimpleWhenClauseContext.class,i);
		}
		public ElseClauseContext elseClause() {
			return getRuleContext(ElseClauseContext.class,0);
		}
		public SimpleCaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleCase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleCase(this);
		}
	}

	public final SimpleCaseContext simpleCase() throws RecognitionException {
		SimpleCaseContext _localctx = new SimpleCaseContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_simpleCase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4022);
			match(CASE);
			setState(4023);
			caseOperand();
			setState(4025); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4024);
				simpleWhenClause();
				}
				}
				setState(4027); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4029);
				elseClause();
				}
			}

			setState(4032);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchedCaseContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(GQL_20240412Parser.CASE, 0); }
		public TerminalNode END() { return getToken(GQL_20240412Parser.END, 0); }
		public List<SearchedWhenClauseContext> searchedWhenClause() {
			return getRuleContexts(SearchedWhenClauseContext.class);
		}
		public SearchedWhenClauseContext searchedWhenClause(int i) {
			return getRuleContext(SearchedWhenClauseContext.class,i);
		}
		public ElseClauseContext elseClause() {
			return getRuleContext(ElseClauseContext.class,0);
		}
		public SearchedCaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedCase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSearchedCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSearchedCase(this);
		}
	}

	public final SearchedCaseContext searchedCase() throws RecognitionException {
		SearchedCaseContext _localctx = new SearchedCaseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_searchedCase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4034);
			match(CASE);
			setState(4036); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4035);
				searchedWhenClause();
				}
				}
				setState(4038); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4040);
				elseClause();
				}
			}

			setState(4043);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GQL_20240412Parser.WHEN, 0); }
		public WhenOperandListContext whenOperandList() {
			return getRuleContext(WhenOperandListContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GQL_20240412Parser.THEN, 0); }
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSimpleWhenClause(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_simpleWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			match(WHEN);
			setState(4046);
			whenOperandList();
			setState(4047);
			match(THEN);
			setState(4048);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GQL_20240412Parser.WHEN, 0); }
		public SearchConditionContext searchCondition() {
			return getRuleContext(SearchConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GQL_20240412Parser.THEN, 0); }
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSearchedWhenClause(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(WHEN);
			setState(4051);
			searchCondition();
			setState(4052);
			match(THEN);
			setState(4053);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(GQL_20240412Parser.ELSE, 0); }
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElseClause(this);
		}
	}

	public final ElseClauseContext elseClause() throws RecognitionException {
		ElseClauseContext _localctx = new ElseClauseContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_elseClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			match(ELSE);
			setState(4056);
			result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseOperandContext extends ParserRuleContext {
		public NonParenthesizedValueExpressionPrimaryContext nonParenthesizedValueExpressionPrimary() {
			return getRuleContext(NonParenthesizedValueExpressionPrimaryContext.class,0);
		}
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public CaseOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCaseOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCaseOperand(this);
		}
	}

	public final CaseOperandContext caseOperand() throws RecognitionException {
		CaseOperandContext _localctx = new CaseOperandContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_caseOperand);
		try {
			setState(4060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4058);
				nonParenthesizedValueExpressionPrimary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4059);
				elementVariableReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenOperandListContext extends ParserRuleContext {
		public List<WhenOperandContext> whenOperand() {
			return getRuleContexts(WhenOperandContext.class);
		}
		public WhenOperandContext whenOperand(int i) {
			return getRuleContext(WhenOperandContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public WhenOperandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenOperandList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterWhenOperandList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitWhenOperandList(this);
		}
	}

	public final WhenOperandListContext whenOperandList() throws RecognitionException {
		WhenOperandListContext _localctx = new WhenOperandListContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_whenOperandList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4062);
			whenOperand();
			setState(4067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4063);
				match(COMMA);
				setState(4064);
				whenOperand();
				}
				}
				setState(4069);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenOperandContext extends ParserRuleContext {
		public NonParenthesizedValueExpressionPrimaryContext nonParenthesizedValueExpressionPrimary() {
			return getRuleContext(NonParenthesizedValueExpressionPrimaryContext.class,0);
		}
		public ComparisonPredicatePart2Context comparisonPredicatePart2() {
			return getRuleContext(ComparisonPredicatePart2Context.class,0);
		}
		public NullPredicatePart2Context nullPredicatePart2() {
			return getRuleContext(NullPredicatePart2Context.class,0);
		}
		public ValueTypePredicatePart2Context valueTypePredicatePart2() {
			return getRuleContext(ValueTypePredicatePart2Context.class,0);
		}
		public NormalizedPredicatePart2Context normalizedPredicatePart2() {
			return getRuleContext(NormalizedPredicatePart2Context.class,0);
		}
		public DirectedPredicatePart2Context directedPredicatePart2() {
			return getRuleContext(DirectedPredicatePart2Context.class,0);
		}
		public LabeledPredicatePart2Context labeledPredicatePart2() {
			return getRuleContext(LabeledPredicatePart2Context.class,0);
		}
		public SourcePredicatePart2Context sourcePredicatePart2() {
			return getRuleContext(SourcePredicatePart2Context.class,0);
		}
		public DestinationPredicatePart2Context destinationPredicatePart2() {
			return getRuleContext(DestinationPredicatePart2Context.class,0);
		}
		public WhenOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterWhenOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitWhenOperand(this);
		}
	}

	public final WhenOperandContext whenOperand() throws RecognitionException {
		WhenOperandContext _localctx = new WhenOperandContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_whenOperand);
		try {
			setState(4079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4070);
				nonParenthesizedValueExpressionPrimary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4071);
				comparisonPredicatePart2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4072);
				nullPredicatePart2();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4073);
				valueTypePredicatePart2();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4074);
				normalizedPredicatePart2();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4075);
				directedPredicatePart2();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4076);
				labeledPredicatePart2();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4077);
				sourcePredicatePart2();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4078);
				destinationPredicatePart2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResultContext extends ParserRuleContext {
		public ResultExpressionContext resultExpression() {
			return getRuleContext(ResultExpressionContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitResult(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_result);
		try {
			setState(4083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4081);
				resultExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4082);
				nullLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResultExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ResultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterResultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitResultExpression(this);
		}
	}

	public final ResultExpressionContext resultExpression() throws RecognitionException {
		ResultExpressionContext _localctx = new ResultExpressionContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_resultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4085);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(GQL_20240412Parser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public CastOperandContext castOperand() {
			return getRuleContext(CastOperandContext.class,0);
		}
		public TerminalNode AS() { return getToken(GQL_20240412Parser.AS, 0); }
		public CastTargetContext castTarget() {
			return getRuleContext(CastTargetContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCastSpecification(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_castSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4087);
			match(CAST);
			setState(4088);
			match(LEFT_PAREN);
			setState(4089);
			castOperand();
			setState(4090);
			match(AS);
			setState(4091);
			castTarget();
			setState(4092);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastOperandContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCastOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCastOperand(this);
		}
	}

	public final CastOperandContext castOperand() throws RecognitionException {
		CastOperandContext _localctx = new CastOperandContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_castOperand);
		try {
			setState(4096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4094);
				valueExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4095);
				nullLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastTargetContext extends ParserRuleContext {
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public CastTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCastTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCastTarget(this);
		}
	}

	public final CastTargetContext castTarget() throws RecognitionException {
		CastTargetContext _localctx = new CastTargetContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_castTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4098);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateFunctionContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(GQL_20240412Parser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public GeneralSetFunctionContext generalSetFunction() {
			return getRuleContext(GeneralSetFunctionContext.class,0);
		}
		public BinarySetFunctionContext binarySetFunction() {
			return getRuleContext(BinarySetFunctionContext.class,0);
		}
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAggregateFunction(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_aggregateFunction);
		try {
			setState(4106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4100);
				match(COUNT);
				setState(4101);
				match(LEFT_PAREN);
				setState(4102);
				match(ASTERISK);
				setState(4103);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4104);
				generalSetFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4105);
				binarySetFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralSetFunctionContext extends ParserRuleContext {
		public GeneralSetFunctionTypeContext generalSetFunctionType() {
			return getRuleContext(GeneralSetFunctionTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GeneralSetFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalSetFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralSetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralSetFunction(this);
		}
	}

	public final GeneralSetFunctionContext generalSetFunction() throws RecognitionException {
		GeneralSetFunctionContext _localctx = new GeneralSetFunctionContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_generalSetFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			generalSetFunctionType();
			setState(4109);
			match(LEFT_PAREN);
			setState(4111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(4110);
				setQuantifier();
				}
			}

			setState(4113);
			valueExpression(0);
			setState(4114);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinarySetFunctionContext extends ParserRuleContext {
		public BinarySetFunctionTypeContext binarySetFunctionType() {
			return getRuleContext(BinarySetFunctionTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public DependentValueExpressionContext dependentValueExpression() {
			return getRuleContext(DependentValueExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public IndependentValueExpressionContext independentValueExpression() {
			return getRuleContext(IndependentValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public BinarySetFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binarySetFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBinarySetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBinarySetFunction(this);
		}
	}

	public final BinarySetFunctionContext binarySetFunction() throws RecognitionException {
		BinarySetFunctionContext _localctx = new BinarySetFunctionContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_binarySetFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4116);
			binarySetFunctionType();
			setState(4117);
			match(LEFT_PAREN);
			setState(4118);
			dependentValueExpression();
			setState(4119);
			match(COMMA);
			setState(4120);
			independentValueExpression();
			setState(4121);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralSetFunctionTypeContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(GQL_20240412Parser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(GQL_20240412Parser.COUNT, 0); }
		public TerminalNode MAX() { return getToken(GQL_20240412Parser.MAX, 0); }
		public TerminalNode MIN() { return getToken(GQL_20240412Parser.MIN, 0); }
		public TerminalNode SUM() { return getToken(GQL_20240412Parser.SUM, 0); }
		public TerminalNode COLLECT_LIST() { return getToken(GQL_20240412Parser.COLLECT_LIST, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GQL_20240412Parser.STDDEV_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GQL_20240412Parser.STDDEV_POP, 0); }
		public GeneralSetFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalSetFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralSetFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralSetFunctionType(this);
		}
	}

	public final GeneralSetFunctionTypeContext generalSetFunctionType() throws RecognitionException {
		GeneralSetFunctionTypeContext _localctx = new GeneralSetFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_generalSetFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4123);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4683743621055250432L) != 0 || (((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 792633534417207299L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(GQL_20240412Parser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(GQL_20240412Parser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSetQuantifier(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4125);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinarySetFunctionTypeContext extends ParserRuleContext {
		public TerminalNode PERCENTILE_CONT() { return getToken(GQL_20240412Parser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(GQL_20240412Parser.PERCENTILE_DISC, 0); }
		public BinarySetFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binarySetFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBinarySetFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBinarySetFunctionType(this);
		}
	}

	public final BinarySetFunctionTypeContext binarySetFunctionType() throws RecognitionException {
		BinarySetFunctionTypeContext _localctx = new BinarySetFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_binarySetFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4127);
			_la = _input.LA(1);
			if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DependentValueExpressionContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public DependentValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependentValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDependentValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDependentValueExpression(this);
		}
	}

	public final DependentValueExpressionContext dependentValueExpression() throws RecognitionException {
		DependentValueExpressionContext _localctx = new DependentValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_dependentValueExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(4129);
				setQuantifier();
				}
			}

			setState(4132);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndependentValueExpressionContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public IndependentValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_independentValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIndependentValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIndependentValueExpression(this);
		}
	}

	public final IndependentValueExpressionContext independentValueExpression() throws RecognitionException {
		IndependentValueExpressionContext _localctx = new IndependentValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_independentValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4134);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Element_idFunctionContext extends ParserRuleContext {
		public TerminalNode ELEMENT_ID() { return getToken(GQL_20240412Parser.ELEMENT_ID, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public Element_idFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_idFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElement_idFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElement_idFunction(this);
		}
	}

	public final Element_idFunctionContext element_idFunction() throws RecognitionException {
		Element_idFunctionContext _localctx = new Element_idFunctionContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_element_idFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4136);
			match(ELEMENT_ID);
			setState(4137);
			match(LEFT_PAREN);
			setState(4138);
			elementVariableReference();
			setState(4139);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableReferenceContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public BindingVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingVariableReference(this);
		}
	}

	public final BindingVariableReferenceContext bindingVariableReference() throws RecognitionException {
		BindingVariableReferenceContext _localctx = new BindingVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_bindingVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4141);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PathValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathValueExpression(this);
		}
	}

	public final PathValueExpressionContext pathValueExpression() throws RecognitionException {
		PathValueExpressionContext _localctx = new PathValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_pathValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueConstructorContext extends ParserRuleContext {
		public PathValueConstructorByEnumerationContext pathValueConstructorByEnumeration() {
			return getRuleContext(PathValueConstructorByEnumerationContext.class,0);
		}
		public PathValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathValueConstructor(this);
		}
	}

	public final PathValueConstructorContext pathValueConstructor() throws RecognitionException {
		PathValueConstructorContext _localctx = new PathValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_pathValueConstructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4145);
			pathValueConstructorByEnumeration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueConstructorByEnumerationContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQL_20240412Parser.PATH, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQL_20240412Parser.LEFT_BRACKET, 0); }
		public PathElementListContext pathElementList() {
			return getRuleContext(PathElementListContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_BRACKET, 0); }
		public PathValueConstructorByEnumerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueConstructorByEnumeration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathValueConstructorByEnumeration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathValueConstructorByEnumeration(this);
		}
	}

	public final PathValueConstructorByEnumerationContext pathValueConstructorByEnumeration() throws RecognitionException {
		PathValueConstructorByEnumerationContext _localctx = new PathValueConstructorByEnumerationContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_pathValueConstructorByEnumeration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(PATH);
			setState(4148);
			match(LEFT_BRACKET);
			setState(4149);
			pathElementList();
			setState(4150);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathElementListContext extends ParserRuleContext {
		public PathElementListStartContext pathElementListStart() {
			return getRuleContext(PathElementListStartContext.class,0);
		}
		public List<PathElementListStepContext> pathElementListStep() {
			return getRuleContexts(PathElementListStepContext.class);
		}
		public PathElementListStepContext pathElementListStep(int i) {
			return getRuleContext(PathElementListStepContext.class,i);
		}
		public PathElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathElementList(this);
		}
	}

	public final PathElementListContext pathElementList() throws RecognitionException {
		PathElementListContext _localctx = new PathElementListContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_pathElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4152);
			pathElementListStart();
			setState(4156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4153);
				pathElementListStep();
				}
				}
				setState(4158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathElementListStartContext extends ParserRuleContext {
		public NodeReferenceValueExpressionContext nodeReferenceValueExpression() {
			return getRuleContext(NodeReferenceValueExpressionContext.class,0);
		}
		public PathElementListStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathElementListStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathElementListStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathElementListStart(this);
		}
	}

	public final PathElementListStartContext pathElementListStart() throws RecognitionException {
		PathElementListStartContext _localctx = new PathElementListStartContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_pathElementListStart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			nodeReferenceValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathElementListStepContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public EdgeReferenceValueExpressionContext edgeReferenceValueExpression() {
			return getRuleContext(EdgeReferenceValueExpressionContext.class,0);
		}
		public NodeReferenceValueExpressionContext nodeReferenceValueExpression() {
			return getRuleContext(NodeReferenceValueExpressionContext.class,0);
		}
		public PathElementListStepContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathElementListStep; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathElementListStep(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathElementListStep(this);
		}
	}

	public final PathElementListStepContext pathElementListStep() throws RecognitionException {
		PathElementListStepContext _localctx = new PathElementListStepContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_pathElementListStep);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			match(COMMA);
			setState(4162);
			edgeReferenceValueExpression();
			setState(4163);
			match(COMMA);
			setState(4164);
			nodeReferenceValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ListValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueExpression(this);
		}
	}

	public final ListValueExpressionContext listValueExpression() throws RecognitionException {
		ListValueExpressionContext _localctx = new ListValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_listValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueFunctionContext extends ParserRuleContext {
		public TrimListFunctionContext trimListFunction() {
			return getRuleContext(TrimListFunctionContext.class,0);
		}
		public ElementsFunctionContext elementsFunction() {
			return getRuleContext(ElementsFunctionContext.class,0);
		}
		public ListValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueFunction(this);
		}
	}

	public final ListValueFunctionContext listValueFunction() throws RecognitionException {
		ListValueFunctionContext _localctx = new ListValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_listValueFunction);
		try {
			setState(4170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRIM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4168);
				trimListFunction();
				}
				break;
			case ELEMENTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4169);
				elementsFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimListFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(GQL_20240412Parser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ListValueExpressionContext listValueExpression() {
			return getRuleContext(ListValueExpressionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TrimListFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimListFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimListFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimListFunction(this);
		}
	}

	public final TrimListFunctionContext trimListFunction() throws RecognitionException {
		TrimListFunctionContext _localctx = new TrimListFunctionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_trimListFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4172);
			match(TRIM);
			setState(4173);
			match(LEFT_PAREN);
			setState(4174);
			listValueExpression();
			setState(4175);
			match(COMMA);
			setState(4176);
			numericValueExpression(0);
			setState(4177);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementsFunctionContext extends ParserRuleContext {
		public TerminalNode ELEMENTS() { return getToken(GQL_20240412Parser.ELEMENTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PathValueExpressionContext pathValueExpression() {
			return getRuleContext(PathValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public ElementsFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementsFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementsFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementsFunction(this);
		}
	}

	public final ElementsFunctionContext elementsFunction() throws RecognitionException {
		ElementsFunctionContext _localctx = new ElementsFunctionContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_elementsFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			match(ELEMENTS);
			setState(4180);
			match(LEFT_PAREN);
			setState(4181);
			pathValueExpression();
			setState(4182);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueConstructorContext extends ParserRuleContext {
		public ListValueConstructorByEnumerationContext listValueConstructorByEnumeration() {
			return getRuleContext(ListValueConstructorByEnumerationContext.class,0);
		}
		public ListValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueConstructor(this);
		}
	}

	public final ListValueConstructorContext listValueConstructor() throws RecognitionException {
		ListValueConstructorContext _localctx = new ListValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_listValueConstructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			listValueConstructorByEnumeration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueConstructorByEnumerationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(GQL_20240412Parser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQL_20240412Parser.RIGHT_BRACKET, 0); }
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public ListElementListContext listElementList() {
			return getRuleContext(ListElementListContext.class,0);
		}
		public ListValueConstructorByEnumerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueConstructorByEnumeration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListValueConstructorByEnumeration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListValueConstructorByEnumeration(this);
		}
	}

	public final ListValueConstructorByEnumerationContext listValueConstructorByEnumeration() throws RecognitionException {
		ListValueConstructorByEnumerationContext _localctx = new ListValueConstructorByEnumerationContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_listValueConstructorByEnumeration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY || _la==GROUP || _la==LIST) {
				{
				setState(4186);
				listValueTypeName();
				}
			}

			setState(4189);
			match(LEFT_BRACKET);
			setState(4191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8762849302180528028L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 309341980913L) != 0 || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -8011702113698201677L) != 0 || (((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 26393111092643L) != 0 || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 1688849860263935L) != 0 || (((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 151L) != 0) {
				{
				setState(4190);
				listElementList();
				}
			}

			setState(4193);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListElementListContext extends ParserRuleContext {
		public List<ListElementContext> listElement() {
			return getRuleContexts(ListElementContext.class);
		}
		public ListElementContext listElement(int i) {
			return getRuleContext(ListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public ListElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListElementList(this);
		}
	}

	public final ListElementListContext listElementList() throws RecognitionException {
		ListElementListContext _localctx = new ListElementListContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_listElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195);
			listElement();
			setState(4200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4196);
				match(COMMA);
				setState(4197);
				listElement();
				}
				}
				setState(4202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListElementContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListElement(this);
		}
	}

	public final ListElementContext listElement() throws RecognitionException {
		ListElementContext _localctx = new ListElementContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_listElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordConstructorContext extends ParserRuleContext {
		public FieldsSpecificationContext fieldsSpecification() {
			return getRuleContext(FieldsSpecificationContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(GQL_20240412Parser.RECORD, 0); }
		public RecordConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRecordConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRecordConstructor(this);
		}
	}

	public final RecordConstructorContext recordConstructor() throws RecognitionException {
		RecordConstructorContext _localctx = new RecordConstructorContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_recordConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORD) {
				{
				setState(4205);
				match(RECORD);
				}
			}

			setState(4208);
			fieldsSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldsSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQL_20240412Parser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQL_20240412Parser.RIGHT_BRACE, 0); }
		public FieldListContext fieldList() {
			return getRuleContext(FieldListContext.class,0);
		}
		public FieldsSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldsSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldsSpecification(this);
		}
	}

	public final FieldsSpecificationContext fieldsSpecification() throws RecognitionException {
		FieldsSpecificationContext _localctx = new FieldsSpecificationContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_fieldsSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			match(LEFT_BRACE);
			setState(4212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 562949953421311L) != 0) {
				{
				setState(4211);
				fieldList();
				}
			}

			setState(4214);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldListContext extends ParserRuleContext {
		public List<FieldContext> field() {
			return getRuleContexts(FieldContext.class);
		}
		public FieldContext field(int i) {
			return getRuleContext(FieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQL_20240412Parser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQL_20240412Parser.COMMA, i);
		}
		public FieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldList(this);
		}
	}

	public final FieldListContext fieldList() throws RecognitionException {
		FieldListContext _localctx = new FieldListContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_fieldList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			field();
			setState(4221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4217);
				match(COMMA);
				setState(4218);
				field();
				}
				}
				setState(4223);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldContext extends ParserRuleContext {
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public TerminalNode COLON() { return getToken(GQL_20240412Parser.COLON, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitField(this);
		}
	}

	public final FieldContext field() throws RecognitionException {
		FieldContext _localctx = new FieldContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_field);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4224);
			fieldName();
			setState(4225);
			match(COLON);
			setState(4226);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruthValueContext extends ParserRuleContext {
		public TerminalNode BOOLEAN_LITERAL() { return getToken(GQL_20240412Parser.BOOLEAN_LITERAL, 0); }
		public TruthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTruthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTruthValue(this);
		}
	}

	public final TruthValueContext truthValue() throws RecognitionException {
		TruthValueContext _localctx = new TruthValueContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_truthValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			match(BOOLEAN_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueExpressionContext extends ParserRuleContext {
		public Token sign;
		public Token operator;
		public List<NumericValueExpressionContext> numericValueExpression() {
			return getRuleContexts(NumericValueExpressionContext.class);
		}
		public NumericValueExpressionContext numericValueExpression(int i) {
			return getRuleContext(NumericValueExpressionContext.class,i);
		}
		public TerminalNode PLUS_SIGN() { return getToken(GQL_20240412Parser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQL_20240412Parser.MINUS_SIGN, 0); }
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public NumericValueFunctionContext numericValueFunction() {
			return getRuleContext(NumericValueFunctionContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(GQL_20240412Parser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(GQL_20240412Parser.SOLIDUS, 0); }
		public NumericValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueExpression(this);
		}
	}

	public final NumericValueExpressionContext numericValueExpression() throws RecognitionException {
		return numericValueExpression(0);
	}

	private NumericValueExpressionContext numericValueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NumericValueExpressionContext _localctx = new NumericValueExpressionContext(_ctx, _parentState);
		NumericValueExpressionContext _prevctx = _localctx;
		int _startState = 952;
		enterRecursionRule(_localctx, 952, RULE_numericValueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_SIGN:
			case PLUS_SIGN:
				{
				setState(4231);
				((NumericValueExpressionContext)_localctx).sign = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MINUS_SIGN || _la==PLUS_SIGN) ) {
					((NumericValueExpressionContext)_localctx).sign = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4232);
				numericValueExpression(5);
				}
				break;
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case ARRAY:
			case AVG:
			case CASE:
			case CAST:
			case COALESCE:
			case COLLECT_LIST:
			case COUNT:
			case DATE:
			case DATETIME:
			case DURATION:
			case ELEMENT_ID:
			case GROUP:
			case LET:
			case LIST:
			case MAX:
			case MIN:
			case NULL:
			case NULLIF:
			case PATH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RECORD:
			case SESSION_USER:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case TIME:
			case TIMESTAMP:
			case VALUE:
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
			case GENERAL_PARAMETER_REFERENCE:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case LEFT_PAREN:
				{
				setState(4233);
				valueExpressionPrimary(0);
				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case BYTE_LENGTH:
			case CARDINALITY:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case COS:
			case COSH:
			case COT:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case MOD:
			case OCTET_LENGTH:
			case PATH_LENGTH:
			case POWER:
			case RADIANS:
			case SIN:
			case SINH:
			case SIZE:
			case SQRT:
			case TAN:
			case TANH:
				{
				setState(4234);
				numericValueFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4245);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4243);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
					case 1:
						{
						_localctx = new NumericValueExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_numericValueExpression);
						setState(4237);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(4238);
						((NumericValueExpressionContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((NumericValueExpressionContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4239);
						numericValueExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new NumericValueExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_numericValueExpression);
						setState(4240);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4241);
						((NumericValueExpressionContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS_SIGN || _la==PLUS_SIGN) ) {
							((NumericValueExpressionContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4242);
						numericValueExpression(4);
						}
						break;
					}
					} 
				}
				setState(4247);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueFunctionContext extends ParserRuleContext {
		public LengthExpressionContext lengthExpression() {
			return getRuleContext(LengthExpressionContext.class,0);
		}
		public CardinalityExpressionContext cardinalityExpression() {
			return getRuleContext(CardinalityExpressionContext.class,0);
		}
		public AbsoluteValueExpressionContext absoluteValueExpression() {
			return getRuleContext(AbsoluteValueExpressionContext.class,0);
		}
		public ModulusExpressionContext modulusExpression() {
			return getRuleContext(ModulusExpressionContext.class,0);
		}
		public TrigonometricFunctionContext trigonometricFunction() {
			return getRuleContext(TrigonometricFunctionContext.class,0);
		}
		public GeneralLogarithmFunctionContext generalLogarithmFunction() {
			return getRuleContext(GeneralLogarithmFunctionContext.class,0);
		}
		public CommonLogarithmContext commonLogarithm() {
			return getRuleContext(CommonLogarithmContext.class,0);
		}
		public NaturalLogarithmContext naturalLogarithm() {
			return getRuleContext(NaturalLogarithmContext.class,0);
		}
		public ExponentialFunctionContext exponentialFunction() {
			return getRuleContext(ExponentialFunctionContext.class,0);
		}
		public PowerFunctionContext powerFunction() {
			return getRuleContext(PowerFunctionContext.class,0);
		}
		public SquareRootContext squareRoot() {
			return getRuleContext(SquareRootContext.class,0);
		}
		public FloorFunctionContext floorFunction() {
			return getRuleContext(FloorFunctionContext.class,0);
		}
		public CeilingFunctionContext ceilingFunction() {
			return getRuleContext(CeilingFunctionContext.class,0);
		}
		public NumericValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueFunction(this);
		}
	}

	public final NumericValueFunctionContext numericValueFunction() throws RecognitionException {
		NumericValueFunctionContext _localctx = new NumericValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_numericValueFunction);
		try {
			setState(4261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BYTE_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case OCTET_LENGTH:
			case PATH_LENGTH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4248);
				lengthExpression();
				}
				break;
			case CARDINALITY:
			case SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4249);
				cardinalityExpression();
				}
				break;
			case ABS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4250);
				absoluteValueExpression();
				}
				break;
			case MOD:
				enterOuterAlt(_localctx, 4);
				{
				setState(4251);
				modulusExpression();
				}
				break;
			case ACOS:
			case ASIN:
			case ATAN:
			case COS:
			case COSH:
			case COT:
			case DEGREES:
			case RADIANS:
			case SIN:
			case SINH:
			case TAN:
			case TANH:
				enterOuterAlt(_localctx, 5);
				{
				setState(4252);
				trigonometricFunction();
				}
				break;
			case LOG:
				enterOuterAlt(_localctx, 6);
				{
				setState(4253);
				generalLogarithmFunction();
				}
				break;
			case LOG10:
				enterOuterAlt(_localctx, 7);
				{
				setState(4254);
				commonLogarithm();
				}
				break;
			case LN:
				enterOuterAlt(_localctx, 8);
				{
				setState(4255);
				naturalLogarithm();
				}
				break;
			case EXP:
				enterOuterAlt(_localctx, 9);
				{
				setState(4256);
				exponentialFunction();
				}
				break;
			case POWER:
				enterOuterAlt(_localctx, 10);
				{
				setState(4257);
				powerFunction();
				}
				break;
			case SQRT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4258);
				squareRoot();
				}
				break;
			case FLOOR:
				enterOuterAlt(_localctx, 12);
				{
				setState(4259);
				floorFunction();
				}
				break;
			case CEIL:
			case CEILING:
				enterOuterAlt(_localctx, 13);
				{
				setState(4260);
				ceilingFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LengthExpressionContext extends ParserRuleContext {
		public CharLengthExpressionContext charLengthExpression() {
			return getRuleContext(CharLengthExpressionContext.class,0);
		}
		public ByteLengthExpressionContext byteLengthExpression() {
			return getRuleContext(ByteLengthExpressionContext.class,0);
		}
		public PathLengthExpressionContext pathLengthExpression() {
			return getRuleContext(PathLengthExpressionContext.class,0);
		}
		public LengthExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLengthExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLengthExpression(this);
		}
	}

	public final LengthExpressionContext lengthExpression() throws RecognitionException {
		LengthExpressionContext _localctx = new LengthExpressionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_lengthExpression);
		try {
			setState(4266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4263);
				charLengthExpression();
				}
				break;
			case BYTE_LENGTH:
			case OCTET_LENGTH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4264);
				byteLengthExpression();
				}
				break;
			case PATH_LENGTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(4265);
				pathLengthExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CardinalityExpressionContext extends ParserRuleContext {
		public TerminalNode CARDINALITY() { return getToken(GQL_20240412Parser.CARDINALITY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public CardinalityExpressionArgumentContext cardinalityExpressionArgument() {
			return getRuleContext(CardinalityExpressionArgumentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode SIZE() { return getToken(GQL_20240412Parser.SIZE, 0); }
		public ListValueExpressionContext listValueExpression() {
			return getRuleContext(ListValueExpressionContext.class,0);
		}
		public CardinalityExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinalityExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCardinalityExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCardinalityExpression(this);
		}
	}

	public final CardinalityExpressionContext cardinalityExpression() throws RecognitionException {
		CardinalityExpressionContext _localctx = new CardinalityExpressionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_cardinalityExpression);
		try {
			setState(4278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CARDINALITY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4268);
				match(CARDINALITY);
				setState(4269);
				match(LEFT_PAREN);
				setState(4270);
				cardinalityExpressionArgument();
				setState(4271);
				match(RIGHT_PAREN);
				}
				break;
			case SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4273);
				match(SIZE);
				setState(4274);
				match(LEFT_PAREN);
				setState(4275);
				listValueExpression();
				setState(4276);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CardinalityExpressionArgumentContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public CardinalityExpressionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cardinalityExpressionArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCardinalityExpressionArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCardinalityExpressionArgument(this);
		}
	}

	public final CardinalityExpressionArgumentContext cardinalityExpressionArgument() throws RecognitionException {
		CardinalityExpressionArgumentContext _localctx = new CardinalityExpressionArgumentContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_cardinalityExpressionArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4280);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharLengthExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public CharacterStringValueExpressionContext characterStringValueExpression() {
			return getRuleContext(CharacterStringValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(GQL_20240412Parser.CHAR_LENGTH, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(GQL_20240412Parser.CHARACTER_LENGTH, 0); }
		public CharLengthExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charLengthExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCharLengthExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCharLengthExpression(this);
		}
	}

	public final CharLengthExpressionContext charLengthExpression() throws RecognitionException {
		CharLengthExpressionContext _localctx = new CharLengthExpressionContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_charLengthExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			_la = _input.LA(1);
			if ( !(_la==CHAR_LENGTH || _la==CHARACTER_LENGTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4283);
			match(LEFT_PAREN);
			setState(4284);
			characterStringValueExpression();
			setState(4285);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ByteLengthExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ByteStringValueExpressionContext byteStringValueExpression() {
			return getRuleContext(ByteStringValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode BYTE_LENGTH() { return getToken(GQL_20240412Parser.BYTE_LENGTH, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(GQL_20240412Parser.OCTET_LENGTH, 0); }
		public ByteLengthExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_byteLengthExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterByteLengthExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitByteLengthExpression(this);
		}
	}

	public final ByteLengthExpressionContext byteLengthExpression() throws RecognitionException {
		ByteLengthExpressionContext _localctx = new ByteLengthExpressionContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_byteLengthExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			_la = _input.LA(1);
			if ( !(_la==BYTE_LENGTH || _la==OCTET_LENGTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4288);
			match(LEFT_PAREN);
			setState(4289);
			byteStringValueExpression();
			setState(4290);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathLengthExpressionContext extends ParserRuleContext {
		public TerminalNode PATH_LENGTH() { return getToken(GQL_20240412Parser.PATH_LENGTH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public PathValueExpressionContext pathValueExpression() {
			return getRuleContext(PathValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public PathLengthExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathLengthExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathLengthExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathLengthExpression(this);
		}
	}

	public final PathLengthExpressionContext pathLengthExpression() throws RecognitionException {
		PathLengthExpressionContext _localctx = new PathLengthExpressionContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_pathLengthExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			match(PATH_LENGTH);
			setState(4293);
			match(LEFT_PAREN);
			setState(4294);
			pathValueExpression();
			setState(4295);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteValueExpressionContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(GQL_20240412Parser.ABS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public AbsoluteValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absoluteValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterAbsoluteValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitAbsoluteValueExpression(this);
		}
	}

	public final AbsoluteValueExpressionContext absoluteValueExpression() throws RecognitionException {
		AbsoluteValueExpressionContext _localctx = new AbsoluteValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_absoluteValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4297);
			match(ABS);
			setState(4298);
			match(LEFT_PAREN);
			setState(4299);
			valueExpression(0);
			setState(4300);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModulusExpressionContext extends ParserRuleContext {
		public TerminalNode MOD() { return getToken(GQL_20240412Parser.MOD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionDividendContext numericValueExpressionDividend() {
			return getRuleContext(NumericValueExpressionDividendContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public NumericValueExpressionDivisorContext numericValueExpressionDivisor() {
			return getRuleContext(NumericValueExpressionDivisorContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public ModulusExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modulusExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterModulusExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitModulusExpression(this);
		}
	}

	public final ModulusExpressionContext modulusExpression() throws RecognitionException {
		ModulusExpressionContext _localctx = new ModulusExpressionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_modulusExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4302);
			match(MOD);
			setState(4303);
			match(LEFT_PAREN);
			setState(4304);
			numericValueExpressionDividend();
			setState(4305);
			match(COMMA);
			setState(4306);
			numericValueExpressionDivisor();
			setState(4307);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueExpressionDividendContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public NumericValueExpressionDividendContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueExpressionDividend; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueExpressionDividend(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueExpressionDividend(this);
		}
	}

	public final NumericValueExpressionDividendContext numericValueExpressionDividend() throws RecognitionException {
		NumericValueExpressionDividendContext _localctx = new NumericValueExpressionDividendContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_numericValueExpressionDividend);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueExpressionDivisorContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public NumericValueExpressionDivisorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueExpressionDivisor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueExpressionDivisor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueExpressionDivisor(this);
		}
	}

	public final NumericValueExpressionDivisorContext numericValueExpressionDivisor() throws RecognitionException {
		NumericValueExpressionDivisorContext _localctx = new NumericValueExpressionDivisorContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_numericValueExpressionDivisor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4311);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrigonometricFunctionContext extends ParserRuleContext {
		public TrigonometricFunctionNameContext trigonometricFunctionName() {
			return getRuleContext(TrigonometricFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TrigonometricFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigonometricFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrigonometricFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrigonometricFunction(this);
		}
	}

	public final TrigonometricFunctionContext trigonometricFunction() throws RecognitionException {
		TrigonometricFunctionContext _localctx = new TrigonometricFunctionContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_trigonometricFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4313);
			trigonometricFunctionName();
			setState(4314);
			match(LEFT_PAREN);
			setState(4315);
			numericValueExpression(0);
			setState(4316);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrigonometricFunctionNameContext extends ParserRuleContext {
		public TerminalNode SIN() { return getToken(GQL_20240412Parser.SIN, 0); }
		public TerminalNode COS() { return getToken(GQL_20240412Parser.COS, 0); }
		public TerminalNode TAN() { return getToken(GQL_20240412Parser.TAN, 0); }
		public TerminalNode COT() { return getToken(GQL_20240412Parser.COT, 0); }
		public TerminalNode SINH() { return getToken(GQL_20240412Parser.SINH, 0); }
		public TerminalNode COSH() { return getToken(GQL_20240412Parser.COSH, 0); }
		public TerminalNode TANH() { return getToken(GQL_20240412Parser.TANH, 0); }
		public TerminalNode ASIN() { return getToken(GQL_20240412Parser.ASIN, 0); }
		public TerminalNode ACOS() { return getToken(GQL_20240412Parser.ACOS, 0); }
		public TerminalNode ATAN() { return getToken(GQL_20240412Parser.ATAN, 0); }
		public TerminalNode DEGREES() { return getToken(GQL_20240412Parser.DEGREES, 0); }
		public TerminalNode RADIANS() { return getToken(GQL_20240412Parser.RADIANS, 0); }
		public TrigonometricFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigonometricFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrigonometricFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrigonometricFunctionName(this);
		}
	}

	public final TrigonometricFunctionNameContext trigonometricFunctionName() throws RecognitionException {
		TrigonometricFunctionNameContext _localctx = new TrigonometricFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_trigonometricFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4318);
			_la = _input.LA(1);
			if ( !((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 18016322654833153L) != 0 || (((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & 3222011905L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralLogarithmFunctionContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(GQL_20240412Parser.LOG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public GeneralLogarithmBaseContext generalLogarithmBase() {
			return getRuleContext(GeneralLogarithmBaseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public GeneralLogarithmArgumentContext generalLogarithmArgument() {
			return getRuleContext(GeneralLogarithmArgumentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public GeneralLogarithmFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalLogarithmFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralLogarithmFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralLogarithmFunction(this);
		}
	}

	public final GeneralLogarithmFunctionContext generalLogarithmFunction() throws RecognitionException {
		GeneralLogarithmFunctionContext _localctx = new GeneralLogarithmFunctionContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_generalLogarithmFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			match(LOG);
			setState(4321);
			match(LEFT_PAREN);
			setState(4322);
			generalLogarithmBase();
			setState(4323);
			match(COMMA);
			setState(4324);
			generalLogarithmArgument();
			setState(4325);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralLogarithmBaseContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public GeneralLogarithmBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalLogarithmBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralLogarithmBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralLogarithmBase(this);
		}
	}

	public final GeneralLogarithmBaseContext generalLogarithmBase() throws RecognitionException {
		GeneralLogarithmBaseContext _localctx = new GeneralLogarithmBaseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_generalLogarithmBase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4327);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralLogarithmArgumentContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public GeneralLogarithmArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalLogarithmArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralLogarithmArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralLogarithmArgument(this);
		}
	}

	public final GeneralLogarithmArgumentContext generalLogarithmArgument() throws RecognitionException {
		GeneralLogarithmArgumentContext _localctx = new GeneralLogarithmArgumentContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_generalLogarithmArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4329);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonLogarithmContext extends ParserRuleContext {
		public TerminalNode LOG10() { return getToken(GQL_20240412Parser.LOG10, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public CommonLogarithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonLogarithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCommonLogarithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCommonLogarithm(this);
		}
	}

	public final CommonLogarithmContext commonLogarithm() throws RecognitionException {
		CommonLogarithmContext _localctx = new CommonLogarithmContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_commonLogarithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4331);
			match(LOG10);
			setState(4332);
			match(LEFT_PAREN);
			setState(4333);
			numericValueExpression(0);
			setState(4334);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NaturalLogarithmContext extends ParserRuleContext {
		public TerminalNode LN() { return getToken(GQL_20240412Parser.LN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public NaturalLogarithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalLogarithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNaturalLogarithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNaturalLogarithm(this);
		}
	}

	public final NaturalLogarithmContext naturalLogarithm() throws RecognitionException {
		NaturalLogarithmContext _localctx = new NaturalLogarithmContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_naturalLogarithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4336);
			match(LN);
			setState(4337);
			match(LEFT_PAREN);
			setState(4338);
			numericValueExpression(0);
			setState(4339);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExponentialFunctionContext extends ParserRuleContext {
		public TerminalNode EXP() { return getToken(GQL_20240412Parser.EXP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public ExponentialFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exponentialFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterExponentialFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitExponentialFunction(this);
		}
	}

	public final ExponentialFunctionContext exponentialFunction() throws RecognitionException {
		ExponentialFunctionContext _localctx = new ExponentialFunctionContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_exponentialFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			match(EXP);
			setState(4342);
			match(LEFT_PAREN);
			setState(4343);
			numericValueExpression(0);
			setState(4344);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PowerFunctionContext extends ParserRuleContext {
		public TerminalNode POWER() { return getToken(GQL_20240412Parser.POWER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionBaseContext numericValueExpressionBase() {
			return getRuleContext(NumericValueExpressionBaseContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public NumericValueExpressionExponentContext numericValueExpressionExponent() {
			return getRuleContext(NumericValueExpressionExponentContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public PowerFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_powerFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPowerFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPowerFunction(this);
		}
	}

	public final PowerFunctionContext powerFunction() throws RecognitionException {
		PowerFunctionContext _localctx = new PowerFunctionContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_powerFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4346);
			match(POWER);
			setState(4347);
			match(LEFT_PAREN);
			setState(4348);
			numericValueExpressionBase();
			setState(4349);
			match(COMMA);
			setState(4350);
			numericValueExpressionExponent();
			setState(4351);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueExpressionBaseContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public NumericValueExpressionBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueExpressionBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueExpressionBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueExpressionBase(this);
		}
	}

	public final NumericValueExpressionBaseContext numericValueExpressionBase() throws RecognitionException {
		NumericValueExpressionBaseContext _localctx = new NumericValueExpressionBaseContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_numericValueExpressionBase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4353);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericValueExpressionExponentContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public NumericValueExpressionExponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericValueExpressionExponent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNumericValueExpressionExponent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNumericValueExpressionExponent(this);
		}
	}

	public final NumericValueExpressionExponentContext numericValueExpressionExponent() throws RecognitionException {
		NumericValueExpressionExponentContext _localctx = new NumericValueExpressionExponentContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_numericValueExpressionExponent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SquareRootContext extends ParserRuleContext {
		public TerminalNode SQRT() { return getToken(GQL_20240412Parser.SQRT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public SquareRootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_squareRoot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSquareRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSquareRoot(this);
		}
	}

	public final SquareRootContext squareRoot() throws RecognitionException {
		SquareRootContext _localctx = new SquareRootContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_squareRoot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4357);
			match(SQRT);
			setState(4358);
			match(LEFT_PAREN);
			setState(4359);
			numericValueExpression(0);
			setState(4360);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FloorFunctionContext extends ParserRuleContext {
		public TerminalNode FLOOR() { return getToken(GQL_20240412Parser.FLOOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public FloorFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floorFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFloorFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFloorFunction(this);
		}
	}

	public final FloorFunctionContext floorFunction() throws RecognitionException {
		FloorFunctionContext _localctx = new FloorFunctionContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_floorFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4362);
			match(FLOOR);
			setState(4363);
			match(LEFT_PAREN);
			setState(4364);
			numericValueExpression(0);
			setState(4365);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CeilingFunctionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TerminalNode CEIL() { return getToken(GQL_20240412Parser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(GQL_20240412Parser.CEILING, 0); }
		public CeilingFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ceilingFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCeilingFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCeilingFunction(this);
		}
	}

	public final CeilingFunctionContext ceilingFunction() throws RecognitionException {
		CeilingFunctionContext _localctx = new CeilingFunctionContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_ceilingFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367);
			_la = _input.LA(1);
			if ( !(_la==CEIL || _la==CEILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4368);
			match(LEFT_PAREN);
			setState(4369);
			numericValueExpression(0);
			setState(4370);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterStringValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public CharacterStringValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterStringValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCharacterStringValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCharacterStringValueExpression(this);
		}
	}

	public final CharacterStringValueExpressionContext characterStringValueExpression() throws RecognitionException {
		CharacterStringValueExpressionContext _localctx = new CharacterStringValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_characterStringValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4372);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ByteStringValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ByteStringValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_byteStringValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterByteStringValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitByteStringValueExpression(this);
		}
	}

	public final ByteStringValueExpressionContext byteStringValueExpression() throws RecognitionException {
		ByteStringValueExpressionContext _localctx = new ByteStringValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_byteStringValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimOperandsContext extends ParserRuleContext {
		public TrimCharacterOrByteStringSourceContext trimCharacterOrByteStringSource() {
			return getRuleContext(TrimCharacterOrByteStringSourceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GQL_20240412Parser.FROM, 0); }
		public TrimSpecificationContext trimSpecification() {
			return getRuleContext(TrimSpecificationContext.class,0);
		}
		public TrimCharacterOrByteStringContext trimCharacterOrByteString() {
			return getRuleContext(TrimCharacterOrByteStringContext.class,0);
		}
		public TrimOperandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimOperands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimOperands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimOperands(this);
		}
	}

	public final TrimOperandsContext trimOperands() throws RecognitionException {
		TrimOperandsContext _localctx = new TrimOperandsContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_trimOperands);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH || _la==LEADING || _la==TRAILING) {
					{
					setState(4376);
					trimSpecification();
					}
				}

				setState(4380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8762849302180528028L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 309341980913L) != 0 || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -8011702113698201677L) != 0 || (((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 26393111092643L) != 0 || (((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 1688849860263935L) != 0 || (((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & 151L) != 0) {
					{
					setState(4379);
					trimCharacterOrByteString();
					}
				}

				setState(4382);
				match(FROM);
				}
				break;
			}
			setState(4385);
			trimCharacterOrByteStringSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimCharacterOrByteStringSourceContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TrimCharacterOrByteStringSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimCharacterOrByteStringSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimCharacterOrByteStringSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimCharacterOrByteStringSource(this);
		}
	}

	public final TrimCharacterOrByteStringSourceContext trimCharacterOrByteStringSource() throws RecognitionException {
		TrimCharacterOrByteStringSourceContext _localctx = new TrimCharacterOrByteStringSourceContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_trimCharacterOrByteStringSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimSpecificationContext extends ParserRuleContext {
		public TerminalNode LEADING() { return getToken(GQL_20240412Parser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(GQL_20240412Parser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(GQL_20240412Parser.BOTH, 0); }
		public TrimSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimSpecification(this);
		}
	}

	public final TrimSpecificationContext trimSpecification() throws RecognitionException {
		TrimSpecificationContext _localctx = new TrimSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_trimSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimCharacterOrByteStringContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TrimCharacterOrByteStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimCharacterOrByteString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTrimCharacterOrByteString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTrimCharacterOrByteString(this);
		}
	}

	public final TrimCharacterOrByteStringContext trimCharacterOrByteString() throws RecognitionException {
		TrimCharacterOrByteStringContext _localctx = new TrimCharacterOrByteStringContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_trimCharacterOrByteString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(GQL_20240412Parser.NFC, 0); }
		public TerminalNode NFD() { return getToken(GQL_20240412Parser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(GQL_20240412Parser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(GQL_20240412Parser.NFKD, 0); }
		public NormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNormalForm(this);
		}
	}

	public final NormalFormContext normalForm() throws RecognitionException {
		NormalFormContext _localctx = new NormalFormContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_normalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4393);
			_la = _input.LA(1);
			if ( !((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & 15L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLengthContext extends ParserRuleContext {
		public NumericValueExpressionContext numericValueExpression() {
			return getRuleContext(NumericValueExpressionContext.class,0);
		}
		public StringLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterStringLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitStringLength(this);
		}
	}

	public final StringLengthContext stringLength() throws RecognitionException {
		StringLengthContext _localctx = new StringLengthContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_stringLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4395);
			numericValueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public DatetimeValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeValueExpression(this);
		}
	}

	public final DatetimeValueExpressionContext datetimeValueExpression() throws RecognitionException {
		DatetimeValueExpressionContext _localctx = new DatetimeValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_datetimeValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeValueFunctionContext extends ParserRuleContext {
		public DateFunctionContext dateFunction() {
			return getRuleContext(DateFunctionContext.class,0);
		}
		public TimeFunctionContext timeFunction() {
			return getRuleContext(TimeFunctionContext.class,0);
		}
		public DatetimeFunctionContext datetimeFunction() {
			return getRuleContext(DatetimeFunctionContext.class,0);
		}
		public LocaltimeFunctionContext localtimeFunction() {
			return getRuleContext(LocaltimeFunctionContext.class,0);
		}
		public LocaldatetimeFunctionContext localdatetimeFunction() {
			return getRuleContext(LocaldatetimeFunctionContext.class,0);
		}
		public DatetimeValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeValueFunction(this);
		}
	}

	public final DatetimeValueFunctionContext datetimeValueFunction() throws RecognitionException {
		DatetimeValueFunctionContext _localctx = new DatetimeValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_datetimeValueFunction);
		try {
			setState(4404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4399);
				dateFunction();
				}
				break;
			case CURRENT_TIME:
			case ZONED_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4400);
				timeFunction();
				}
				break;
			case CURRENT_TIMESTAMP:
			case ZONED_DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(4401);
				datetimeFunction();
				}
				break;
			case LOCAL_TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(4402);
				localtimeFunction();
				}
				break;
			case LOCAL_DATETIME:
			case LOCAL_TIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4403);
				localdatetimeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(GQL_20240412Parser.CURRENT_DATE, 0); }
		public TerminalNode DATE() { return getToken(GQL_20240412Parser.DATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public DateFunctionParametersContext dateFunctionParameters() {
			return getRuleContext(DateFunctionParametersContext.class,0);
		}
		public DateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDateFunction(this);
		}
	}

	public final DateFunctionContext dateFunction() throws RecognitionException {
		DateFunctionContext _localctx = new DateFunctionContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_dateFunction);
		int _la;
		try {
			setState(4413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4406);
				match(CURRENT_DATE);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4407);
				match(DATE);
				setState(4408);
				match(LEFT_PAREN);
				setState(4410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==RECORD || _la==LEFT_BRACE) {
					{
					setState(4409);
					dateFunctionParameters();
					}
				}

				setState(4412);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIME() { return getToken(GQL_20240412Parser.CURRENT_TIME, 0); }
		public TerminalNode ZONED_TIME() { return getToken(GQL_20240412Parser.ZONED_TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeFunction(this);
		}
	}

	public final TimeFunctionContext timeFunction() throws RecognitionException {
		TimeFunctionContext _localctx = new TimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_timeFunction);
		int _la;
		try {
			setState(4422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4415);
				match(CURRENT_TIME);
				}
				break;
			case ZONED_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4416);
				match(ZONED_TIME);
				setState(4417);
				match(LEFT_PAREN);
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==RECORD || _la==LEFT_BRACE) {
					{
					setState(4418);
					timeFunctionParameters();
					}
				}

				setState(4421);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaltimeFunctionContext extends ParserRuleContext {
		public TerminalNode LOCAL_TIME() { return getToken(GQL_20240412Parser.LOCAL_TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public LocaltimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localtimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLocaltimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLocaltimeFunction(this);
		}
	}

	public final LocaltimeFunctionContext localtimeFunction() throws RecognitionException {
		LocaltimeFunctionContext _localctx = new LocaltimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_localtimeFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4424);
			match(LOCAL_TIME);
			setState(4430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4425);
				match(LEFT_PAREN);
				setState(4427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==RECORD || _la==LEFT_BRACE) {
					{
					setState(4426);
					timeFunctionParameters();
					}
				}

				setState(4429);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GQL_20240412Parser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode ZONED_DATETIME() { return getToken(GQL_20240412Parser.ZONED_DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public DatetimeFunctionParametersContext datetimeFunctionParameters() {
			return getRuleContext(DatetimeFunctionParametersContext.class,0);
		}
		public DatetimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeFunction(this);
		}
	}

	public final DatetimeFunctionContext datetimeFunction() throws RecognitionException {
		DatetimeFunctionContext _localctx = new DatetimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_datetimeFunction);
		int _la;
		try {
			setState(4439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4432);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case ZONED_DATETIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4433);
				match(ZONED_DATETIME);
				setState(4434);
				match(LEFT_PAREN);
				setState(4436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==RECORD || _la==LEFT_BRACE) {
					{
					setState(4435);
					datetimeFunctionParameters();
					}
				}

				setState(4438);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaldatetimeFunctionContext extends ParserRuleContext {
		public TerminalNode LOCAL_TIMESTAMP() { return getToken(GQL_20240412Parser.LOCAL_TIMESTAMP, 0); }
		public TerminalNode LOCAL_DATETIME() { return getToken(GQL_20240412Parser.LOCAL_DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public DatetimeFunctionParametersContext datetimeFunctionParameters() {
			return getRuleContext(DatetimeFunctionParametersContext.class,0);
		}
		public LocaldatetimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localdatetimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLocaldatetimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLocaldatetimeFunction(this);
		}
	}

	public final LocaldatetimeFunctionContext localdatetimeFunction() throws RecognitionException {
		LocaldatetimeFunctionContext _localctx = new LocaldatetimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_localdatetimeFunction);
		int _la;
		try {
			setState(4448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441);
				match(LOCAL_TIMESTAMP);
				}
				break;
			case LOCAL_DATETIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4442);
				match(LOCAL_DATETIME);
				setState(4443);
				match(LEFT_PAREN);
				setState(4445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==RECORD || _la==LEFT_BRACE) {
					{
					setState(4444);
					datetimeFunctionParameters();
					}
				}

				setState(4447);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateFunctionParametersContext extends ParserRuleContext {
		public DateStringContext dateString() {
			return getRuleContext(DateStringContext.class,0);
		}
		public RecordConstructorContext recordConstructor() {
			return getRuleContext(RecordConstructorContext.class,0);
		}
		public DateFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDateFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDateFunctionParameters(this);
		}
	}

	public final DateFunctionParametersContext dateFunctionParameters() throws RecognitionException {
		DateFunctionParametersContext _localctx = new DateFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_dateFunctionParameters);
		try {
			setState(4452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4450);
				dateString();
				}
				break;
			case RECORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4451);
				recordConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TimeStringContext timeString() {
			return getRuleContext(TimeStringContext.class,0);
		}
		public RecordConstructorContext recordConstructor() {
			return getRuleContext(RecordConstructorContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeFunctionParameters(this);
		}
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_timeFunctionParameters);
		try {
			setState(4456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4454);
				timeString();
				}
				break;
			case RECORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4455);
				recordConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeFunctionParametersContext extends ParserRuleContext {
		public DatetimeStringContext datetimeString() {
			return getRuleContext(DatetimeStringContext.class,0);
		}
		public RecordConstructorContext recordConstructor() {
			return getRuleContext(RecordConstructorContext.class,0);
		}
		public DatetimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeFunctionParameters(this);
		}
	}

	public final DatetimeFunctionParametersContext datetimeFunctionParameters() throws RecognitionException {
		DatetimeFunctionParametersContext _localctx = new DatetimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_datetimeFunctionParameters);
		try {
			setState(4460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4458);
				datetimeString();
				}
				break;
			case RECORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4459);
				recordConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public DurationValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationValueExpression(this);
		}
	}

	public final DurationValueExpressionContext durationValueExpression() throws RecognitionException {
		DurationValueExpressionContext _localctx = new DurationValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_durationValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4462);
			valueExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeSubtractionContext extends ParserRuleContext {
		public TerminalNode DURATION_BETWEEN() { return getToken(GQL_20240412Parser.DURATION_BETWEEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public DatetimeSubtractionParametersContext datetimeSubtractionParameters() {
			return getRuleContext(DatetimeSubtractionParametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public TemporalDurationQualifierContext temporalDurationQualifier() {
			return getRuleContext(TemporalDurationQualifierContext.class,0);
		}
		public DatetimeSubtractionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeSubtraction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeSubtraction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeSubtraction(this);
		}
	}

	public final DatetimeSubtractionContext datetimeSubtraction() throws RecognitionException {
		DatetimeSubtractionContext _localctx = new DatetimeSubtractionContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_datetimeSubtraction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4464);
			match(DURATION_BETWEEN);
			setState(4465);
			match(LEFT_PAREN);
			setState(4466);
			datetimeSubtractionParameters();
			setState(4467);
			match(RIGHT_PAREN);
			setState(4469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4468);
				temporalDurationQualifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeSubtractionParametersContext extends ParserRuleContext {
		public DatetimeValueExpression1Context datetimeValueExpression1() {
			return getRuleContext(DatetimeValueExpression1Context.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQL_20240412Parser.COMMA, 0); }
		public DatetimeValueExpression2Context datetimeValueExpression2() {
			return getRuleContext(DatetimeValueExpression2Context.class,0);
		}
		public DatetimeSubtractionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeSubtractionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeSubtractionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeSubtractionParameters(this);
		}
	}

	public final DatetimeSubtractionParametersContext datetimeSubtractionParameters() throws RecognitionException {
		DatetimeSubtractionParametersContext _localctx = new DatetimeSubtractionParametersContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_datetimeSubtractionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4471);
			datetimeValueExpression1();
			setState(4472);
			match(COMMA);
			setState(4473);
			datetimeValueExpression2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeValueExpression1Context extends ParserRuleContext {
		public DatetimeValueExpressionContext datetimeValueExpression() {
			return getRuleContext(DatetimeValueExpressionContext.class,0);
		}
		public DatetimeValueExpression1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeValueExpression1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeValueExpression1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeValueExpression1(this);
		}
	}

	public final DatetimeValueExpression1Context datetimeValueExpression1() throws RecognitionException {
		DatetimeValueExpression1Context _localctx = new DatetimeValueExpression1Context(_ctx, getState());
		enterRule(_localctx, 1046, RULE_datetimeValueExpression1);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4475);
			datetimeValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeValueExpression2Context extends ParserRuleContext {
		public DatetimeValueExpressionContext datetimeValueExpression() {
			return getRuleContext(DatetimeValueExpressionContext.class,0);
		}
		public DatetimeValueExpression2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeValueExpression2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeValueExpression2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeValueExpression2(this);
		}
	}

	public final DatetimeValueExpression2Context datetimeValueExpression2() throws RecognitionException {
		DatetimeValueExpression2Context _localctx = new DatetimeValueExpression2Context(_ctx, getState());
		enterRule(_localctx, 1048, RULE_datetimeValueExpression2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4477);
			datetimeValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationValueFunctionContext extends ParserRuleContext {
		public DurationFunctionContext durationFunction() {
			return getRuleContext(DurationFunctionContext.class,0);
		}
		public AbsoluteValueExpressionContext absoluteValueExpression() {
			return getRuleContext(AbsoluteValueExpressionContext.class,0);
		}
		public DurationValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationValueFunction(this);
		}
	}

	public final DurationValueFunctionContext durationValueFunction() throws RecognitionException {
		DurationValueFunctionContext _localctx = new DurationValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_durationValueFunction);
		try {
			setState(4481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DURATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4479);
				durationFunction();
				}
				break;
			case ABS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4480);
				absoluteValueExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationFunctionContext extends ParserRuleContext {
		public TerminalNode DURATION() { return getToken(GQL_20240412Parser.DURATION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQL_20240412Parser.LEFT_PAREN, 0); }
		public DurationFunctionParametersContext durationFunctionParameters() {
			return getRuleContext(DurationFunctionParametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQL_20240412Parser.RIGHT_PAREN, 0); }
		public DurationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationFunction(this);
		}
	}

	public final DurationFunctionContext durationFunction() throws RecognitionException {
		DurationFunctionContext _localctx = new DurationFunctionContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_durationFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4483);
			match(DURATION);
			setState(4484);
			match(LEFT_PAREN);
			setState(4485);
			durationFunctionParameters();
			setState(4486);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationFunctionParametersContext extends ParserRuleContext {
		public DurationStringContext durationString() {
			return getRuleContext(DurationStringContext.class,0);
		}
		public RecordConstructorContext recordConstructor() {
			return getRuleContext(RecordConstructorContext.class,0);
		}
		public DurationFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationFunctionParameters(this);
		}
	}

	public final DurationFunctionParametersContext durationFunctionParameters() throws RecognitionException {
		DurationFunctionParametersContext _localctx = new DurationFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_durationFunctionParameters);
		try {
			setState(4490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4488);
				durationString();
				}
				break;
			case RECORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4489);
				recordConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ObjectNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterObjectName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitObjectName(this);
		}
	}

	public final ObjectNameContext objectName() throws RecognitionException {
		ObjectNameContext _localctx = new ObjectNameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_objectName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectNameOrBindingVariableContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public ObjectNameOrBindingVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectNameOrBindingVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterObjectNameOrBindingVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitObjectNameOrBindingVariable(this);
		}
	}

	public final ObjectNameOrBindingVariableContext objectNameOrBindingVariable() throws RecognitionException {
		ObjectNameOrBindingVariableContext _localctx = new ObjectNameOrBindingVariableContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_objectNameOrBindingVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4494);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectoryNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DirectoryNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directoryName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDirectoryName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDirectoryName(this);
		}
	}

	public final DirectoryNameContext directoryName() throws RecognitionException {
		DirectoryNameContext _localctx = new DirectoryNameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_directoryName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4496);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSchemaName(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4498);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphNameContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public DelimitedGraphNameContext delimitedGraphName() {
			return getRuleContext(DelimitedGraphNameContext.class,0);
		}
		public GraphNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphName(this);
		}
	}

	public final GraphNameContext graphName() throws RecognitionException {
		GraphNameContext _localctx = new GraphNameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_graphName);
		try {
			setState(4502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4500);
				regularIdentifier();
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4501);
				delimitedGraphName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedGraphNameContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0); }
		public TerminalNode ACCENT_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0); }
		public DelimitedGraphNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedGraphName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDelimitedGraphName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDelimitedGraphName(this);
		}
	}

	public final DelimitedGraphNameContext delimitedGraphName() throws RecognitionException {
		DelimitedGraphNameContext _localctx = new DelimitedGraphNameContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_delimitedGraphName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4504);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GraphTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGraphTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGraphTypeName(this);
		}
	}

	public final GraphTypeNameContext graphTypeName() throws RecognitionException {
		GraphTypeNameContext _localctx = new GraphTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_graphTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4506);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NodeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeTypeName(this);
		}
	}

	public final NodeTypeNameContext nodeTypeName() throws RecognitionException {
		NodeTypeNameContext _localctx = new NodeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_nodeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EdgeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeTypeName(this);
		}
	}

	public final EdgeTypeNameContext edgeTypeName() throws RecognitionException {
		EdgeTypeNameContext _localctx = new EdgeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_edgeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4510);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableNameContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public DelimitedBindingTableNameContext delimitedBindingTableName() {
			return getRuleContext(DelimitedBindingTableNameContext.class,0);
		}
		public BindingTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingTableName(this);
		}
	}

	public final BindingTableNameContext bindingTableName() throws RecognitionException {
		BindingTableNameContext _localctx = new BindingTableNameContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_bindingTableName);
		try {
			setState(4514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4512);
				regularIdentifier();
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4513);
				delimitedBindingTableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedBindingTableNameContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0); }
		public TerminalNode ACCENT_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0); }
		public DelimitedBindingTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedBindingTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDelimitedBindingTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDelimitedBindingTableName(this);
		}
	}

	public final DelimitedBindingTableNameContext delimitedBindingTableName() throws RecognitionException {
		DelimitedBindingTableNameContext _localctx = new DelimitedBindingTableNameContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_delimitedBindingTableName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la==ACCENT_QUOTED_CHARACTER_SEQUENCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitProcedureName(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4518);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitLabelName(this);
		}
	}

	public final LabelNameContext labelName() throws RecognitionException {
		LabelNameContext _localctx = new LabelNameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_labelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4520);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPropertyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPropertyName(this);
		}
	}

	public final PropertyNameContext propertyName() throws RecognitionException {
		PropertyNameContext _localctx = new PropertyNameContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_propertyName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4522);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterFieldName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitFieldName(this);
		}
	}

	public final FieldNameContext fieldName() throws RecognitionException {
		FieldNameContext _localctx = new FieldNameContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_fieldName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public ElementVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterElementVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitElementVariable(this);
		}
	}

	public final ElementVariableContext elementVariable() throws RecognitionException {
		ElementVariableContext _localctx = new ElementVariableContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_elementVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4526);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public PathVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterPathVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitPathVariable(this);
		}
	}

	public final PathVariableContext pathVariable() throws RecognitionException {
		PathVariableContext _localctx = new PathVariableContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_pathVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4528);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpathVariableContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public SubpathVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpathVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterSubpathVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitSubpathVariable(this);
		}
	}

	public final SubpathVariableContext subpathVariable() throws RecognitionException {
		SubpathVariableContext _localctx = new SubpathVariableContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_subpathVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4530);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public BindingVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterBindingVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitBindingVariable(this);
		}
	}

	public final BindingVariableContext bindingVariable() throws RecognitionException {
		BindingVariableContext _localctx = new BindingVariableContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_bindingVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4532);
			regularIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedLiteralContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public GeneralLiteralContext generalLiteral() {
			return getRuleContext(GeneralLiteralContext.class,0);
		}
		public UnsignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedLiteral(this);
		}
	}

	public final UnsignedLiteralContext unsignedLiteral() throws RecognitionException {
		UnsignedLiteralContext _localctx = new UnsignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_unsignedLiteral);
		try {
			setState(4536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4534);
				unsignedNumericLiteral();
				}
				break;
			case BOOLEAN_LITERAL:
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
			case BYTE_STRING_LITERAL:
			case ARRAY:
			case DATE:
			case DATETIME:
			case DURATION:
			case GROUP:
			case LIST:
			case NULL:
			case RECORD:
			case TIME:
			case TIMESTAMP:
			case LEFT_BRACE:
			case LEFT_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4535);
				generalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralLiteralContext extends ParserRuleContext {
		public TerminalNode BOOLEAN_LITERAL() { return getToken(GQL_20240412Parser.BOOLEAN_LITERAL, 0); }
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public TerminalNode BYTE_STRING_LITERAL() { return getToken(GQL_20240412Parser.BYTE_STRING_LITERAL, 0); }
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public DurationLiteralContext durationLiteral() {
			return getRuleContext(DurationLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public ListLiteralContext listLiteral() {
			return getRuleContext(ListLiteralContext.class,0);
		}
		public RecordLiteralContext recordLiteral() {
			return getRuleContext(RecordLiteralContext.class,0);
		}
		public GeneralLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterGeneralLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitGeneralLiteral(this);
		}
	}

	public final GeneralLiteralContext generalLiteral() throws RecognitionException {
		GeneralLiteralContext _localctx = new GeneralLiteralContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_generalLiteral);
		try {
			setState(4546);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOLEAN_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4538);
				match(BOOLEAN_LITERAL);
				}
				break;
			case SINGLE_QUOTED_CHARACTER_SEQUENCE:
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4539);
				characterStringLiteral();
				}
				break;
			case BYTE_STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4540);
				match(BYTE_STRING_LITERAL);
				}
				break;
			case DATE:
			case DATETIME:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(4541);
				temporalLiteral();
				}
				break;
			case DURATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(4542);
				durationLiteral();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4543);
				nullLiteral();
				}
				break;
			case ARRAY:
			case GROUP:
			case LIST:
			case LEFT_BRACKET:
				enterOuterAlt(_localctx, 7);
				{
				setState(4544);
				listLiteral();
				}
				break;
			case RECORD:
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4545);
				recordLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalLiteralContext extends ParserRuleContext {
		public DateLiteralContext dateLiteral() {
			return getRuleContext(DateLiteralContext.class,0);
		}
		public TimeLiteralContext timeLiteral() {
			return getRuleContext(TimeLiteralContext.class,0);
		}
		public DatetimeLiteralContext datetimeLiteral() {
			return getRuleContext(DatetimeLiteralContext.class,0);
		}
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTemporalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTemporalLiteral(this);
		}
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_temporalLiteral);
		try {
			setState(4551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4548);
				dateLiteral();
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4549);
				timeLiteral();
				}
				break;
			case DATETIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(4550);
				datetimeLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateLiteralContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GQL_20240412Parser.DATE, 0); }
		public DateStringContext dateString() {
			return getRuleContext(DateStringContext.class,0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDateLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDateLiteral(this);
		}
	}

	public final DateLiteralContext dateLiteral() throws RecognitionException {
		DateLiteralContext _localctx = new DateLiteralContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_dateLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			match(DATE);
			setState(4554);
			dateString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeLiteralContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(GQL_20240412Parser.TIME, 0); }
		public TimeStringContext timeString() {
			return getRuleContext(TimeStringContext.class,0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeLiteral(this);
		}
	}

	public final TimeLiteralContext timeLiteral() throws RecognitionException {
		TimeLiteralContext _localctx = new TimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_timeLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			match(TIME);
			setState(4557);
			timeString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeLiteralContext extends ParserRuleContext {
		public DatetimeStringContext datetimeString() {
			return getRuleContext(DatetimeStringContext.class,0);
		}
		public TerminalNode DATETIME() { return getToken(GQL_20240412Parser.DATETIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GQL_20240412Parser.TIMESTAMP, 0); }
		public DatetimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeLiteral(this);
		}
	}

	public final DatetimeLiteralContext datetimeLiteral() throws RecognitionException {
		DatetimeLiteralContext _localctx = new DatetimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_datetimeLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4559);
			_la = _input.LA(1);
			if ( !(_la==DATETIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4560);
			datetimeString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListLiteralContext extends ParserRuleContext {
		public ListValueConstructorByEnumerationContext listValueConstructorByEnumeration() {
			return getRuleContext(ListValueConstructorByEnumerationContext.class,0);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterListLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitListLiteral(this);
		}
	}

	public final ListLiteralContext listLiteral() throws RecognitionException {
		ListLiteralContext _localctx = new ListLiteralContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_listLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			listValueConstructorByEnumeration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordLiteralContext extends ParserRuleContext {
		public RecordConstructorContext recordConstructor() {
			return getRuleContext(RecordConstructorContext.class,0);
		}
		public RecordLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRecordLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRecordLiteral(this);
		}
	}

	public final RecordLiteralContext recordLiteral() throws RecognitionException {
		RecordLiteralContext _localctx = new RecordLiteralContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_recordLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			recordConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public RegularIdentifierContext regularIdentifier() {
			return getRuleContext(RegularIdentifierContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0); }
		public TerminalNode ACCENT_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_identifier);
		try {
			setState(4569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4566);
				regularIdentifier();
				}
				break;
			case DOUBLE_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4567);
				match(DOUBLE_QUOTED_CHARACTER_SEQUENCE);
				}
				break;
			case ACCENT_QUOTED_CHARACTER_SEQUENCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4568);
				match(ACCENT_QUOTED_CHARACTER_SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RegularIdentifierContext extends ParserRuleContext {
		public TerminalNode REGULAR_IDENTIFIER() { return getToken(GQL_20240412Parser.REGULAR_IDENTIFIER, 0); }
		public NonReservedWordsContext nonReservedWords() {
			return getRuleContext(NonReservedWordsContext.class,0);
		}
		public RegularIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterRegularIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitRegularIdentifier(this);
		}
	}

	public final RegularIdentifierContext regularIdentifier() throws RecognitionException {
		RegularIdentifierContext _localctx = new RegularIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_regularIdentifier);
		try {
			setState(4573);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4571);
				match(REGULAR_IDENTIFIER);
				}
				break;
			case ACYCLIC:
			case BINDING:
			case BINDINGS:
			case CONNECTING:
			case DESTINATION:
			case DIFFERENT:
			case DIRECTED:
			case EDGE:
			case EDGES:
			case ELEMENT:
			case ELEMENTS:
			case FIRST:
			case GRAPH:
			case GROUPS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODE:
			case NORMALIZED:
			case ONLY:
			case ORDINALITY:
			case PROPERTY:
			case READ:
			case RELATIONSHIP:
			case RELATIONSHIPS:
			case REPEATABLE:
			case SHORTEST:
			case SIMPLE:
			case SOURCE:
			case TABLE:
			case TEMP:
			case TO:
			case TRAIL:
			case TRANSACTION:
			case TYPE:
			case UNDIRECTED:
			case VERTEX:
			case WALK:
			case WITHOUT:
			case WRITE:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4572);
				nonReservedWords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeZoneStringContext extends ParserRuleContext {
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public TimeZoneStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeZoneString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeZoneString(this);
		}
	}

	public final TimeZoneStringContext timeZoneString() throws RecognitionException {
		TimeZoneStringContext _localctx = new TimeZoneStringContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_timeZoneString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4575);
			characterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterStringLiteralContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.SINGLE_QUOTED_CHARACTER_SEQUENCE, 0); }
		public TerminalNode DOUBLE_QUOTED_CHARACTER_SEQUENCE() { return getToken(GQL_20240412Parser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0); }
		public CharacterStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterCharacterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitCharacterStringLiteral(this);
		}
	}

	public final CharacterStringLiteralContext characterStringLiteral() throws RecognitionException {
		CharacterStringLiteralContext _localctx = new CharacterStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_characterStringLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			_la = _input.LA(1);
			if ( !(_la==SINGLE_QUOTED_CHARACTER_SEQUENCE || _la==DOUBLE_QUOTED_CHARACTER_SEQUENCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedNumericLiteralContext extends ParserRuleContext {
		public ExactNumericLiteralContext exactNumericLiteral() {
			return getRuleContext(ExactNumericLiteralContext.class,0);
		}
		public ApproximateNumericLiteralContext approximateNumericLiteral() {
			return getRuleContext(ApproximateNumericLiteralContext.class,0);
		}
		public UnsignedNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedNumericLiteral(this);
		}
	}

	public final UnsignedNumericLiteralContext unsignedNumericLiteral() throws RecognitionException {
		UnsignedNumericLiteralContext _localctx = new UnsignedNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_unsignedNumericLiteral);
		try {
			setState(4581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4579);
				exactNumericLiteral();
				}
				break;
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
			case UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(4580);
				approximateNumericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExactNumericLiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX, 0); }
		public UnsignedIntegerContext unsignedInteger() {
			return getRuleContext(UnsignedIntegerContext.class,0);
		}
		public ExactNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exactNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterExactNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitExactNumericLiteral(this);
		}
	}

	public final ExactNumericLiteralContext exactNumericLiteral() throws RecognitionException {
		ExactNumericLiteralContext _localctx = new ExactNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_exactNumericLiteral);
		try {
			setState(4588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(4583);
				match(UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
				}
				break;
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(4584);
				match(UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
				}
				break;
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
				enterOuterAlt(_localctx, 3);
				{
				setState(4585);
				match(UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX);
				}
				break;
			case UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
				enterOuterAlt(_localctx, 4);
				{
				setState(4586);
				match(UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX);
				}
				break;
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 5);
				{
				setState(4587);
				unsignedInteger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApproximateNumericLiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0); }
		public TerminalNode UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX, 0); }
		public ApproximateNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximateNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterApproximateNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitApproximateNumericLiteral(this);
		}
	}

	public final ApproximateNumericLiteralContext approximateNumericLiteral() throws RecognitionException {
		ApproximateNumericLiteralContext _localctx = new ApproximateNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_approximateNumericLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4590);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 42496L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedIntegerContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_HEXADECIMAL_INTEGER() { return getToken(GQL_20240412Parser.UNSIGNED_HEXADECIMAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_OCTAL_INTEGER() { return getToken(GQL_20240412Parser.UNSIGNED_OCTAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_BINARY_INTEGER() { return getToken(GQL_20240412Parser.UNSIGNED_BINARY_INTEGER, 0); }
		public UnsignedIntegerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedInteger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedInteger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedInteger(this);
		}
	}

	public final UnsignedIntegerContext unsignedInteger() throws RecognitionException {
		UnsignedIntegerContext _localctx = new UnsignedIntegerContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_unsignedInteger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4592);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedDecimalIntegerContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQL_20240412Parser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public UnsignedDecimalIntegerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedDecimalInteger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterUnsignedDecimalInteger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitUnsignedDecimalInteger(this);
		}
	}

	public final UnsignedDecimalIntegerContext unsignedDecimalInteger() throws RecognitionException {
		UnsignedDecimalIntegerContext _localctx = new UnsignedDecimalIntegerContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_unsignedDecimalInteger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(GQL_20240412Parser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNullLiteral(this);
		}
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_nullLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4596);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateStringContext extends ParserRuleContext {
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public DateStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDateString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDateString(this);
		}
	}

	public final DateStringContext dateString() throws RecognitionException {
		DateStringContext _localctx = new DateStringContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_dateString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4598);
			characterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeStringContext extends ParserRuleContext {
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public TimeStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterTimeString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitTimeString(this);
		}
	}

	public final TimeStringContext timeString() throws RecognitionException {
		TimeStringContext _localctx = new TimeStringContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_timeString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4600);
			characterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeStringContext extends ParserRuleContext {
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public DatetimeStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDatetimeString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDatetimeString(this);
		}
	}

	public final DatetimeStringContext datetimeString() throws RecognitionException {
		DatetimeStringContext _localctx = new DatetimeStringContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_datetimeString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			characterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationLiteralContext extends ParserRuleContext {
		public TerminalNode DURATION() { return getToken(GQL_20240412Parser.DURATION, 0); }
		public DurationStringContext durationString() {
			return getRuleContext(DurationStringContext.class,0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationLiteral(this);
		}
	}

	public final DurationLiteralContext durationLiteral() throws RecognitionException {
		DurationLiteralContext _localctx = new DurationLiteralContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_durationLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4604);
			match(DURATION);
			setState(4605);
			durationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationStringContext extends ParserRuleContext {
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public DurationStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterDurationString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitDurationString(this);
		}
	}

	public final DurationStringContext durationString() throws RecognitionException {
		DurationStringContext _localctx = new DurationStringContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_durationString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4607);
			characterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeSynonymContext extends ParserRuleContext {
		public TerminalNode NODE() { return getToken(GQL_20240412Parser.NODE, 0); }
		public TerminalNode VERTEX() { return getToken(GQL_20240412Parser.VERTEX, 0); }
		public NodeSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNodeSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNodeSynonym(this);
		}
	}

	public final NodeSynonymContext nodeSynonym() throws RecognitionException {
		NodeSynonymContext _localctx = new NodeSynonymContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_nodeSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4609);
			_la = _input.LA(1);
			if ( !(_la==NODE || _la==VERTEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgesSynonymContext extends ParserRuleContext {
		public TerminalNode EDGES() { return getToken(GQL_20240412Parser.EDGES, 0); }
		public TerminalNode RELATIONSHIPS() { return getToken(GQL_20240412Parser.RELATIONSHIPS, 0); }
		public EdgesSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgesSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgesSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgesSynonym(this);
		}
	}

	public final EdgesSynonymContext edgesSynonym() throws RecognitionException {
		EdgesSynonymContext _localctx = new EdgesSynonymContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_edgesSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4611);
			_la = _input.LA(1);
			if ( !(_la==EDGES || _la==RELATIONSHIPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeSynonymContext extends ParserRuleContext {
		public TerminalNode EDGE() { return getToken(GQL_20240412Parser.EDGE, 0); }
		public TerminalNode RELATIONSHIP() { return getToken(GQL_20240412Parser.RELATIONSHIP, 0); }
		public EdgeSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterEdgeSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitEdgeSynonym(this);
		}
	}

	public final EdgeSynonymContext edgeSynonym() throws RecognitionException {
		EdgeSynonymContext _localctx = new EdgeSynonymContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_edgeSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4613);
			_la = _input.LA(1);
			if ( !(_la==EDGE || _la==RELATIONSHIP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedWordsContext extends ParserRuleContext {
		public TerminalNode ACYCLIC() { return getToken(GQL_20240412Parser.ACYCLIC, 0); }
		public TerminalNode BINDING() { return getToken(GQL_20240412Parser.BINDING, 0); }
		public TerminalNode BINDINGS() { return getToken(GQL_20240412Parser.BINDINGS, 0); }
		public TerminalNode CONNECTING() { return getToken(GQL_20240412Parser.CONNECTING, 0); }
		public TerminalNode DESTINATION() { return getToken(GQL_20240412Parser.DESTINATION, 0); }
		public TerminalNode DIFFERENT() { return getToken(GQL_20240412Parser.DIFFERENT, 0); }
		public TerminalNode DIRECTED() { return getToken(GQL_20240412Parser.DIRECTED, 0); }
		public TerminalNode EDGE() { return getToken(GQL_20240412Parser.EDGE, 0); }
		public TerminalNode EDGES() { return getToken(GQL_20240412Parser.EDGES, 0); }
		public TerminalNode ELEMENT() { return getToken(GQL_20240412Parser.ELEMENT, 0); }
		public TerminalNode ELEMENTS() { return getToken(GQL_20240412Parser.ELEMENTS, 0); }
		public TerminalNode FIRST() { return getToken(GQL_20240412Parser.FIRST, 0); }
		public TerminalNode GRAPH() { return getToken(GQL_20240412Parser.GRAPH, 0); }
		public TerminalNode GROUPS() { return getToken(GQL_20240412Parser.GROUPS, 0); }
		public TerminalNode KEEP() { return getToken(GQL_20240412Parser.KEEP, 0); }
		public TerminalNode LABEL() { return getToken(GQL_20240412Parser.LABEL, 0); }
		public TerminalNode LABELED() { return getToken(GQL_20240412Parser.LABELED, 0); }
		public TerminalNode LABELS() { return getToken(GQL_20240412Parser.LABELS, 0); }
		public TerminalNode LAST() { return getToken(GQL_20240412Parser.LAST, 0); }
		public TerminalNode NFC() { return getToken(GQL_20240412Parser.NFC, 0); }
		public TerminalNode NFD() { return getToken(GQL_20240412Parser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(GQL_20240412Parser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(GQL_20240412Parser.NFKD, 0); }
		public TerminalNode NO() { return getToken(GQL_20240412Parser.NO, 0); }
		public TerminalNode NODE() { return getToken(GQL_20240412Parser.NODE, 0); }
		public TerminalNode NORMALIZED() { return getToken(GQL_20240412Parser.NORMALIZED, 0); }
		public TerminalNode ONLY() { return getToken(GQL_20240412Parser.ONLY, 0); }
		public TerminalNode ORDINALITY() { return getToken(GQL_20240412Parser.ORDINALITY, 0); }
		public TerminalNode PROPERTY() { return getToken(GQL_20240412Parser.PROPERTY, 0); }
		public TerminalNode READ() { return getToken(GQL_20240412Parser.READ, 0); }
		public TerminalNode RELATIONSHIP() { return getToken(GQL_20240412Parser.RELATIONSHIP, 0); }
		public TerminalNode RELATIONSHIPS() { return getToken(GQL_20240412Parser.RELATIONSHIPS, 0); }
		public TerminalNode REPEATABLE() { return getToken(GQL_20240412Parser.REPEATABLE, 0); }
		public TerminalNode SHORTEST() { return getToken(GQL_20240412Parser.SHORTEST, 0); }
		public TerminalNode SIMPLE() { return getToken(GQL_20240412Parser.SIMPLE, 0); }
		public TerminalNode SOURCE() { return getToken(GQL_20240412Parser.SOURCE, 0); }
		public TerminalNode TABLE() { return getToken(GQL_20240412Parser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(GQL_20240412Parser.TEMP, 0); }
		public TerminalNode TO() { return getToken(GQL_20240412Parser.TO, 0); }
		public TerminalNode TRAIL() { return getToken(GQL_20240412Parser.TRAIL, 0); }
		public TerminalNode TRANSACTION() { return getToken(GQL_20240412Parser.TRANSACTION, 0); }
		public TerminalNode TYPE() { return getToken(GQL_20240412Parser.TYPE, 0); }
		public TerminalNode UNDIRECTED() { return getToken(GQL_20240412Parser.UNDIRECTED, 0); }
		public TerminalNode VERTEX() { return getToken(GQL_20240412Parser.VERTEX, 0); }
		public TerminalNode WALK() { return getToken(GQL_20240412Parser.WALK, 0); }
		public TerminalNode WITHOUT() { return getToken(GQL_20240412Parser.WITHOUT, 0); }
		public TerminalNode WRITE() { return getToken(GQL_20240412Parser.WRITE, 0); }
		public TerminalNode ZONE() { return getToken(GQL_20240412Parser.ZONE, 0); }
		public NonReservedWordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWords; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).enterNonReservedWords(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQL_20240412Listener ) ((GQL_20240412Listener)listener).exitNonReservedWords(this);
		}
	}

	public final NonReservedWordsContext nonReservedWords() throws RecognitionException {
		NonReservedWordsContext _localctx = new NonReservedWordsContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_nonReservedWords);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4615);
			_la = _input.LA(1);
			if ( !((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 281474976710655L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 91:
			return compositeQueryExpression_sempred((CompositeQueryExpressionContext)_localctx, predIndex);
		case 213:
			return labelExpression_sempred((LabelExpressionContext)_localctx, predIndex);
		case 232:
			return simplifiedTerm_sempred((SimplifiedTermContext)_localctx, predIndex);
		case 233:
			return simplifiedFactorLow_sempred((SimplifiedFactorLowContext)_localctx, predIndex);
		case 336:
			return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 409:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 421:
			return valueExpressionPrimary_sempred((ValueExpressionPrimaryContext)_localctx, predIndex);
		case 476:
			return numericValueExpression_sempred((NumericValueExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean compositeQueryExpression_sempred(CompositeQueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean labelExpression_sempred(LabelExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simplifiedTerm_sempred(SimplifiedTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simplifiedFactorLow_sempred(SimplifiedFactorLowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 1);
		case 6:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 14);
		case 8:
			return precpred(_ctx, 13);
		case 9:
			return precpred(_ctx, 12);
		case 10:
			return precpred(_ctx, 9);
		case 11:
			return precpred(_ctx, 8);
		case 12:
			return precpred(_ctx, 10);
		case 13:
			return precpred(_ctx, 7);
		case 14:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean valueExpressionPrimary_sempred(ValueExpressionPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean numericValueExpression_sempred(NumericValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 4);
		case 17:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0187\u120a\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0001\u0000\u0001\u0000\u0003\u0000\u047f"+
		"\b\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0003"+
		"\u0000\u0486\b\u0000\u0001\u0001\u0001\u0001\u0003\u0001\u048a\b\u0001"+
		"\u0001\u0002\u0004\u0002\u048d\b\u0002\u000b\u0002\f\u0002\u048e\u0001"+
		"\u0002\u0004\u0002\u0492\b\u0002\u000b\u0002\f\u0002\u0493\u0001\u0002"+
		"\u0005\u0002\u0497\b\u0002\n\u0002\f\u0002\u049a\t\u0002\u0003\u0002\u049c"+
		"\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u04a1\b\u0003"+
		"\u0003\u0003\u04a3\b\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u04a7\b"+
		"\u0003\u0001\u0003\u0003\u0003\u04aa\b\u0003\u0001\u0004\u0001\u0004\u0003"+
		"\u0004\u04ae\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0003\u0005\u04b6\b\u0005\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0007\u0003\u0007\u04bc\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001\n"+
		"\u0001\n\u0003\n\u04ca\b\n\u0001\u000b\u0003\u000b\u04cd\b\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0003\f\u04d4\b\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0003\u000e\u04e1\b\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u04e8\b\u000f\u0001\u0010"+
		"\u0003\u0010\u04eb\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u04f0\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u04f6\b\u0010\u0001\u0010\u0003\u0010\u04f9\b\u0010\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u0503\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0005"+
		"\u0014\u0508\b\u0014\n\u0014\f\u0014\u050b\t\u0014\u0001\u0015\u0001\u0015"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u0513\b\u0016"+
		"\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001d\u0003\u001d\u0528\b\u001d\u0001\u001d\u0003\u001d\u052b\b"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001e\u0004\u001e\u0530\b\u001e\u000b"+
		"\u001e\f\u001e\u0531\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u0537"+
		"\b\u001f\u0001 \u0001 \u0005 \u053b\b \n \f \u053e\t \u0001!\u0001!\u0001"+
		"!\u0003!\u0543\b!\u0001\"\u0001\"\u0003\"\u0547\b\"\u0001\"\u0001\"\u0001"+
		"#\u0003#\u054c\b#\u0001#\u0001#\u0001#\u0001#\u0001$\u0003$\u0553\b$\u0001"+
		"$\u0003$\u0556\b$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001&\u0003&\u055e"+
		"\b&\u0001&\u0001&\u0001&\u0001&\u0001\'\u0003\'\u0565\b\'\u0001\'\u0003"+
		"\'\u0568\b\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001)\u0001)\u0001"+
		")\u0001)\u0001*\u0003*\u0574\b*\u0001*\u0003*\u0577\b*\u0001*\u0001*\u0001"+
		"+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0003,\u0582\b,\u0001-\u0001"+
		"-\u0001.\u0001.\u0001.\u0001.\u0003.\u058a\b.\u0001/\u0001/\u00010\u0001"+
		"0\u00010\u00010\u00030\u0592\b0\u00011\u00041\u0595\b1\u000b1\f1\u0596"+
		"\u00012\u00012\u00032\u059b\b2\u00013\u00013\u00013\u00013\u00013\u0001"+
		"3\u00033\u05a3\b3\u00014\u00014\u00014\u00014\u00014\u00034\u05aa\b4\u0001"+
		"4\u00014\u00015\u00015\u00015\u00015\u00035\u05b2\b5\u00015\u00015\u0001"+
		"6\u00016\u00036\u05b8\b6\u00016\u00016\u00016\u00016\u00036\u05be\b6\u0001"+
		"6\u00016\u00016\u00036\u05c3\b6\u00016\u00036\u05c6\b6\u00016\u00016\u0001"+
		"6\u00036\u05cb\b6\u00016\u00036\u05ce\b6\u00017\u00037\u05d1\b7\u0001"+
		"7\u00017\u00037\u05d5\b7\u00017\u00037\u05d8\b7\u00018\u00018\u00038\u05dc"+
		"\b8\u00018\u00018\u00038\u05e0\b8\u00018\u00038\u05e3\b8\u00018\u0003"+
		"8\u05e6\b8\u00018\u00038\u05e9\b8\u00019\u00019\u00019\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001;\u0001;\u0003;\u05f5\b;\u0001;\u0001;\u0001;\u0003"+
		";\u05fa\b;\u0001;\u0001;\u0001<\u0001<\u0003<\u0600\b<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0003<\u0607\b<\u0001<\u0001<\u0001<\u0003<\u060c\b<\u0001"+
		"<\u0001<\u0003<\u0610\b<\u0001<\u0001<\u0001<\u0001=\u0003=\u0616\b=\u0001"+
		"=\u0001=\u0001=\u0003=\u061b\b=\u0001=\u0003=\u061e\b=\u0001>\u0001>\u0001"+
		">\u0001>\u0001?\u0001?\u0003?\u0626\b?\u0001?\u0001?\u0001?\u0001?\u0003"+
		"?\u062c\b?\u0001?\u0001?\u0001@\u0001@\u0001A\u0001A\u0003A\u0634\bA\u0001"+
		"B\u0001B\u0003B\u0638\bB\u0001C\u0001C\u0001C\u0003C\u063d\bC\u0001D\u0001"+
		"D\u0001D\u0001E\u0001E\u0003E\u0644\bE\u0001F\u0001F\u0003F\u0648\bF\u0001"+
		"G\u0005G\u064b\bG\nG\fG\u064e\tG\u0001G\u0004G\u0651\bG\u000bG\fG\u0652"+
		"\u0001H\u0001H\u0003H\u0657\bH\u0001I\u0001I\u0001I\u0001I\u0003I\u065d"+
		"\bI\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0001L\u0001L\u0001L\u0005"+
		"L\u0668\bL\nL\fL\u066b\tL\u0001M\u0001M\u0001M\u0003M\u0670\bM\u0001N"+
		"\u0001N\u0001N\u0001N\u0001N\u0001N\u0001O\u0001O\u0001O\u0001O\u0003"+
		"O\u067c\bO\u0001O\u0001O\u0001P\u0001P\u0001P\u0001P\u0001Q\u0001Q\u0001"+
		"Q\u0001R\u0001R\u0001R\u0005R\u068a\bR\nR\fR\u068d\tR\u0001S\u0001S\u0003"+
		"S\u0691\bS\u0001T\u0001T\u0001T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001"+
		"V\u0003V\u069c\bV\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0005W\u06a4"+
		"\bW\nW\fW\u06a7\tW\u0001X\u0001X\u0001Y\u0001Y\u0001Z\u0001Z\u0001[\u0001"+
		"[\u0001[\u0001[\u0001[\u0001[\u0001[\u0005[\u06b6\b[\n[\f[\u06b9\t[\u0001"+
		"\\\u0001\\\u0003\\\u06bd\b\\\u0001]\u0001]\u0003]\u06c1\b]\u0001]\u0001"+
		"]\u0003]\u06c5\b]\u0001]\u0001]\u0003]\u06c9\b]\u0003]\u06cb\b]\u0001"+
		"^\u0001^\u0001_\u0001_\u0003_\u06d1\b_\u0001`\u0005`\u06d4\b`\n`\f`\u06d7"+
		"\t`\u0001`\u0001`\u0001`\u0001`\u0003`\u06dd\b`\u0001a\u0001a\u0001a\u0001"+
		"b\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001d\u0001d\u0001d\u0001"+
		"e\u0003e\u06ed\be\u0001e\u0001e\u0003e\u06f1\be\u0001f\u0004f\u06f4\b"+
		"f\u000bf\ff\u06f5\u0001g\u0001g\u0003g\u06fa\bg\u0001h\u0001h\u0001h\u0001"+
		"h\u0001h\u0003h\u0701\bh\u0001i\u0001i\u0003i\u0705\bi\u0001j\u0001j\u0001"+
		"j\u0001k\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0003l\u0716\bl\u0001m\u0004m\u0719\bm\u000bm\fm\u071a"+
		"\u0001n\u0001n\u0001o\u0001o\u0001o\u0003o\u0722\bo\u0001p\u0001p\u0001"+
		"p\u0001q\u0001q\u0001q\u0005q\u072a\bq\nq\fq\u072d\tq\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0003r\u0734\br\u0001s\u0001s\u0001s\u0003s\u0739\bs\u0001"+
		"t\u0001t\u0001t\u0001u\u0001u\u0001u\u0001v\u0001v\u0001w\u0001w\u0001"+
		"w\u0001w\u0001x\u0001x\u0003x\u0749\bx\u0001x\u0003x\u074c\bx\u0001x\u0001"+
		"x\u0003x\u0750\bx\u0001x\u0003x\u0753\bx\u0001y\u0001y\u0003y\u0757\b"+
		"y\u0001y\u0003y\u075a\by\u0001z\u0001z\u0001z\u0001{\u0003{\u0760\b{\u0001"+
		"{\u0001{\u0003{\u0764\b{\u0001{\u0003{\u0767\b{\u0001{\u0001{\u0003{\u076b"+
		"\b{\u0001|\u0001|\u0001|\u0005|\u0770\b|\n|\f|\u0773\t|\u0001}\u0001}"+
		"\u0003}\u0777\b}\u0001~\u0001~\u0001~\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u077e\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0782\b\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u0786\b\u007f\u0001\u007f\u0003\u007f\u0789"+
		"\b\u007f\u0001\u007f\u0003\u007f\u078c\b\u007f\u0001\u007f\u0003\u007f"+
		"\u078f\b\u007f\u0001\u007f\u0003\u007f\u0792\b\u007f\u0001\u007f\u0003"+
		"\u007f\u0795\b\u007f\u0003\u007f\u0797\b\u007f\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0005\u0080\u079c\b\u0080\n\u0080\f\u0080\u079f\t\u0080\u0001"+
		"\u0081\u0001\u0081\u0003\u0081\u07a3\b\u0081\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0003\u0084\u07ae\b\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0005"+
		"\u0085\u07b3\b\u0085\n\u0085\f\u0085\u07b6\t\u0085\u0001\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087"+
		"\u07bf\b\u0087\u0001\u0088\u0003\u0088\u07c2\b\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0003\u0089\u07c9\b\u0089\u0001"+
		"\u008a\u0003\u008a\u07cc\b\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001"+
		"\u008b\u0003\u008b\u07d2\b\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0005\u008c\u07d9\b\u008c\n\u008c\f\u008c\u07dc\t\u008c"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u07e1\b\u008d\u0001\u008d"+
		"\u0001\u008d\u0003\u008d\u07e5\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0005\u008e\u07ea\b\u008e\n\u008e\f\u008e\u07ed\t\u008e\u0001\u008f\u0001"+
		"\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u07f9\b\u0092\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0005\u0094\u0801"+
		"\b\u0094\n\u0094\f\u0094\u0804\t\u0094\u0001\u0094\u0001\u0094\u0003\u0094"+
		"\u0808\b\u0094\u0001\u0095\u0001\u0095\u0001\u0096\u0003\u0096\u080d\b"+
		"\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u0811\b\u0096\u0001\u0096\u0003"+
		"\u0096\u0814\b\u0096\u0001\u0097\u0001\u0097\u0003\u0097\u0818\b\u0097"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u009a\u0001\u009a\u0003\u009a\u0822\b\u009a\u0001\u009a\u0003\u009a"+
		"\u0825\b\u009a\u0001\u009b\u0001\u009b\u0003\u009b\u0829\b\u009b\u0001"+
		"\u009b\u0003\u009b\u082c\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0005"+
		"\u009c\u0831\b\u009c\n\u009c\f\u009c\u0834\t\u009c\u0001\u009d\u0003\u009d"+
		"\u0837\b\u009d\u0001\u009d\u0003\u009d\u083a\b\u009d\u0001\u009d\u0001"+
		"\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0005\u00a2\u084c\b\u00a2\n\u00a2\f\u00a2"+
		"\u084f\t\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0005\u00a3"+
		"\u0855\b\u00a3\n\u00a3\f\u00a3\u0858\t\u00a3\u0001\u00a4\u0001\u00a4\u0003"+
		"\u00a4\u085c\b\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a5\u0001\u00a5\u0001"+
		"\u00a5\u0003\u00a5\u0863\b\u00a5\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0867"+
		"\b\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0003\u00a7\u086d"+
		"\b\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0873"+
		"\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0879"+
		"\b\u00a9\u0001\u00a9\u0003\u00a9\u087c\b\u00a9\u0001\u00a9\u0003\u00a9"+
		"\u087f\b\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0884\b"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0889\b\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u088c\b\u00aa\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0890"+
		"\b\u00ab\u0001\u00ac\u0001\u00ac\u0003\u00ac\u0894\b\u00ac\u0001\u00ad"+
		"\u0001\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u089b\b\u00ae"+
		"\u0001\u00af\u0001\u00af\u0003\u00af\u089f\b\u00af\u0001\u00af\u0003\u00af"+
		"\u08a2\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b1\u0001\u00b1\u0003\u00b1"+
		"\u08a8\b\u00b1\u0001\u00b1\u0003\u00b1\u08ab\b\u00b1\u0001\u00b1\u0003"+
		"\u00b1\u08ae\b\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0001\u00b3\u0003\u00b3\u08b6\b\u00b3\u0001\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0003\u00b4\u08bb\b\u00b4\u0001\u00b4\u0003\u00b4\u08be\b\u00b4"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u08c3\b\u00b5\u0001\u00b5"+
		"\u0003\u00b5\u08c6\b\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6"+
		"\u08cb\b\u00b6\u0001\u00b6\u0003\u00b6\u08ce\b\u00b6\u0001\u00b7\u0001"+
		"\u00b7\u0003\u00b7\u08d2\b\u00b7\u0001\u00b7\u0003\u00b7\u08d5\b\u00b7"+
		"\u0001\u00b7\u0003\u00b7\u08d8\b\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0004\u00b9"+
		"\u08e2\b\u00b9\u000b\u00b9\f\u00b9\u08e3\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0004\u00b9\u08e9\b\u00b9\u000b\u00b9\f\u00b9\u08ea\u0003\u00b9"+
		"\u08ed\b\u00b9\u0001\u00ba\u0004\u00ba\u08f0\b\u00ba\u000b\u00ba\f\u00ba"+
		"\u08f1\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0001\u00bb\u0003\u00bb\u08fb\b\u00bb\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0003\u00bc\u0900\b\u00bc\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0904"+
		"\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00bf\u0003"+
		"\u00bf\u090b\b\u00bf\u0001\u00bf\u0003\u00bf\u090e\b\u00bf\u0001\u00bf"+
		"\u0003\u00bf\u0911\b\u00bf\u0001\u00c0\u0003\u00c0\u0914\b\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c3\u0001\u00c3\u0003\u00c3\u091f\b\u00c3\u0001\u00c4\u0001"+
		"\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0005\u00c6\u092b\b\u00c6\n\u00c6\f\u00c6"+
		"\u092e\t\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c8"+
		"\u0001\u00c8\u0003\u00c8\u0936\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u093f\b\u00c9"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0961\b\u00d2\u0001\u00d2\u0003\u00d2"+
		"\u0964\b\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u0968\b\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001"+
		"\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u097b"+
		"\b\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001"+
		"\u00d5\u0005\u00d5\u0983\b\u00d5\n\u00d5\f\u00d5\u0986\t\u00d5\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0003\u00d8\u0990\b\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00da\u0001\u00da\u0003\u00da\u0998\b\u00da\u0001\u00da"+
		"\u0001\u00da\u0003\u00da\u099c\b\u00da\u0001\u00da\u0001\u00da\u0001\u00db"+
		"\u0001\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u09ab\b\u00dd"+
		"\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0001\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e5\u0001\u00e5"+
		"\u0001\u00e5\u0003\u00e5\u09cc\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e6\u0005\u00e6\u09d3\b\u00e6\n\u00e6\f\u00e6\u09d6"+
		"\t\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005"+
		"\u00e7\u09dd\b\u00e7\n\u00e7\f\u00e7\u09e0\t\u00e7\u0001\u00e8\u0001\u00e8"+
		"\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0005\u00e8\u09e7\b\u00e8\n\u00e8"+
		"\f\u00e8\u09ea\t\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0005\u00e9\u09f2\b\u00e9\n\u00e9\f\u00e9\u09f5"+
		"\t\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u09fa\b\u00ea"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0001\u00ed\u0001\u00ed\u0003\u00ed\u0a04\b\u00ed\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee"+
		"\u0a0d\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f2\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0a28\b\u00f6\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0003\u00f8\u0a32\b\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0005\u00fb"+
		"\u0a3d\b\u00fb\n\u00fb\f\u00fb\u0a40\t\u00fb\u0001\u00fc\u0001\u00fc\u0003"+
		"\u00fc\u0a44\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0005\u0100\u0a52\b\u0100\n\u0100\f\u0100\u0a55\t\u0100"+
		"\u0001\u0100\u0003\u0100\u0a58\b\u0100\u0001\u0101\u0001\u0101\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103"+
		"\u0001\u0104\u0001\u0104\u0001\u0104\u0005\u0104\u0a66\b\u0104\n\u0104"+
		"\f\u0104\u0a69\t\u0104\u0001\u0105\u0001\u0105\u0003\u0105\u0a6d\b\u0105"+
		"\u0001\u0105\u0003\u0105\u0a70\b\u0105\u0001\u0106\u0001\u0106\u0001\u0107"+
		"\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108"+
		"\u0a7a\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u010a\u0001\u010a"+
		"\u0001\u010a\u0001\u010b\u0001\u010b\u0001\u010c\u0001\u010c\u0001\u010c"+
		"\u0003\u010c\u0a87\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d"+
		"\u0003\u010d\u0a8d\b\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001\u010f"+
		"\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u0a96\b\u010f\u0001\u0110"+
		"\u0001\u0110\u0001\u0111\u0001\u0111\u0003\u0111\u0a9c\b\u0111\u0001\u0112"+
		"\u0001\u0112\u0001\u0112\u0005\u0112\u0aa1\b\u0112\n\u0112\f\u0112\u0aa4"+
		"\t\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u0aa8\b\u0112\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0004\u0113\u0aad\b\u0113\u000b\u0113\f\u0113"+
		"\u0aae\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0003\u0114\u0ab7\b\u0114\u0001\u0115\u0003\u0115\u0aba\b\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0116\u0001\u0116\u0001\u0117\u0001\u0117"+
		"\u0003\u0117\u0ac2\b\u0117\u0001\u0118\u0003\u0118\u0ac5\b\u0118\u0001"+
		"\u0118\u0001\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0003\u0119\u0ace\b\u0119\u0001\u011a\u0001\u011a\u0003\u011a\u0ad2"+
		"\b\u011a\u0001\u011b\u0003\u011b\u0ad5\b\u011b\u0001\u011b\u0001\u011b"+
		"\u0001\u011c\u0001\u011c\u0003\u011c\u0adb\b\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011c\u0005\u011c\u0ae0\b\u011c\n\u011c\f\u011c\u0ae3\t\u011c\u0001"+
		"\u011c\u0001\u011c\u0001\u011c\u0004\u011c\u0ae8\b\u011c\u000b\u011c\f"+
		"\u011c\u0ae9\u0003\u011c\u0aec\b\u011c\u0001\u011d\u0001\u011d\u0001\u011e"+
		"\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011f\u0001\u011f\u0001\u0120"+
		"\u0001\u0120\u0001\u0120\u0005\u0120\u0af9\b\u0120\n\u0120\f\u0120\u0afc"+
		"\t\u0120\u0001\u0121\u0001\u0121\u0003\u0121\u0b00\b\u0121\u0001\u0122"+
		"\u0001\u0122\u0003\u0122\u0b04\b\u0122\u0001\u0123\u0001\u0123\u0003\u0123"+
		"\u0b08\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0b0c\b\u0123\u0001"+
		"\u0123\u0001\u0123\u0003\u0123\u0b10\b\u0123\u0001\u0123\u0003\u0123\u0b13"+
		"\b\u0123\u0001\u0123\u0001\u0123\u0001\u0124\u0001\u0124\u0003\u0124\u0b19"+
		"\b\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u0b1e\b\u0124"+
		"\u0001\u0125\u0001\u0125\u0003\u0125\u0b22\b\u0125\u0001\u0125\u0003\u0125"+
		"\u0b25\b\u0125\u0001\u0126\u0001\u0126\u0003\u0126\u0b29\b\u0126\u0001"+
		"\u0126\u0003\u0126\u0b2c\b\u0126\u0001\u0127\u0001\u0127\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u0b35\b\u0128\u0001"+
		"\u0129\u0003\u0129\u0b38\b\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001"+
		"\u012a\u0001\u012b\u0001\u012b\u0001\u012c\u0001\u012c\u0003\u012c\u0b42"+
		"\b\u012c\u0001\u012d\u0003\u012d\u0b45\b\u012d\u0001\u012d\u0001\u012d"+
		"\u0003\u012d\u0b49\b\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u0b4d\b"+
		"\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u0b51\b\u012d\u0001\u012e\u0001"+
		"\u012e\u0001\u012e\u0003\u012e\u0b56\b\u012e\u0001\u012e\u0001\u012e\u0001"+
		"\u012e\u0001\u012f\u0001\u012f\u0003\u012f\u0b5d\b\u012f\u0001\u012f\u0003"+
		"\u012f\u0b60\b\u012f\u0001\u0130\u0001\u0130\u0003\u0130\u0b64\b\u0130"+
		"\u0001\u0130\u0003\u0130\u0b67\b\u0130\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0001\u0131\u0003\u0131\u0b6e\b\u0131\u0001\u0132\u0003\u0132"+
		"\u0b71\b\u0132\u0001\u0132\u0001\u0132\u0001\u0133\u0001\u0133\u0001\u0134"+
		"\u0001\u0134\u0001\u0135\u0001\u0135\u0003\u0135\u0b7b\b\u0135\u0001\u0136"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0139"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u013a\u0001\u013a\u0001\u013a"+
		"\u0001\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c"+
		"\u0b9b\b\u013c\u0001\u013c\u0003\u013c\u0b9e\b\u013c\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u0ba6"+
		"\b\u013d\u0001\u013d\u0003\u013d\u0ba9\b\u013d\u0001\u013e\u0001\u013e"+
		"\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u0140\u0001\u0140\u0003\u0140"+
		"\u0bb2\b\u0140\u0001\u0141\u0001\u0141\u0003\u0141\u0bb6\b\u0141\u0001"+
		"\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001"+
		"\u0145\u0001\u0145\u0001\u0146\u0001\u0146\u0001\u0147\u0001\u0147\u0001"+
		"\u0148\u0001\u0148\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u0bd9\b\u0149\u0001\u014a\u0001"+
		"\u014a\u0001\u014a\u0005\u014a\u0bde\b\u014a\n\u014a\f\u014a\u0be1\t\u014a"+
		"\u0001\u014b\u0001\u014b\u0003\u014b\u0be5\b\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014c\u0001\u014c\u0001\u014c\u0005\u014c\u0bec\b\u014c\n\u014c"+
		"\f\u014c\u0bef\t\u014c\u0001\u014d\u0001\u014d\u0003\u014d\u0bf3\b\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014e\u0001\u014e\u0001\u014f\u0003\u014f"+
		"\u0bfa\b\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u0c0a\b\u0150\u0001\u0150"+
		"\u0003\u0150\u0c0d\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0003\u0150\u0c14\b\u0150\u0001\u0150\u0003\u0150\u0c17\b"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u0c1c\b\u0150\u0001"+
		"\u0150\u0003\u0150\u0c1f\b\u0150\u0001\u0150\u0003\u0150\u0c22\b\u0150"+
		"\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u0c27\b\u0150\u0001\u0150"+
		"\u0001\u0150\u0003\u0150\u0c2b\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0005\u0150\u0c31\b\u0150\n\u0150\f\u0150\u0c34\t\u0150\u0001"+
		"\u0150\u0001\u0150\u0003\u0150\u0c38\b\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0003\u0150\u0c43\b\u0150\u0001\u0150\u0003\u0150\u0c46\b\u0150"+
		"\u0005\u0150\u0c48\b\u0150\n\u0150\f\u0150\u0c4b\t\u0150\u0001\u0151\u0001"+
		"\u0151\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001"+
		"\u0152\u0001\u0152\u0003\u0152\u0c56\b\u0152\u0001\u0153\u0001\u0153\u0003"+
		"\u0153\u0c5a\b\u0153\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001"+
		"\u0154\u0003\u0154\u0c61\b\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0003"+
		"\u0154\u0c66\b\u0154\u0001\u0154\u0003\u0154\u0c69\b\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0003\u0154\u0c70\b\u0154"+
		"\u0001\u0154\u0003\u0154\u0c73\b\u0154\u0001\u0154\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0003\u0154\u0c7a\b\u0154\u0001\u0154\u0003\u0154"+
		"\u0c7d\b\u0154\u0003\u0154\u0c7f\b\u0154\u0001\u0155\u0001\u0155\u0001"+
		"\u0155\u0001\u0155\u0001\u0155\u0003\u0155\u0c86\b\u0155\u0001\u0155\u0001"+
		"\u0155\u0001\u0155\u0003\u0155\u0c8b\b\u0155\u0001\u0155\u0003\u0155\u0c8e"+
		"\b\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003"+
		"\u0155\u0c95\b\u0155\u0001\u0155\u0003\u0155\u0c98\b\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155\u0c9f\b\u0155"+
		"\u0001\u0155\u0003\u0155\u0ca2\b\u0155\u0003\u0155\u0ca4\b\u0155\u0001"+
		"\u0156\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0158\u0001\u0158\u0001"+
		"\u0159\u0001\u0159\u0003\u0159\u0cae\b\u0159\u0001\u015a\u0001\u015a\u0003"+
		"\u015a\u0cb2\b\u015a\u0001\u015b\u0001\u015b\u0003\u015b\u0cb6\b\u015b"+
		"\u0001\u015c\u0001\u015c\u0003\u015c\u0cba\b\u015c\u0001\u015c\u0001\u015c"+
		"\u0003\u015c\u0cbe\b\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u0cc2\b"+
		"\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u0cc6\b\u015c\u0001\u015c\u0001"+
		"\u015c\u0003\u015c\u0cca\b\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u0cce"+
		"\b\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u0cd2\b\u015c\u0001\u015c"+
		"\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u0cd9\b\u015c"+
		"\u0001\u015c\u0003\u015c\u0cdc\b\u015c\u0001\u015c\u0001\u015c\u0003\u015c"+
		"\u0ce0\b\u015c\u0001\u015c\u0003\u015c\u0ce3\b\u015c\u0001\u015c\u0003"+
		"\u015c\u0ce6\b\u015c\u0001\u015d\u0001\u015d\u0003\u015d\u0cea\b\u015d"+
		"\u0001\u015d\u0001\u015d\u0003\u015d\u0cee\b\u015d\u0001\u015d\u0001\u015d"+
		"\u0003\u015d\u0cf2\b\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u0cf6\b"+
		"\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u0cfa\b\u015d\u0001\u015d\u0001"+
		"\u015d\u0003\u015d\u0cfe\b\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u0d02"+
		"\b\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003"+
		"\u015d\u0d09\b\u015d\u0001\u015d\u0003\u015d\u0d0c\b\u015d\u0001\u015d"+
		"\u0001\u015d\u0003\u015d\u0d10\b\u015d\u0001\u015d\u0001\u015d\u0003\u015d"+
		"\u0d14\b\u015d\u0001\u015e\u0001\u015e\u0003\u015e\u0d18\b\u015e\u0001"+
		"\u015e\u0001\u015e\u0003\u015e\u0d1c\b\u015e\u0001\u015e\u0001\u015e\u0003"+
		"\u015e\u0d20\b\u015e\u0001\u015e\u0001\u015e\u0003\u015e\u0d24\b\u015e"+
		"\u0001\u015e\u0001\u015e\u0003\u015e\u0d28\b\u015e\u0001\u015e\u0001\u015e"+
		"\u0003\u015e\u0d2c\b\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0003\u015e"+
		"\u0d31\b\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e"+
		"\u0003\u015e\u0d38\b\u015e\u0001\u015e\u0003\u015e\u0d3b\b\u015e\u0001"+
		"\u015e\u0001\u015e\u0001\u015e\u0003\u015e\u0d40\b\u015e\u0003\u015e\u0d42"+
		"\b\u015e\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0003"+
		"\u015f\u0d49\b\u015f\u0001\u015f\u0001\u015f\u0003\u015f\u0d4d\b\u015f"+
		"\u0003\u015f\u0d4f\b\u015f\u0001\u0160\u0001\u0160\u0001\u0161\u0001\u0161"+
		"\u0001\u0162\u0001\u0162\u0003\u0162\u0d57\b\u0162\u0001\u0162\u0001\u0162"+
		"\u0003\u0162\u0d5b\b\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u0d5f\b"+
		"\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u0d63\b\u0162\u0001\u0162\u0001"+
		"\u0162\u0003\u0162\u0d67\b\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0003\u0162\u0d6e\b\u0162\u0001\u0162\u0001\u0162\u0003"+
		"\u0162\u0d72\b\u0162\u0001\u0162\u0003\u0162\u0d75\b\u0162\u0001\u0162"+
		"\u0001\u0162\u0003\u0162\u0d79\b\u0162\u0001\u0162\u0001\u0162\u0003\u0162"+
		"\u0d7d\b\u0162\u0001\u0162\u0003\u0162\u0d80\b\u0162\u0003\u0162\u0d82"+
		"\b\u0162\u0001\u0163\u0001\u0163\u0003\u0163\u0d86\b\u0163\u0001\u0164"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0003\u0164\u0d8d\b\u0164"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0003\u0165\u0d92\b\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0003\u0165\u0d99\b\u0165"+
		"\u0003\u0165\u0d9b\b\u0165\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166"+
		"\u0da0\b\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166"+
		"\u0da6\b\u0166\u0001\u0166\u0003\u0166\u0da9\b\u0166\u0003\u0166\u0dab"+
		"\b\u0166\u0001\u0167\u0001\u0167\u0003\u0167\u0daf\b\u0167\u0001\u0168"+
		"\u0001\u0168\u0001\u0168\u0003\u0168\u0db4\b\u0168\u0001\u0168\u0001\u0168"+
		"\u0001\u0168\u0001\u0168\u0001\u0168\u0003\u0168\u0dbb\b\u0168\u0003\u0168"+
		"\u0dbd\b\u0168\u0001\u0169\u0001\u0169\u0001\u0169\u0003\u0169\u0dc2\b"+
		"\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0001\u0169\u0003"+
		"\u0169\u0dc9\b\u0169\u0003\u0169\u0dcb\b\u0169\u0001\u016a\u0001\u016a"+
		"\u0001\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u0dd2\b\u016a\u0001\u016b"+
		"\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b"+
		"\u0dda\b\u016b\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0003\u016c"+
		"\u0de0\b\u016c\u0001\u016d\u0001\u016d\u0003\u016d\u0de4\b\u016d\u0001"+
		"\u016e\u0001\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0003\u016f\u0deb"+
		"\b\u016f\u0001\u0170\u0001\u0170\u0003\u0170\u0def\b\u0170\u0001\u0171"+
		"\u0003\u0171\u0df2\b\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0003\u0171"+
		"\u0df7\b\u0171\u0001\u0172\u0001\u0172\u0003\u0172\u0dfb\b\u0172\u0001"+
		"\u0172\u0001\u0172\u0003\u0172\u0dff\b\u0172\u0001\u0173\u0001\u0173\u0003"+
		"\u0173\u0e03\b\u0173\u0001\u0174\u0001\u0174\u0003\u0174\u0e07\b\u0174"+
		"\u0001\u0175\u0001\u0175\u0003\u0175\u0e0b\b\u0175\u0001\u0176\u0003\u0176"+
		"\u0e0e\b\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u0e12\b\u0176\u0001"+
		"\u0177\u0001\u0177\u0003\u0177\u0e16\b\u0177\u0001\u0178\u0001\u0178\u0003"+
		"\u0178\u0e1a\b\u0178\u0001\u0179\u0003\u0179\u0e1d\b\u0179\u0001\u0179"+
		"\u0001\u0179\u0003\u0179\u0e21\b\u0179\u0001\u017a\u0001\u017a\u0003\u017a"+
		"\u0e25\b\u017a\u0001\u017b\u0003\u017b\u0e28\b\u017b\u0001\u017b\u0001"+
		"\u017b\u0001\u017c\u0001\u017c\u0001\u017d\u0003\u017d\u0e2f\b\u017d\u0001"+
		"\u017d\u0001\u017d\u0003\u017d\u0e33\b\u017d\u0001\u017d\u0003\u017d\u0e36"+
		"\b\u017d\u0001\u017d\u0001\u017d\u0003\u017d\u0e3a\b\u017d\u0003\u017d"+
		"\u0e3c\b\u017d\u0001\u017e\u0001\u017e\u0003\u017e\u0e40\b\u017e\u0001"+
		"\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0005\u017f\u0e47"+
		"\b\u017f\n\u017f\f\u017f\u0e4a\t\u017f\u0001\u0180\u0001\u0180\u0001\u0180"+
		"\u0001\u0181\u0001\u0181\u0003\u0181\u0e51\b\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0182\u0001\u0182\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0183"+
		"\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0183\u0003\u0183"+
		"\u0e60\b\u0183\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185"+
		"\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186"+
		"\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186"+
		"\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186"+
		"\u0003\u0186\u0e79\b\u0186\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0188"+
		"\u0001\u0188\u0003\u0188\u0e80\b\u0188\u0001\u0188\u0001\u0188\u0001\u0189"+
		"\u0001\u0189\u0001\u0189\u0001\u018a\u0001\u018a\u0003\u018a\u0e89\b\u018a"+
		"\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018b\u0001\u018b\u0003\u018b"+
		"\u0e90\b\u018b\u0001\u018b\u0003\u018b\u0e93\b\u018b\u0001\u018b\u0001"+
		"\u018b\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018d\u0001\u018d\u0003"+
		"\u018d\u0e9c\b\u018d\u0001\u018d\u0001\u018d\u0001\u018e\u0001\u018e\u0001"+
		"\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u0190\u0001\u0190\u0003"+
		"\u0190\u0ea8\b\u0190\u0001\u0190\u0001\u0190\u0003\u0190\u0eac\b\u0190"+
		"\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191"+
		"\u0003\u0191\u0eb4\b\u0191\u0001\u0192\u0001\u0192\u0001\u0193\u0001\u0193"+
		"\u0003\u0193\u0eba\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193"+
		"\u0001\u0194\u0001\u0194\u0003\u0194\u0ec2\b\u0194\u0001\u0194\u0001\u0194"+
		"\u0001\u0194\u0001\u0194\u0001\u0195\u0001\u0195\u0001\u0196\u0001\u0196"+
		"\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0005\u0196"+
		"\u0ed1\b\u0196\n\u0196\f\u0196\u0ed4\t\u0196\u0001\u0196\u0001\u0196\u0001"+
		"\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001"+
		"\u0197\u0005\u0197\u0edf\b\u0197\n\u0197\f\u0197\u0ee2\t\u0197\u0001\u0197"+
		"\u0001\u0197\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198"+
		"\u0001\u0198\u0001\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0003\u0199\u0ef4\b\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0003\u0199\u0ef9\b\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0003\u0199\u0eff\b\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0003\u0199\u0f13\b\u0199"+
		"\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0005\u0199"+
		"\u0f1a\b\u0199\n\u0199\f\u0199\u0f1d\t\u0199\u0001\u019a\u0001\u019a\u0001"+
		"\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u0f25\b\u019a\u0001"+
		"\u019b\u0001\u019b\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001"+
		"\u019c\u0003\u019c\u0f2e\b\u019c\u0001\u019d\u0001\u019d\u0001\u019d\u0001"+
		"\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019f\u0001\u019f\u0001\u019f\u0001"+
		"\u019f\u0001\u019f\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0001"+
		"\u01a0\u0003\u01a0\u0f46\b\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a1\u0001"+
		"\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1\u0f4f\b\u01a1\u0001"+
		"\u01a1\u0001\u01a1\u0001\u01a2\u0001\u01a2\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a4\u0001\u01a4\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001"+
		"\u01a5\u0003\u01a5\u0f64\b\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0005"+
		"\u01a5\u0f69\b\u01a5\n\u01a5\f\u01a5\u0f6c\t\u01a5\u0001\u01a6\u0001\u01a6"+
		"\u0001\u01a6\u0001\u01a6\u0001\u01a7\u0001\u01a7\u0003\u01a7\u0f74\b\u01a7"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0003\u01a8\u0f82\b\u01a8\u0001\u01a9\u0001\u01a9\u0003\u01a9\u0f86\b"+
		"\u01a9\u0001\u01aa\u0001\u01aa\u0003\u01aa\u0f8a\b\u01aa\u0001\u01ab\u0001"+
		"\u01ab\u0003\u01ab\u0f8e\b\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ad\u0001"+
		"\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ae\u0001"+
		"\u01ae\u0001\u01ae\u0001\u01af\u0001\u01af\u0003\u01af\u0f9d\b\u01af\u0001"+
		"\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001"+
		"\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0004"+
		"\u01b0\u0fab\b\u01b0\u000b\u01b0\f\u01b0\u0fac\u0001\u01b0\u0001\u01b0"+
		"\u0003\u01b0\u0fb1\b\u01b0\u0001\u01b1\u0001\u01b1\u0003\u01b1\u0fb5\b"+
		"\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0004\u01b2\u0fba\b\u01b2\u000b"+
		"\u01b2\f\u01b2\u0fbb\u0001\u01b2\u0003\u01b2\u0fbf\b\u01b2\u0001\u01b2"+
		"\u0001\u01b2\u0001\u01b3\u0001\u01b3\u0004\u01b3\u0fc5\b\u01b3\u000b\u01b3"+
		"\f\u01b3\u0fc6\u0001\u01b3\u0003\u01b3\u0fca\b\u01b3\u0001\u01b3\u0001"+
		"\u01b3\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001"+
		"\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b6\u0001"+
		"\u01b6\u0001\u01b6\u0001\u01b7\u0001\u01b7\u0003\u01b7\u0fdd\b\u01b7\u0001"+
		"\u01b8\u0001\u01b8\u0001\u01b8\u0005\u01b8\u0fe2\b\u01b8\n\u01b8\f\u01b8"+
		"\u0fe5\t\u01b8\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9"+
		"\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0001\u01b9\u0003\u01b9\u0ff0\b\u01b9"+
		"\u0001\u01ba\u0001\u01ba\u0003\u01ba\u0ff4\b\u01ba\u0001\u01bb\u0001\u01bb"+
		"\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc"+
		"\u0001\u01bc\u0001\u01bd\u0001\u01bd\u0003\u01bd\u1001\b\u01bd\u0001\u01be"+
		"\u0001\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf"+
		"\u0001\u01bf\u0003\u01bf\u100b\b\u01bf\u0001\u01c0\u0001\u01c0\u0001\u01c0"+
		"\u0003\u01c0\u1010\b\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c1"+
		"\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0001\u01c1"+
		"\u0001\u01c2\u0001\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c4\u0001\u01c4"+
		"\u0001\u01c5\u0003\u01c5\u1023\b\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c6"+
		"\u0001\u01c6\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c8\u0001\u01c8\u0001\u01c9\u0001\u01c9\u0001\u01ca\u0001\u01ca"+
		"\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cc"+
		"\u0001\u01cc\u0005\u01cc\u103b\b\u01cc\n\u01cc\f\u01cc\u103e\t\u01cc\u0001"+
		"\u01cd\u0001\u01cd\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001"+
		"\u01ce\u0001\u01cf\u0001\u01cf\u0001\u01d0\u0001\u01d0\u0003\u01d0\u104b"+
		"\b\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d1\u0001\u01d1\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d4\u0003\u01d4\u105c\b\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0003\u01d4\u1060\b\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d5\u0001\u01d5\u0001\u01d5\u0005\u01d5\u1067\b\u01d5\n\u01d5\f\u01d5"+
		"\u106a\t\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d7\u0003\u01d7\u106f\b"+
		"\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d8\u0001\u01d8\u0003\u01d8\u1075"+
		"\b\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0005"+
		"\u01d9\u107c\b\u01d9\n\u01d9\f\u01d9\u107f\t\u01d9\u0001\u01da\u0001\u01da"+
		"\u0001\u01da\u0001\u01da\u0001\u01db\u0001\u01db\u0001\u01dc\u0001\u01dc"+
		"\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u108c\b\u01dc\u0001\u01dc"+
		"\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0005\u01dc"+
		"\u1094\b\u01dc\n\u01dc\f\u01dc\u1097\t\u01dc\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0003\u01dd\u10a6"+
		"\b\u01dd\u0001\u01de\u0001\u01de\u0001\u01de\u0003\u01de\u10ab\b\u01de"+
		"\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df"+
		"\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0003\u01df\u10b7\b\u01df"+
		"\u0001\u01e0\u0001\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0001\u01e1\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2"+
		"\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e4"+
		"\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e5\u0001\u01e5"+
		"\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e6"+
		"\u0001\u01e6\u0001\u01e7\u0001\u01e7\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e9\u0001\u01e9\u0001\u01ea\u0001\u01ea"+
		"\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01eb"+
		"\u0001\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0\u0001\u01f0"+
		"\u0001\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f2\u0001\u01f2\u0001\u01f3"+
		"\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0001\u01f4\u0001\u01f4"+
		"\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f5\u0001\u01f5\u0001\u01f5"+
		"\u0001\u01f5\u0001\u01f5\u0001\u01f6\u0001\u01f6\u0001\u01f7\u0001\u01f7"+
		"\u0001\u01f8\u0003\u01f8\u111a\b\u01f8\u0001\u01f8\u0003\u01f8\u111d\b"+
		"\u01f8\u0001\u01f8\u0003\u01f8\u1120\b\u01f8\u0001\u01f8\u0001\u01f8\u0001"+
		"\u01f9\u0001\u01f9\u0001\u01fa\u0001\u01fa\u0001\u01fb\u0001\u01fb\u0001"+
		"\u01fc\u0001\u01fc\u0001\u01fd\u0001\u01fd\u0001\u01fe\u0001\u01fe\u0001"+
		"\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0003\u01ff\u1135"+
		"\b\u01ff\u0001\u0200\u0001\u0200\u0001\u0200\u0001\u0200\u0003\u0200\u113b"+
		"\b\u0200\u0001\u0200\u0003\u0200\u113e\b\u0200\u0001\u0201\u0001\u0201"+
		"\u0001\u0201\u0001\u0201\u0003\u0201\u1144\b\u0201\u0001\u0201\u0003\u0201"+
		"\u1147\b\u0201\u0001\u0202\u0001\u0202\u0001\u0202\u0003\u0202\u114c\b"+
		"\u0202\u0001\u0202\u0003\u0202\u114f\b\u0202\u0001\u0203\u0001\u0203\u0001"+
		"\u0203\u0001\u0203\u0003\u0203\u1155\b\u0203\u0001\u0203\u0003\u0203\u1158"+
		"\b\u0203\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204\u0003\u0204\u115e"+
		"\b\u0204\u0001\u0204\u0003\u0204\u1161\b\u0204\u0001\u0205\u0001\u0205"+
		"\u0003\u0205\u1165\b\u0205\u0001\u0206\u0001\u0206\u0003\u0206\u1169\b"+
		"\u0206\u0001\u0207\u0001\u0207\u0003\u0207\u116d\b\u0207\u0001\u0208\u0001"+
		"\u0208\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003"+
		"\u0209\u1176\b\u0209\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020b\u0001\u020b\u0001\u020c\u0001\u020c\u0001\u020d\u0001\u020d\u0003"+
		"\u020d\u1182\b\u020d\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001"+
		"\u020e\u0001\u020f\u0001\u020f\u0003\u020f\u118b\b\u020f\u0001\u0210\u0001"+
		"\u0210\u0001\u0211\u0001\u0211\u0001\u0212\u0001\u0212\u0001\u0213\u0001"+
		"\u0213\u0001\u0214\u0001\u0214\u0003\u0214\u1197\b\u0214\u0001\u0215\u0001"+
		"\u0215\u0001\u0216\u0001\u0216\u0001\u0217\u0001\u0217\u0001\u0218\u0001"+
		"\u0218\u0001\u0219\u0001\u0219\u0003\u0219\u11a3\b\u0219\u0001\u021a\u0001"+
		"\u021a\u0001\u021b\u0001\u021b\u0001\u021c\u0001\u021c\u0001\u021d\u0001"+
		"\u021d\u0001\u021e\u0001\u021e\u0001\u021f\u0001\u021f\u0001\u0220\u0001"+
		"\u0220\u0001\u0221\u0001\u0221\u0001\u0222\u0001\u0222\u0001\u0223\u0001"+
		"\u0223\u0003\u0223\u11b9\b\u0223\u0001\u0224\u0001\u0224\u0001\u0224\u0001"+
		"\u0224\u0001\u0224\u0001\u0224\u0001\u0224\u0001\u0224\u0003\u0224\u11c3"+
		"\b\u0224\u0001\u0225\u0001\u0225\u0001\u0225\u0003\u0225\u11c8\b\u0225"+
		"\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0227\u0001\u0227\u0001\u0227"+
		"\u0001\u0228\u0001\u0228\u0001\u0228\u0001\u0229\u0001\u0229\u0001\u022a"+
		"\u0001\u022a\u0001\u022b\u0001\u022b\u0001\u022b\u0003\u022b\u11da\b\u022b"+
		"\u0001\u022c\u0001\u022c\u0003\u022c\u11de\b\u022c\u0001\u022d\u0001\u022d"+
		"\u0001\u022e\u0001\u022e\u0001\u022f\u0001\u022f\u0003\u022f\u11e6\b\u022f"+
		"\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0230\u0003\u0230"+
		"\u11ed\b\u0230\u0001\u0231\u0001\u0231\u0001\u0232\u0001\u0232\u0001\u0233"+
		"\u0001\u0233\u0001\u0234\u0001\u0234\u0001\u0235\u0001\u0235\u0001\u0236"+
		"\u0001\u0236\u0001\u0237\u0001\u0237\u0001\u0238\u0001\u0238\u0001\u0238"+
		"\u0001\u0239\u0001\u0239\u0001\u023a\u0001\u023a\u0001\u023b\u0001\u023b"+
		"\u0001\u023c\u0001\u023c\u0001\u023d\u0001\u023d\u0001\u023d\u0000\b\u00b6"+
		"\u01aa\u01d0\u01d2\u02a0\u0332\u034a\u03b8\u023e\u0000\u0002\u0004\u0006"+
		"\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,."+
		"02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448"+
		"\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460"+
		"\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478"+
		"\u047a\u0000-\u0002\u000055\u00a5\u00a5\u0001\u0000AB\u0002\u0000OO\u0096"+
		"\u0096\u0002\u0000\u009f\u009f\u0130\u0130\u0004\u0000\u0115\u0115\u0137"+
		"\u0137\u013c\u013c\u0141\u0141\u0002\u0000\u00a6\u00a6\u00a8\u00a8\u0002"+
		"\u0000ff\u0122\u0122\u0002\u0000\u007f\u007f\u0168\u0168\u0006\u0000\u0150"+
		"\u0151\u0154\u0154\u015b\u015b\u0164\u0164\u0175\u0175\u0180\u0180\u0002"+
		"\u0000\u001c\u001dMN\u0002\u0000\u009f\u009f\u00c3\u00c3\u0003\u0000C"+
		"Cjj\u0177\u0177\u0001\u0000hi\u0002\u0000\u011b\u011b\u013f\u013f\u0002"+
		"\u0000\u013b\u013b\u015b\u015b\u0002\u0000\u013b\u013b\u0180\u0180\u0002"+
		"\u0000\u00d3\u00d3\u014c\u014c\u0001\u0000%&\u0001\u0000IJ\u0002\u0000"+
		"\u001a\u001a\u0085\u0085\u0006\u0000\u014f\u014f\u0157\u0157\u015a\u015a"+
		"\u016d\u016d\u016f\u016f\u0174\u0174\u0002\u0000\u0175\u0175\u0178\u0178"+
		"\u0002\u0000\u0167\u0167\u017f\u017f\u0002\u0000\u00a1\u00a1\u00e8\u00e8"+
		"\u0002\u0000\u0081\u0081\u00b5\u00b5\u0002\u0000\u008d\u008d\u00de\u00de"+
		"\u0003\u0000((\u008e\u008e\u00b7\u00b7\u0006\u0000!!88>>\u0090\u0091\u00c8"+
		"\u00c9\u00cb\u00cb\u0002\u0000\u0016\u0016PP\u0001\u0000\u00a9\u00aa\u0001"+
		"\u000034\u0002\u0000**\u009d\u009d\b\u0000\u0015\u0015\u001e\u001e  ;"+
		"=KK\u00ae\u00ae\u00c0\u00c1\u00cc\u00cd\u0001\u000001\u0003\u0000\'\'"+
		"\u0080\u0080\u00d1\u00d1\u0001\u0000\u0128\u012b\u0001\u0000\u0004\u0005"+
		"\u0002\u0000GG\u00d0\u00d0\u0001\u0000\u0003\u0004\u0003\u0000\t\n\r\r"+
		"\u000f\u000f\u0001\u0000\u0010\u0013\u0002\u0000\u012d\u012d\u0140\u0140"+
		"\u0002\u0000\u011d\u011d\u0134\u0134\u0002\u0000\u011c\u011c\u0133\u0133"+
		"\u0001\u0000\u0115\u0144\u1289\u0000\u0485\u0001\u0000\u0000\u0000\u0002"+
		"\u0489\u0001\u0000\u0000\u0000\u0004\u049b\u0001\u0000\u0000\u0000\u0006"+
		"\u04a9\u0001\u0000\u0000\u0000\b\u04ad\u0001\u0000\u0000\u0000\n\u04af"+
		"\u0001\u0000\u0000\u0000\f\u04b7\u0001\u0000\u0000\u0000\u000e\u04bb\u0001"+
		"\u0000\u0000\u0000\u0010\u04c0\u0001\u0000\u0000\u0000\u0012\u04c4\u0001"+
		"\u0000\u0000\u0000\u0014\u04c9\u0001\u0000\u0000\u0000\u0016\u04cc\u0001"+
		"\u0000\u0000\u0000\u0018\u04d3\u0001\u0000\u0000\u0000\u001a\u04d9\u0001"+
		"\u0000\u0000\u0000\u001c\u04e0\u0001\u0000\u0000\u0000\u001e\u04e4\u0001"+
		"\u0000\u0000\u0000 \u04f8\u0001\u0000\u0000\u0000\"\u04fa\u0001\u0000"+
		"\u0000\u0000$\u04fd\u0001\u0000\u0000\u0000&\u04ff\u0001\u0000\u0000\u0000"+
		"(\u0504\u0001\u0000\u0000\u0000*\u050c\u0001\u0000\u0000\u0000,\u0512"+
		"\u0001\u0000\u0000\u0000.\u0514\u0001\u0000\u0000\u00000\u0516\u0001\u0000"+
		"\u0000\u00002\u0518\u0001\u0000\u0000\u00004\u051c\u0001\u0000\u0000\u0000"+
		"6\u051e\u0001\u0000\u0000\u00008\u0522\u0001\u0000\u0000\u0000:\u0527"+
		"\u0001\u0000\u0000\u0000<\u052f\u0001\u0000\u0000\u0000>\u0536\u0001\u0000"+
		"\u0000\u0000@\u0538\u0001\u0000\u0000\u0000B\u0542\u0001\u0000\u0000\u0000"+
		"D\u0544\u0001\u0000\u0000\u0000F\u054b\u0001\u0000\u0000\u0000H\u0555"+
		"\u0001\u0000\u0000\u0000J\u0559\u0001\u0000\u0000\u0000L\u055d\u0001\u0000"+
		"\u0000\u0000N\u0567\u0001\u0000\u0000\u0000P\u056b\u0001\u0000\u0000\u0000"+
		"R\u056e\u0001\u0000\u0000\u0000T\u0576\u0001\u0000\u0000\u0000V\u057a"+
		"\u0001\u0000\u0000\u0000X\u0581\u0001\u0000\u0000\u0000Z\u0583\u0001\u0000"+
		"\u0000\u0000\\\u0589\u0001\u0000\u0000\u0000^\u058b\u0001\u0000\u0000"+
		"\u0000`\u0591\u0001\u0000\u0000\u0000b\u0594\u0001\u0000\u0000\u0000d"+
		"\u059a\u0001\u0000\u0000\u0000f\u05a2\u0001\u0000\u0000\u0000h\u05a4\u0001"+
		"\u0000\u0000\u0000j\u05ad\u0001\u0000\u0000\u0000l\u05b5\u0001\u0000\u0000"+
		"\u0000n\u05d0\u0001\u0000\u0000\u0000p\u05e8\u0001\u0000\u0000\u0000r"+
		"\u05ea\u0001\u0000\u0000\u0000t\u05ed\u0001\u0000\u0000\u0000v\u05f2\u0001"+
		"\u0000\u0000\u0000x\u05fd\u0001\u0000\u0000\u0000z\u061d\u0001\u0000\u0000"+
		"\u0000|\u061f\u0001\u0000\u0000\u0000~\u0623\u0001\u0000\u0000\u0000\u0080"+
		"\u062f\u0001\u0000\u0000\u0000\u0082\u0633\u0001\u0000\u0000\u0000\u0084"+
		"\u0637\u0001\u0000\u0000\u0000\u0086\u0639\u0001\u0000\u0000\u0000\u0088"+
		"\u063e\u0001\u0000\u0000\u0000\u008a\u0643\u0001\u0000\u0000\u0000\u008c"+
		"\u0645\u0001\u0000\u0000\u0000\u008e\u064c\u0001\u0000\u0000\u0000\u0090"+
		"\u0656\u0001\u0000\u0000\u0000\u0092\u065c\u0001\u0000\u0000\u0000\u0094"+
		"\u065e\u0001\u0000\u0000\u0000\u0096\u0661\u0001\u0000\u0000\u0000\u0098"+
		"\u0664\u0001\u0000\u0000\u0000\u009a\u066f\u0001\u0000\u0000\u0000\u009c"+
		"\u0671\u0001\u0000\u0000\u0000\u009e\u0677\u0001\u0000\u0000\u0000\u00a0"+
		"\u067f\u0001\u0000\u0000\u0000\u00a2\u0683\u0001\u0000\u0000\u0000\u00a4"+
		"\u0686\u0001\u0000\u0000\u0000\u00a6\u0690\u0001\u0000\u0000\u0000\u00a8"+
		"\u0692\u0001\u0000\u0000\u0000\u00aa\u0696\u0001\u0000\u0000\u0000\u00ac"+
		"\u069b\u0001\u0000\u0000\u0000\u00ae\u06a0\u0001\u0000\u0000\u0000\u00b0"+
		"\u06a8\u0001\u0000\u0000\u0000\u00b2\u06aa\u0001\u0000\u0000\u0000\u00b4"+
		"\u06ac\u0001\u0000\u0000\u0000\u00b6\u06ae\u0001\u0000\u0000\u0000\u00b8"+
		"\u06bc\u0001\u0000\u0000\u0000\u00ba\u06ca\u0001\u0000\u0000\u0000\u00bc"+
		"\u06cc\u0001\u0000\u0000\u0000\u00be\u06d0\u0001\u0000\u0000\u0000\u00c0"+
		"\u06dc\u0001\u0000\u0000\u0000\u00c2\u06de\u0001\u0000\u0000\u0000\u00c4"+
		"\u06e1\u0001\u0000\u0000\u0000\u00c6\u06e5\u0001\u0000\u0000\u0000\u00c8"+
		"\u06e8\u0001\u0000\u0000\u0000\u00ca\u06f0\u0001\u0000\u0000\u0000\u00cc"+
		"\u06f3\u0001\u0000\u0000\u0000\u00ce\u06f9\u0001\u0000\u0000\u0000\u00d0"+
		"\u0700\u0001\u0000\u0000\u0000\u00d2\u0704\u0001\u0000\u0000\u0000\u00d4"+
		"\u0706\u0001\u0000\u0000\u0000\u00d6\u0709\u0001\u0000\u0000\u0000\u00d8"+
		"\u0715\u0001\u0000\u0000\u0000\u00da\u0718\u0001\u0000\u0000\u0000\u00dc"+
		"\u071c\u0001\u0000\u0000\u0000\u00de\u071e\u0001\u0000\u0000\u0000\u00e0"+
		"\u0723\u0001\u0000\u0000\u0000\u00e2\u0726\u0001\u0000\u0000\u0000\u00e4"+
		"\u0733\u0001\u0000\u0000\u0000\u00e6\u0735\u0001\u0000\u0000\u0000\u00e8"+
		"\u073a\u0001\u0000\u0000\u0000\u00ea\u073d\u0001\u0000\u0000\u0000\u00ec"+
		"\u0740\u0001\u0000\u0000\u0000\u00ee\u0742\u0001\u0000\u0000\u0000\u00f0"+
		"\u0752\u0001\u0000\u0000\u0000\u00f2\u0759\u0001\u0000\u0000\u0000\u00f4"+
		"\u075b\u0001\u0000\u0000\u0000\u00f6\u076a\u0001\u0000\u0000\u0000\u00f8"+
		"\u076c\u0001\u0000\u0000\u0000\u00fa\u0774\u0001\u0000\u0000\u0000\u00fc"+
		"\u0778\u0001\u0000\u0000\u0000\u00fe\u077b\u0001\u0000\u0000\u0000\u0100"+
		"\u0798\u0001\u0000\u0000\u0000\u0102\u07a0\u0001\u0000\u0000\u0000\u0104"+
		"\u07a4\u0001\u0000\u0000\u0000\u0106\u07a7\u0001\u0000\u0000\u0000\u0108"+
		"\u07aa\u0001\u0000\u0000\u0000\u010a\u07af\u0001\u0000\u0000\u0000\u010c"+
		"\u07b7\u0001\u0000\u0000\u0000\u010e\u07be\u0001\u0000\u0000\u0000\u0110"+
		"\u07c1\u0001\u0000\u0000\u0000\u0112\u07c8\u0001\u0000\u0000\u0000\u0114"+
		"\u07cb\u0001\u0000\u0000\u0000\u0116\u07cf\u0001\u0000\u0000\u0000\u0118"+
		"\u07d5\u0001\u0000\u0000\u0000\u011a\u07dd\u0001\u0000\u0000\u0000\u011c"+
		"\u07e6\u0001\u0000\u0000\u0000\u011e\u07ee\u0001\u0000\u0000\u0000\u0120"+
		"\u07f0\u0001\u0000\u0000\u0000\u0122\u07f3\u0001\u0000\u0000\u0000\u0124"+
		"\u07f6\u0001\u0000\u0000\u0000\u0126\u07fa\u0001\u0000\u0000\u0000\u0128"+
		"\u0807\u0001\u0000\u0000\u0000\u012a\u0809\u0001\u0000\u0000\u0000\u012c"+
		"\u080c\u0001\u0000\u0000\u0000\u012e\u0817\u0001\u0000\u0000\u0000\u0130"+
		"\u0819\u0001\u0000\u0000\u0000\u0132\u081c\u0001\u0000\u0000\u0000\u0134"+
		"\u0824\u0001\u0000\u0000\u0000\u0136\u082b\u0001\u0000\u0000\u0000\u0138"+
		"\u082d\u0001\u0000\u0000\u0000\u013a\u0836\u0001\u0000\u0000\u0000\u013c"+
		"\u083d\u0001\u0000\u0000\u0000\u013e\u0840\u0001\u0000\u0000\u0000\u0140"+
		"\u0843\u0001\u0000\u0000\u0000\u0142\u0846\u0001\u0000\u0000\u0000\u0144"+
		"\u0848\u0001\u0000\u0000\u0000\u0146\u0850\u0001\u0000\u0000\u0000\u0148"+
		"\u0859\u0001\u0000\u0000\u0000\u014a\u0862\u0001\u0000\u0000\u0000\u014c"+
		"\u0864\u0001\u0000\u0000\u0000\u014e\u086a\u0001\u0000\u0000\u0000\u0150"+
		"\u0870\u0001\u0000\u0000\u0000\u0152\u087e\u0001\u0000\u0000\u0000\u0154"+
		"\u088b\u0001\u0000\u0000\u0000\u0156\u088f\u0001\u0000\u0000\u0000\u0158"+
		"\u0891\u0001\u0000\u0000\u0000\u015a\u0895\u0001\u0000\u0000\u0000\u015c"+
		"\u089a\u0001\u0000\u0000\u0000\u015e\u089c\u0001\u0000\u0000\u0000\u0160"+
		"\u08a3\u0001\u0000\u0000\u0000\u0162\u08a5\u0001\u0000\u0000\u0000\u0164"+
		"\u08af\u0001\u0000\u0000\u0000\u0166\u08b5\u0001\u0000\u0000\u0000\u0168"+
		"\u08b7\u0001\u0000\u0000\u0000\u016a\u08bf\u0001\u0000\u0000\u0000\u016c"+
		"\u08c7\u0001\u0000\u0000\u0000\u016e\u08cf\u0001\u0000\u0000\u0000\u0170"+
		"\u08db\u0001\u0000\u0000\u0000\u0172\u08ec\u0001\u0000\u0000\u0000\u0174"+
		"\u08ef\u0001\u0000\u0000\u0000\u0176\u08fa\u0001\u0000\u0000\u0000\u0178"+
		"\u08ff\u0001\u0000\u0000\u0000\u017a\u0903\u0001\u0000\u0000\u0000\u017c"+
		"\u0905\u0001\u0000\u0000\u0000\u017e\u090a\u0001\u0000\u0000\u0000\u0180"+
		"\u0913\u0001\u0000\u0000\u0000\u0182\u0917\u0001\u0000\u0000\u0000\u0184"+
		"\u091a\u0001\u0000\u0000\u0000\u0186\u091e\u0001\u0000\u0000\u0000\u0188"+
		"\u0920\u0001\u0000\u0000\u0000\u018a\u0923\u0001\u0000\u0000\u0000\u018c"+
		"\u0927\u0001\u0000\u0000\u0000\u018e\u092f\u0001\u0000\u0000\u0000\u0190"+
		"\u0935\u0001\u0000\u0000\u0000\u0192\u093e\u0001\u0000\u0000\u0000\u0194"+
		"\u0940\u0001\u0000\u0000\u0000\u0196\u0944\u0001\u0000\u0000\u0000\u0198"+
		"\u0948\u0001\u0000\u0000\u0000\u019a\u094c\u0001\u0000\u0000\u0000\u019c"+
		"\u0950\u0001\u0000\u0000\u0000\u019e\u0954\u0001\u0000\u0000\u0000\u01a0"+
		"\u0958\u0001\u0000\u0000\u0000\u01a2\u095c\u0001\u0000\u0000\u0000\u01a4"+
		"\u095e\u0001\u0000\u0000\u0000\u01a6\u096b\u0001\u0000\u0000\u0000\u01a8"+
		"\u096e\u0001\u0000\u0000\u0000\u01aa\u097a\u0001\u0000\u0000\u0000\u01ac"+
		"\u0987\u0001\u0000\u0000\u0000\u01ae\u0989\u0001\u0000\u0000\u0000\u01b0"+
		"\u098f\u0001\u0000\u0000\u0000\u01b2\u0991\u0001\u0000\u0000\u0000\u01b4"+
		"\u0995\u0001\u0000\u0000\u0000\u01b6\u099f\u0001\u0000\u0000\u0000\u01b8"+
		"\u09a1\u0001\u0000\u0000\u0000\u01ba\u09aa\u0001\u0000\u0000\u0000\u01bc"+
		"\u09ac\u0001\u0000\u0000\u0000\u01be\u09b0\u0001\u0000\u0000\u0000\u01c0"+
		"\u09b4\u0001\u0000\u0000\u0000\u01c2\u09b8\u0001\u0000\u0000\u0000\u01c4"+
		"\u09bc\u0001\u0000\u0000\u0000\u01c6\u09c0\u0001\u0000\u0000\u0000\u01c8"+
		"\u09c4\u0001\u0000\u0000\u0000\u01ca\u09cb\u0001\u0000\u0000\u0000\u01cc"+
		"\u09cd\u0001\u0000\u0000\u0000\u01ce\u09d7\u0001\u0000\u0000\u0000\u01d0"+
		"\u09e1\u0001\u0000\u0000\u0000\u01d2\u09eb\u0001\u0000\u0000\u0000\u01d4"+
		"\u09f9\u0001\u0000\u0000\u0000\u01d6\u09fb\u0001\u0000\u0000\u0000\u01d8"+
		"\u09fe\u0001\u0000\u0000\u0000\u01da\u0a03\u0001\u0000\u0000\u0000\u01dc"+
		"\u0a0c\u0001\u0000\u0000\u0000\u01de\u0a0e\u0001\u0000\u0000\u0000\u01e0"+
		"\u0a11\u0001\u0000\u0000\u0000\u01e2\u0a14\u0001\u0000\u0000\u0000\u01e4"+
		"\u0a17\u0001\u0000\u0000\u0000\u01e6\u0a1a\u0001\u0000\u0000\u0000\u01e8"+
		"\u0a1e\u0001\u0000\u0000\u0000\u01ea\u0a22\u0001\u0000\u0000\u0000\u01ec"+
		"\u0a27\u0001\u0000\u0000\u0000\u01ee\u0a29\u0001\u0000\u0000\u0000\u01f0"+
		"\u0a31\u0001\u0000\u0000\u0000\u01f2\u0a33\u0001\u0000\u0000\u0000\u01f4"+
		"\u0a36\u0001\u0000\u0000\u0000\u01f6\u0a39\u0001\u0000\u0000\u0000\u01f8"+
		"\u0a41\u0001\u0000\u0000\u0000\u01fa\u0a45\u0001\u0000\u0000\u0000\u01fc"+
		"\u0a47\u0001\u0000\u0000\u0000\u01fe\u0a4a\u0001\u0000\u0000\u0000\u0200"+
		"\u0a57\u0001\u0000\u0000\u0000\u0202\u0a59\u0001\u0000\u0000\u0000\u0204"+
		"\u0a5b\u0001\u0000\u0000\u0000\u0206\u0a5e\u0001\u0000\u0000\u0000\u0208"+
		"\u0a62\u0001\u0000\u0000\u0000\u020a\u0a6a\u0001\u0000\u0000\u0000\u020c"+
		"\u0a71\u0001\u0000\u0000\u0000\u020e\u0a73\u0001\u0000\u0000\u0000\u0210"+
		"\u0a79\u0001\u0000\u0000\u0000\u0212\u0a7b\u0001\u0000\u0000\u0000\u0214"+
		"\u0a7e\u0001\u0000\u0000\u0000\u0216\u0a81\u0001\u0000\u0000\u0000\u0218"+
		"\u0a86\u0001\u0000\u0000\u0000\u021a\u0a8c\u0001\u0000\u0000\u0000\u021c"+
		"\u0a8e\u0001\u0000\u0000\u0000\u021e\u0a95\u0001\u0000\u0000\u0000\u0220"+
		"\u0a97\u0001\u0000\u0000\u0000\u0222\u0a99\u0001\u0000\u0000\u0000\u0224"+
		"\u0a9d\u0001\u0000\u0000\u0000\u0226\u0aac\u0001\u0000\u0000\u0000\u0228"+
		"\u0ab6\u0001\u0000\u0000\u0000\u022a\u0ab9\u0001\u0000\u0000\u0000\u022c"+
		"\u0abd\u0001\u0000\u0000\u0000\u022e\u0ac1\u0001\u0000\u0000\u0000\u0230"+
		"\u0ac4\u0001\u0000\u0000\u0000\u0232\u0acd\u0001\u0000\u0000\u0000\u0234"+
		"\u0ad1\u0001\u0000\u0000\u0000\u0236\u0ad4\u0001\u0000\u0000\u0000\u0238"+
		"\u0aeb\u0001\u0000\u0000\u0000\u023a\u0aed\u0001\u0000\u0000\u0000\u023c"+
		"\u0aef\u0001\u0000\u0000\u0000\u023e\u0af3\u0001\u0000\u0000\u0000\u0240"+
		"\u0af5\u0001\u0000\u0000\u0000\u0242\u0aff\u0001\u0000\u0000\u0000\u0244"+
		"\u0b03\u0001\u0000\u0000\u0000\u0246\u0b0b\u0001\u0000\u0000\u0000\u0248"+
		"\u0b16\u0001\u0000\u0000\u0000\u024a\u0b24\u0001\u0000\u0000\u0000\u024c"+
		"\u0b2b\u0001\u0000\u0000\u0000\u024e\u0b2d\u0001\u0000\u0000\u0000\u0250"+
		"\u0b34\u0001\u0000\u0000\u0000\u0252\u0b37\u0001\u0000\u0000\u0000\u0254"+
		"\u0b3b\u0001\u0000\u0000\u0000\u0256\u0b3d\u0001\u0000\u0000\u0000\u0258"+
		"\u0b41\u0001\u0000\u0000\u0000\u025a\u0b4c\u0001\u0000\u0000\u0000\u025c"+
		"\u0b52\u0001\u0000\u0000\u0000\u025e\u0b5f\u0001\u0000\u0000\u0000\u0260"+
		"\u0b66\u0001\u0000\u0000\u0000\u0262\u0b6d\u0001\u0000\u0000\u0000\u0264"+
		"\u0b70\u0001\u0000\u0000\u0000\u0266\u0b74\u0001\u0000\u0000\u0000\u0268"+
		"\u0b76\u0001\u0000\u0000\u0000\u026a\u0b7a\u0001\u0000\u0000\u0000\u026c"+
		"\u0b7c\u0001\u0000\u0000\u0000\u026e\u0b80\u0001\u0000\u0000\u0000\u0270"+
		"\u0b84\u0001\u0000\u0000\u0000\u0272\u0b88\u0001\u0000\u0000\u0000\u0274"+
		"\u0b8c\u0001\u0000\u0000\u0000\u0276\u0b90\u0001\u0000\u0000\u0000\u0278"+
		"\u0b9d\u0001\u0000\u0000\u0000\u027a\u0ba8\u0001\u0000\u0000\u0000\u027c"+
		"\u0baa\u0001\u0000\u0000\u0000\u027e\u0bac\u0001\u0000\u0000\u0000\u0280"+
		"\u0bb1\u0001\u0000\u0000\u0000\u0282\u0bb5\u0001\u0000\u0000\u0000\u0284"+
		"\u0bb7\u0001\u0000\u0000\u0000\u0286\u0bbd\u0001\u0000\u0000\u0000\u0288"+
		"\u0bc3\u0001\u0000\u0000\u0000\u028a\u0bc9\u0001\u0000\u0000\u0000\u028c"+
		"\u0bcb\u0001\u0000\u0000\u0000\u028e\u0bcd\u0001\u0000\u0000\u0000\u0290"+
		"\u0bcf\u0001\u0000\u0000\u0000\u0292\u0bd8\u0001\u0000\u0000\u0000\u0294"+
		"\u0bda\u0001\u0000\u0000\u0000\u0296\u0be2\u0001\u0000\u0000\u0000\u0298"+
		"\u0be8\u0001\u0000\u0000\u0000\u029a\u0bf0\u0001\u0000\u0000\u0000\u029c"+
		"\u0bf6\u0001\u0000\u0000\u0000\u029e\u0bf9\u0001\u0000\u0000\u0000\u02a0"+
		"\u0c37\u0001\u0000\u0000\u0000\u02a2\u0c4c\u0001\u0000\u0000\u0000\u02a4"+
		"\u0c55\u0001\u0000\u0000\u0000\u02a6\u0c57\u0001\u0000\u0000\u0000\u02a8"+
		"\u0c7e\u0001\u0000\u0000\u0000\u02aa\u0ca3\u0001\u0000\u0000\u0000\u02ac"+
		"\u0ca5\u0001\u0000\u0000\u0000\u02ae\u0ca7\u0001\u0000\u0000\u0000\u02b0"+
		"\u0ca9\u0001\u0000\u0000\u0000\u02b2\u0cad\u0001\u0000\u0000\u0000\u02b4"+
		"\u0cb1\u0001\u0000\u0000\u0000\u02b6\u0cb5\u0001\u0000\u0000\u0000\u02b8"+
		"\u0ce5\u0001\u0000\u0000\u0000\u02ba\u0d13\u0001\u0000\u0000\u0000\u02bc"+
		"\u0d41\u0001\u0000\u0000\u0000\u02be\u0d43\u0001\u0000\u0000\u0000\u02c0"+
		"\u0d50\u0001\u0000\u0000\u0000\u02c2\u0d52\u0001\u0000\u0000\u0000\u02c4"+
		"\u0d81\u0001\u0000\u0000\u0000\u02c6\u0d85\u0001\u0000\u0000\u0000\u02c8"+
		"\u0d8c\u0001\u0000\u0000\u0000\u02ca\u0d9a\u0001\u0000\u0000\u0000\u02cc"+
		"\u0daa\u0001\u0000\u0000\u0000\u02ce\u0dac\u0001\u0000\u0000\u0000\u02d0"+
		"\u0dbc\u0001\u0000\u0000\u0000\u02d2\u0dca\u0001\u0000\u0000\u0000\u02d4"+
		"\u0dcc\u0001\u0000\u0000\u0000\u02d6\u0dd9\u0001\u0000\u0000\u0000\u02d8"+
		"\u0ddf\u0001\u0000\u0000\u0000\u02da\u0de3\u0001\u0000\u0000\u0000\u02dc"+
		"\u0de5\u0001\u0000\u0000\u0000\u02de\u0dea\u0001\u0000\u0000\u0000\u02e0"+
		"\u0dee\u0001\u0000\u0000\u0000\u02e2\u0df1\u0001\u0000\u0000\u0000\u02e4"+
		"\u0df8\u0001\u0000\u0000\u0000\u02e6\u0e00\u0001\u0000\u0000\u0000\u02e8"+
		"\u0e06\u0001\u0000\u0000\u0000\u02ea\u0e08\u0001\u0000\u0000\u0000\u02ec"+
		"\u0e0d\u0001\u0000\u0000\u0000\u02ee\u0e15\u0001\u0000\u0000\u0000\u02f0"+
		"\u0e17\u0001\u0000\u0000\u0000\u02f2\u0e1c\u0001\u0000\u0000\u0000\u02f4"+
		"\u0e22\u0001\u0000\u0000\u0000\u02f6\u0e27\u0001\u0000\u0000\u0000\u02f8"+
		"\u0e2b\u0001\u0000\u0000\u0000\u02fa\u0e3b\u0001\u0000\u0000\u0000\u02fc"+
		"\u0e3d\u0001\u0000\u0000\u0000\u02fe\u0e43\u0001\u0000\u0000\u0000\u0300"+
		"\u0e4b\u0001\u0000\u0000\u0000\u0302\u0e4e\u0001\u0000\u0000\u0000\u0304"+
		"\u0e54\u0001\u0000\u0000\u0000\u0306\u0e5f\u0001\u0000\u0000\u0000\u0308"+
		"\u0e61\u0001\u0000\u0000\u0000\u030a\u0e64\u0001\u0000\u0000\u0000\u030c"+
		"\u0e66\u0001\u0000\u0000\u0000\u030e\u0e7a\u0001\u0000\u0000\u0000\u0310"+
		"\u0e7d\u0001\u0000\u0000\u0000\u0312\u0e83\u0001\u0000\u0000\u0000\u0314"+
		"\u0e86\u0001\u0000\u0000\u0000\u0316\u0e8d\u0001\u0000\u0000\u0000\u0318"+
		"\u0e96\u0001\u0000\u0000\u0000\u031a\u0e99\u0001\u0000\u0000\u0000\u031c"+
		"\u0e9f\u0001\u0000\u0000\u0000\u031e\u0ea2\u0001\u0000\u0000\u0000\u0320"+
		"\u0eab\u0001\u0000\u0000\u0000\u0322\u0eb3\u0001\u0000\u0000\u0000\u0324"+
		"\u0eb5\u0001\u0000\u0000\u0000\u0326\u0eb7\u0001\u0000\u0000\u0000\u0328"+
		"\u0ebf\u0001\u0000\u0000\u0000\u032a\u0ec7\u0001\u0000\u0000\u0000\u032c"+
		"\u0ec9\u0001\u0000\u0000\u0000\u032e\u0ed7\u0001\u0000\u0000\u0000\u0330"+
		"\u0ee5\u0001\u0000\u0000\u0000\u0332\u0efe\u0001\u0000\u0000\u0000\u0334"+
		"\u0f24\u0001\u0000\u0000\u0000\u0336\u0f26\u0001\u0000\u0000\u0000\u0338"+
		"\u0f2d\u0001\u0000\u0000\u0000\u033a\u0f2f\u0001\u0000\u0000\u0000\u033c"+
		"\u0f36\u0001\u0000\u0000\u0000\u033e\u0f3b\u0001\u0000\u0000\u0000\u0340"+
		"\u0f40\u0001\u0000\u0000\u0000\u0342\u0f49\u0001\u0000\u0000\u0000\u0344"+
		"\u0f52\u0001\u0000\u0000\u0000\u0346\u0f54\u0001\u0000\u0000\u0000\u0348"+
		"\u0f56\u0001\u0000\u0000\u0000\u034a\u0f63\u0001\u0000\u0000\u0000\u034c"+
		"\u0f6d\u0001\u0000\u0000\u0000\u034e\u0f73\u0001\u0000\u0000\u0000\u0350"+
		"\u0f81\u0001\u0000\u0000\u0000\u0352\u0f85\u0001\u0000\u0000\u0000\u0354"+
		"\u0f89\u0001\u0000\u0000\u0000\u0356\u0f8d\u0001\u0000\u0000\u0000\u0358"+
		"\u0f8f\u0001\u0000\u0000\u0000\u035a\u0f91\u0001\u0000\u0000\u0000\u035c"+
		"\u0f97\u0001\u0000\u0000\u0000\u035e\u0f9c\u0001\u0000\u0000\u0000\u0360"+
		"\u0fb0\u0001\u0000\u0000\u0000\u0362\u0fb4\u0001\u0000\u0000\u0000\u0364"+
		"\u0fb6\u0001\u0000\u0000\u0000\u0366\u0fc2\u0001\u0000\u0000\u0000\u0368"+
		"\u0fcd\u0001\u0000\u0000\u0000\u036a\u0fd2\u0001\u0000\u0000\u0000\u036c"+
		"\u0fd7\u0001\u0000\u0000\u0000\u036e\u0fdc\u0001\u0000\u0000\u0000\u0370"+
		"\u0fde\u0001\u0000\u0000\u0000\u0372\u0fef\u0001\u0000\u0000\u0000\u0374"+
		"\u0ff3\u0001\u0000\u0000\u0000\u0376\u0ff5\u0001\u0000\u0000\u0000\u0378"+
		"\u0ff7\u0001\u0000\u0000\u0000\u037a\u1000\u0001\u0000\u0000\u0000\u037c"+
		"\u1002\u0001\u0000\u0000\u0000\u037e\u100a\u0001\u0000\u0000\u0000\u0380"+
		"\u100c\u0001\u0000\u0000\u0000\u0382\u1014\u0001\u0000\u0000\u0000\u0384"+
		"\u101b\u0001\u0000\u0000\u0000\u0386\u101d\u0001\u0000\u0000\u0000\u0388"+
		"\u101f\u0001\u0000\u0000\u0000\u038a\u1022\u0001\u0000\u0000\u0000\u038c"+
		"\u1026\u0001\u0000\u0000\u0000\u038e\u1028\u0001\u0000\u0000\u0000\u0390"+
		"\u102d\u0001\u0000\u0000\u0000\u0392\u102f\u0001\u0000\u0000\u0000\u0394"+
		"\u1031\u0001\u0000\u0000\u0000\u0396\u1033\u0001\u0000\u0000\u0000\u0398"+
		"\u1038\u0001\u0000\u0000\u0000\u039a\u103f\u0001\u0000\u0000\u0000\u039c"+
		"\u1041\u0001\u0000\u0000\u0000\u039e\u1046\u0001\u0000\u0000\u0000\u03a0"+
		"\u104a\u0001\u0000\u0000\u0000\u03a2\u104c\u0001\u0000\u0000\u0000\u03a4"+
		"\u1053\u0001\u0000\u0000\u0000\u03a6\u1058\u0001\u0000\u0000\u0000\u03a8"+
		"\u105b\u0001\u0000\u0000\u0000\u03aa\u1063\u0001\u0000\u0000\u0000\u03ac"+
		"\u106b\u0001\u0000\u0000\u0000\u03ae\u106e\u0001\u0000\u0000\u0000\u03b0"+
		"\u1072\u0001\u0000\u0000\u0000\u03b2\u1078\u0001\u0000\u0000\u0000\u03b4"+
		"\u1080\u0001\u0000\u0000\u0000\u03b6\u1084\u0001\u0000\u0000\u0000\u03b8"+
		"\u108b\u0001\u0000\u0000\u0000\u03ba\u10a5\u0001\u0000\u0000\u0000\u03bc"+
		"\u10aa\u0001\u0000\u0000\u0000\u03be\u10b6\u0001\u0000\u0000\u0000\u03c0"+
		"\u10b8\u0001\u0000\u0000\u0000\u03c2\u10ba\u0001\u0000\u0000\u0000\u03c4"+
		"\u10bf\u0001\u0000\u0000\u0000\u03c6\u10c4\u0001\u0000\u0000\u0000\u03c8"+
		"\u10c9\u0001\u0000\u0000\u0000\u03ca\u10ce\u0001\u0000\u0000\u0000\u03cc"+
		"\u10d5\u0001\u0000\u0000\u0000\u03ce\u10d7\u0001\u0000\u0000\u0000\u03d0"+
		"\u10d9\u0001\u0000\u0000\u0000\u03d2\u10de\u0001\u0000\u0000\u0000\u03d4"+
		"\u10e0\u0001\u0000\u0000\u0000\u03d6\u10e7\u0001\u0000\u0000\u0000\u03d8"+
		"\u10e9\u0001\u0000\u0000\u0000\u03da\u10eb\u0001\u0000\u0000\u0000\u03dc"+
		"\u10f0\u0001\u0000\u0000\u0000\u03de\u10f5\u0001\u0000\u0000\u0000\u03e0"+
		"\u10fa\u0001\u0000\u0000\u0000\u03e2\u1101\u0001\u0000\u0000\u0000\u03e4"+
		"\u1103\u0001\u0000\u0000\u0000\u03e6\u1105\u0001\u0000\u0000\u0000\u03e8"+
		"\u110a\u0001\u0000\u0000\u0000\u03ea\u110f\u0001\u0000\u0000\u0000\u03ec"+
		"\u1114\u0001\u0000\u0000\u0000\u03ee\u1116\u0001\u0000\u0000\u0000\u03f0"+
		"\u111f\u0001\u0000\u0000\u0000\u03f2\u1123\u0001\u0000\u0000\u0000\u03f4"+
		"\u1125\u0001\u0000\u0000\u0000\u03f6\u1127\u0001\u0000\u0000\u0000\u03f8"+
		"\u1129\u0001\u0000\u0000\u0000\u03fa\u112b\u0001\u0000\u0000\u0000\u03fc"+
		"\u112d\u0001\u0000\u0000\u0000\u03fe\u1134\u0001\u0000\u0000\u0000\u0400"+
		"\u113d\u0001\u0000\u0000\u0000\u0402\u1146\u0001\u0000\u0000\u0000\u0404"+
		"\u1148\u0001\u0000\u0000\u0000\u0406\u1157\u0001\u0000\u0000\u0000\u0408"+
		"\u1160\u0001\u0000\u0000\u0000\u040a\u1164\u0001\u0000\u0000\u0000\u040c"+
		"\u1168\u0001\u0000\u0000\u0000\u040e\u116c\u0001\u0000\u0000\u0000\u0410"+
		"\u116e\u0001\u0000\u0000\u0000\u0412\u1170\u0001\u0000\u0000\u0000\u0414"+
		"\u1177\u0001\u0000\u0000\u0000\u0416\u117b\u0001\u0000\u0000\u0000\u0418"+
		"\u117d\u0001\u0000\u0000\u0000\u041a\u1181\u0001\u0000\u0000\u0000\u041c"+
		"\u1183\u0001\u0000\u0000\u0000\u041e\u118a\u0001\u0000\u0000\u0000\u0420"+
		"\u118c\u0001\u0000\u0000\u0000\u0422\u118e\u0001\u0000\u0000\u0000\u0424"+
		"\u1190\u0001\u0000\u0000\u0000\u0426\u1192\u0001\u0000\u0000\u0000\u0428"+
		"\u1196\u0001\u0000\u0000\u0000\u042a\u1198\u0001\u0000\u0000\u0000\u042c"+
		"\u119a\u0001\u0000\u0000\u0000\u042e\u119c\u0001\u0000\u0000\u0000\u0430"+
		"\u119e\u0001\u0000\u0000\u0000\u0432\u11a2\u0001\u0000\u0000\u0000\u0434"+
		"\u11a4\u0001\u0000\u0000\u0000\u0436\u11a6\u0001\u0000\u0000\u0000\u0438"+
		"\u11a8\u0001\u0000\u0000\u0000\u043a\u11aa\u0001\u0000\u0000\u0000\u043c"+
		"\u11ac\u0001\u0000\u0000\u0000\u043e\u11ae\u0001\u0000\u0000\u0000\u0440"+
		"\u11b0\u0001\u0000\u0000\u0000\u0442\u11b2\u0001\u0000\u0000\u0000\u0444"+
		"\u11b4\u0001\u0000\u0000\u0000\u0446\u11b8\u0001\u0000\u0000\u0000\u0448"+
		"\u11c2\u0001\u0000\u0000\u0000\u044a\u11c7\u0001\u0000\u0000\u0000\u044c"+
		"\u11c9\u0001\u0000\u0000\u0000\u044e\u11cc\u0001\u0000\u0000\u0000\u0450"+
		"\u11cf\u0001\u0000\u0000\u0000\u0452\u11d2\u0001\u0000\u0000\u0000\u0454"+
		"\u11d4\u0001\u0000\u0000\u0000\u0456\u11d9\u0001\u0000\u0000\u0000\u0458"+
		"\u11dd\u0001\u0000\u0000\u0000\u045a\u11df\u0001\u0000\u0000\u0000\u045c"+
		"\u11e1\u0001\u0000\u0000\u0000\u045e\u11e5\u0001\u0000\u0000\u0000\u0460"+
		"\u11ec\u0001\u0000\u0000\u0000\u0462\u11ee\u0001\u0000\u0000\u0000\u0464"+
		"\u11f0\u0001\u0000\u0000\u0000\u0466\u11f2\u0001\u0000\u0000\u0000\u0468"+
		"\u11f4\u0001\u0000\u0000\u0000\u046a\u11f6\u0001\u0000\u0000\u0000\u046c"+
		"\u11f8\u0001\u0000\u0000\u0000\u046e\u11fa\u0001\u0000\u0000\u0000\u0470"+
		"\u11fc\u0001\u0000\u0000\u0000\u0472\u11ff\u0001\u0000\u0000\u0000\u0474"+
		"\u1201\u0001\u0000\u0000\u0000\u0476\u1203\u0001\u0000\u0000\u0000\u0478"+
		"\u1205\u0001\u0000\u0000\u0000\u047a\u1207\u0001\u0000\u0000\u0000\u047c"+
		"\u047e\u0003\u0002\u0001\u0000\u047d\u047f\u0003\"\u0011\u0000\u047e\u047d"+
		"\u0001\u0000\u0000\u0000\u047e\u047f\u0001\u0000\u0000\u0000\u047f\u0480"+
		"\u0001\u0000\u0000\u0000\u0480\u0481\u0005\u0000\u0000\u0001\u0481\u0486"+
		"\u0001\u0000\u0000\u0000\u0482\u0483\u0003\"\u0011\u0000\u0483\u0484\u0005"+
		"\u0000\u0000\u0001\u0484\u0486\u0001\u0000\u0000\u0000\u0485\u047c\u0001"+
		"\u0000\u0000\u0000\u0485\u0482\u0001\u0000\u0000\u0000\u0486\u0001\u0001"+
		"\u0000\u0000\u0000\u0487\u048a\u0003\u0004\u0002\u0000\u0488\u048a\u0003"+
		"\u0006\u0003\u0000\u0489\u0487\u0001\u0000\u0000\u0000\u0489\u0488\u0001"+
		"\u0000\u0000\u0000\u048a\u0003\u0001\u0000\u0000\u0000\u048b\u048d\u0003"+
		"\u001e\u000f\u0000\u048c\u048b\u0001\u0000\u0000\u0000\u048d\u048e\u0001"+
		"\u0000\u0000\u0000\u048e\u048c\u0001\u0000\u0000\u0000\u048e\u048f\u0001"+
		"\u0000\u0000\u0000\u048f\u049c\u0001\u0000\u0000\u0000\u0490\u0492\u0003"+
		"\n\u0005\u0000\u0491\u0490\u0001\u0000\u0000\u0000\u0492\u0493\u0001\u0000"+
		"\u0000\u0000\u0493\u0491\u0001\u0000\u0000\u0000\u0493\u0494\u0001\u0000"+
		"\u0000\u0000\u0494\u0498\u0001\u0000\u0000\u0000\u0495\u0497\u0003\u001e"+
		"\u000f\u0000\u0496\u0495\u0001\u0000\u0000\u0000\u0497\u049a\u0001\u0000"+
		"\u0000\u0000\u0498\u0496\u0001\u0000\u0000\u0000\u0498\u0499\u0001\u0000"+
		"\u0000\u0000\u0499\u049c\u0001\u0000\u0000\u0000\u049a\u0498\u0001\u0000"+
		"\u0000\u0000\u049b\u048c\u0001\u0000\u0000\u0000\u049b\u0491\u0001\u0000"+
		"\u0000\u0000\u049c\u0005\u0001\u0000\u0000\u0000\u049d\u04a2\u0003&\u0013"+
		"\u0000\u049e\u04a0\u00034\u001a\u0000\u049f\u04a1\u0003\b\u0004\u0000"+
		"\u04a0\u049f\u0001\u0000\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000\u0000"+
		"\u04a1\u04a3\u0001\u0000\u0000\u0000\u04a2\u049e\u0001\u0000\u0000\u0000"+
		"\u04a2\u04a3\u0001\u0000\u0000\u0000\u04a3\u04aa\u0001\u0000\u0000\u0000"+
		"\u04a4\u04a6\u00034\u001a\u0000\u04a5\u04a7\u0003\b\u0004\u0000\u04a6"+
		"\u04a5\u0001\u0000\u0000\u0000\u04a6\u04a7\u0001\u0000\u0000\u0000\u04a7"+
		"\u04aa\u0001\u0000\u0000\u0000\u04a8\u04aa\u0003\b\u0004\u0000\u04a9\u049d"+
		"\u0001\u0000\u0000\u0000\u04a9\u04a4\u0001\u0000\u0000\u0000\u04a9\u04a8"+
		"\u0001\u0000\u0000\u0000\u04aa\u0007\u0001\u0000\u0000\u0000\u04ab\u04ae"+
		"\u0003.\u0017\u0000\u04ac\u04ae\u00030\u0018\u0000\u04ad\u04ab\u0001\u0000"+
		"\u0000\u0000\u04ad\u04ac\u0001\u0000\u0000\u0000\u04ae\t\u0001\u0000\u0000"+
		"\u0000\u04af\u04b0\u0005\u00bc\u0000\u0000\u04b0\u04b5\u0005\u00be\u0000"+
		"\u0000\u04b1\u04b6\u0003\f\u0006\u0000\u04b2\u04b6\u0003\u000e\u0007\u0000"+
		"\u04b3\u04b6\u0003\u0010\b\u0000\u04b4\u04b6\u0003\u0014\n\u0000\u04b5"+
		"\u04b1\u0001\u0000\u0000\u0000\u04b5\u04b2\u0001\u0000\u0000\u0000\u04b5"+
		"\u04b3\u0001\u0000\u0000\u0000\u04b5\u04b4\u0001\u0000\u0000\u0000\u04b6"+
		"\u000b\u0001\u0000\u0000\u0000\u04b7\u04b8\u0005\u00b9\u0000\u0000\u04b8"+
		"\u04b9\u0003\u0218\u010c\u0000\u04b9\r\u0001\u0000\u0000\u0000\u04ba\u04bc"+
		"\u0005\u0131\u0000\u0000\u04bb\u04ba\u0001\u0000\u0000\u0000\u04bb\u04bc"+
		"\u0001\u0000\u0000\u0000\u04bc\u04bd\u0001\u0000\u0000\u0000\u04bd\u04be"+
		"\u0005\u0121\u0000\u0000\u04be\u04bf\u0003X,\u0000\u04bf\u000f\u0001\u0000"+
		"\u0000\u0000\u04c0\u04c1\u0005\u00cf\u0000\u0000\u04c1\u04c2\u0005\u0144"+
		"\u0000\u0000\u04c2\u04c3\u0003\u0012\t\u0000\u04c3\u0011\u0001\u0000\u0000"+
		"\u0000\u04c4\u04c5\u0003\u045a\u022d\u0000\u04c5\u0013\u0001\u0000\u0000"+
		"\u0000\u04c6\u04ca\u0003\u0016\u000b\u0000\u04c7\u04ca\u0003\u0018\f\u0000"+
		"\u04c8\u04ca\u0003\u001a\r\u0000\u04c9\u04c6\u0001\u0000\u0000\u0000\u04c9"+
		"\u04c7\u0001\u0000\u0000\u0000\u04c9\u04c8\u0001\u0000\u0000\u0000\u04ca"+
		"\u0015\u0001\u0000\u0000\u0000\u04cb\u04cd\u0005\u0131\u0000\u0000\u04cc"+
		"\u04cb\u0001\u0000\u0000\u0000\u04cc\u04cd\u0001\u0000\u0000\u0000\u04cd"+
		"\u04ce\u0001\u0000\u0000\u0000\u04ce\u04cf\u0005\u0121\u0000\u0000\u04cf"+
		"\u04d0\u0003\u001c\u000e\u0000\u04d0\u04d1\u0003H$\u0000\u04d1\u0017\u0001"+
		"\u0000\u0000\u0000\u04d2\u04d4\u0005\u0116\u0000\u0000\u04d3\u04d2\u0001"+
		"\u0000\u0000\u0000\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04d5\u0001"+
		"\u0000\u0000\u0000\u04d5\u04d6\u0005\u0139\u0000\u0000\u04d6\u04d7\u0003"+
		"\u001c\u000e\u0000\u04d7\u04d8\u0003N\'\u0000\u04d8\u0019\u0001\u0000"+
		"\u0000\u0000\u04d9\u04da\u0005\u00e1\u0000\u0000\u04da\u04db\u0003\u001c"+
		"\u000e\u0000\u04db\u04dc\u0003T*\u0000\u04dc\u001b\u0001\u0000\u0000\u0000"+
		"\u04dd\u04de\u0005l\u0000\u0000\u04de\u04df\u0005\u0098\u0000\u0000\u04df"+
		"\u04e1\u0005Y\u0000\u0000\u04e0\u04dd\u0001\u0000\u0000\u0000\u04e0\u04e1"+
		"\u0001\u0000\u0000\u0000\u04e1\u04e2\u0001\u0000\u0000\u0000\u04e2\u04e3"+
		"\u0003$\u0012\u0000\u04e3\u001d\u0001\u0000\u0000\u0000\u04e4\u04e5\u0005"+
		"\u00bc\u0000\u0000\u04e5\u04e7\u0005\u00b3\u0000\u0000\u04e6\u04e8\u0003"+
		" \u0010\u0000\u04e7\u04e6\u0001\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000"+
		"\u0000\u0000\u04e8\u001f\u0001\u0000\u0000\u0000\u04e9\u04eb\u0005\u0016"+
		"\u0000\u0000\u04ea\u04e9\u0001\u0000\u0000\u0000\u04ea\u04eb\u0001\u0000"+
		"\u0000\u0000\u04eb\u04ec\u0001\u0000\u0000\u0000\u04ec\u04f9\u0007\u0000"+
		"\u0000\u0000\u04ed\u04f9\u0005\u00b9\u0000\u0000\u04ee\u04f0\u0005\u0131"+
		"\u0000\u0000\u04ef\u04ee\u0001\u0000\u0000\u0000\u04ef\u04f0\u0001\u0000"+
		"\u0000\u0000\u04f0\u04f1\u0001\u0000\u0000\u0000\u04f1\u04f9\u0005\u0121"+
		"\u0000\u0000\u04f2\u04f3\u0005\u00cf\u0000\u0000\u04f3\u04f9\u0005\u0144"+
		"\u0000\u0000\u04f4\u04f6\u0005\u00a4\u0000\u0000\u04f5\u04f4\u0001\u0000"+
		"\u0000\u0000\u04f5\u04f6\u0001\u0000\u0000\u0000\u04f6\u04f7\u0001\u0000"+
		"\u0000\u0000\u04f7\u04f9\u0003$\u0012\u0000\u04f8\u04ea\u0001\u0000\u0000"+
		"\u0000\u04f8\u04ed\u0001\u0000\u0000\u0000\u04f8\u04ef\u0001\u0000\u0000"+
		"\u0000\u04f8\u04f2\u0001\u0000\u0000\u0000\u04f8\u04f5\u0001\u0000\u0000"+
		"\u0000\u04f9!\u0001\u0000\u0000\u0000\u04fa\u04fb\u0005\u00bc\u0000\u0000"+
		"\u04fb\u04fc\u00056\u0000\u0000\u04fc#\u0001\u0000\u0000\u0000\u04fd\u04fe"+
		"\u0005\u0147\u0000\u0000\u04fe%\u0001\u0000\u0000\u0000\u04ff\u0500\u0005"+
		"\u00c7\u0000\u0000\u0500\u0502\u0005\u013d\u0000\u0000\u0501\u0503\u0003"+
		"(\u0014\u0000\u0502\u0501\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000"+
		"\u0000\u0000\u0503\'\u0001\u0000\u0000\u0000\u0504\u0509\u0003*\u0015"+
		"\u0000\u0505\u0506\u0005\u0169\u0000\u0000\u0506\u0508\u0003*\u0015\u0000"+
		"\u0507\u0505\u0001\u0000\u0000\u0000\u0508\u050b\u0001\u0000\u0000\u0000"+
		"\u0509\u0507\u0001\u0000\u0000\u0000\u0509\u050a\u0001\u0000\u0000\u0000"+
		"\u050a)\u0001\u0000\u0000\u0000\u050b\u0509\u0001\u0000\u0000\u0000\u050c"+
		"\u050d\u0003,\u0016\u0000\u050d+\u0001\u0000\u0000\u0000\u050e\u050f\u0005"+
		"\u0132\u0000\u0000\u050f\u0513\u0005\u012f\u0000\u0000\u0510\u0511\u0005"+
		"\u0132\u0000\u0000\u0511\u0513\u0005\u0143\u0000\u0000\u0512\u050e\u0001"+
		"\u0000\u0000\u0000\u0512\u0510\u0001\u0000\u0000\u0000\u0513-\u0001\u0000"+
		"\u0000\u0000\u0514\u0515\u0005\u00b6\u0000\u0000\u0515/\u0001\u0000\u0000"+
		"\u0000\u0516\u0517\u00059\u0000\u0000\u05171\u0001\u0000\u0000\u0000\u0518"+
		"\u0519\u0005\u0171\u0000\u0000\u0519\u051a\u00034\u001a\u0000\u051a\u051b"+
		"\u0005\u017c\u0000\u0000\u051b3\u0001\u0000\u0000\u0000\u051c\u051d\u0003"+
		":\u001d\u0000\u051d5\u0001\u0000\u0000\u0000\u051e\u051f\u0005\u0171\u0000"+
		"\u0000\u051f\u0520\u0003:\u001d\u0000\u0520\u0521\u0005\u017c\u0000\u0000"+
		"\u05217\u0001\u0000\u0000\u0000\u0522\u0523\u0005\u0171\u0000\u0000\u0523"+
		"\u0524\u0003:\u001d\u0000\u0524\u0525\u0005\u017c\u0000\u0000\u05259\u0001"+
		"\u0000\u0000\u0000\u0526\u0528\u0003\u0120\u0090\u0000\u0527\u0526\u0001"+
		"\u0000\u0000\u0000\u0527\u0528\u0001\u0000\u0000\u0000\u0528\u052a\u0001"+
		"\u0000\u0000\u0000\u0529\u052b\u0003<\u001e\u0000\u052a\u0529\u0001\u0000"+
		"\u0000\u0000\u052a\u052b\u0001\u0000\u0000\u0000\u052b\u052c\u0001\u0000"+
		"\u0000\u0000\u052c\u052d\u0003@ \u0000\u052d;\u0001\u0000\u0000\u0000"+
		"\u052e\u0530\u0003>\u001f\u0000\u052f\u052e\u0001\u0000\u0000\u0000\u0530"+
		"\u0531\u0001\u0000\u0000\u0000\u0531\u052f\u0001\u0000\u0000\u0000\u0531"+
		"\u0532\u0001\u0000\u0000\u0000\u0532=\u0001\u0000\u0000\u0000\u0533\u0537"+
		"\u0003F#\u0000\u0534\u0537\u0003L&\u0000\u0535\u0537\u0003R)\u0000\u0536"+
		"\u0533\u0001\u0000\u0000\u0000\u0536\u0534\u0001\u0000\u0000\u0000\u0536"+
		"\u0535\u0001\u0000\u0000\u0000\u0537?\u0001\u0000\u0000\u0000\u0538\u053c"+
		"\u0003B!\u0000\u0539\u053b\u0003D\"\u0000\u053a\u0539\u0001\u0000\u0000"+
		"\u0000\u053b\u053e\u0001\u0000\u0000\u0000\u053c\u053a\u0001\u0000\u0000"+
		"\u0000\u053c\u053d\u0001\u0000\u0000\u0000\u053dA\u0001\u0000\u0000\u0000"+
		"\u053e\u053c\u0001\u0000\u0000\u0000\u053f\u0543\u0003b1\u0000\u0540\u0543"+
		"\u0003\u0082A\u0000\u0541\u0543\u0003\u00b4Z\u0000\u0542\u053f\u0001\u0000"+
		"\u0000\u0000\u0542\u0540\u0001\u0000\u0000\u0000\u0542\u0541\u0001\u0000"+
		"\u0000\u0000\u0543C\u0001\u0000\u0000\u0000\u0544\u0546\u0005\u0095\u0000"+
		"\u0000\u0545\u0547\u0003\u01f4\u00fa\u0000\u0546\u0545\u0001\u0000\u0000"+
		"\u0000\u0546\u0547\u0001\u0000\u0000\u0000\u0547\u0548\u0001\u0000\u0000"+
		"\u0000\u0548\u0549\u0003B!\u0000\u0549E\u0001\u0000\u0000\u0000\u054a"+
		"\u054c\u0005\u0131\u0000\u0000\u054b\u054a\u0001\u0000\u0000\u0000\u054b"+
		"\u054c\u0001\u0000\u0000\u0000\u054c\u054d\u0001\u0000\u0000\u0000\u054d"+
		"\u054e\u0005\u0121\u0000\u0000\u054e\u054f\u0003\u0444\u0222\u0000\u054f"+
		"\u0550\u0003H$\u0000\u0550G\u0001\u0000\u0000\u0000\u0551\u0553\u0003"+
		"\u02a2\u0151\u0000\u0552\u0551\u0001\u0000\u0000\u0000\u0552\u0553\u0001"+
		"\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000\u0000\u0554\u0556\u0003"+
		"\u02e0\u0170\u0000\u0555\u0552\u0001\u0000\u0000\u0000\u0555\u0556\u0001"+
		"\u0000\u0000\u0000\u0556\u0557\u0001\u0000\u0000\u0000\u0557\u0558\u0003"+
		"J%\u0000\u0558I\u0001\u0000\u0000\u0000\u0559\u055a\u0005\u016d\u0000"+
		"\u0000\u055a\u055b\u0003X,\u0000\u055bK\u0001\u0000\u0000\u0000\u055c"+
		"\u055e\u0005\u0116\u0000\u0000\u055d\u055c\u0001\u0000\u0000\u0000\u055d"+
		"\u055e\u0001\u0000\u0000\u0000\u055e\u055f\u0001\u0000\u0000\u0000\u055f"+
		"\u0560\u0005\u0139\u0000\u0000\u0560\u0561\u0003\u0444\u0222\u0000\u0561"+
		"\u0562\u0003N\'\u0000\u0562M\u0001\u0000\u0000\u0000\u0563\u0565\u0003"+
		"\u02a2\u0151\u0000\u0564\u0563\u0001\u0000\u0000\u0000\u0564\u0565\u0001"+
		"\u0000\u0000\u0000\u0565\u0566\u0001\u0000\u0000\u0000\u0566\u0568\u0003"+
		"\u02e6\u0173\u0000\u0567\u0564\u0001\u0000\u0000\u0000\u0567\u0568\u0001"+
		"\u0000\u0000\u0000\u0568\u0569\u0001\u0000\u0000\u0000\u0569\u056a\u0003"+
		"P(\u0000\u056aO\u0001\u0000\u0000\u0000\u056b\u056c\u0005\u016d\u0000"+
		"\u0000\u056c\u056d\u0003\\.\u0000\u056dQ\u0001\u0000\u0000\u0000\u056e"+
		"\u056f\u0005\u00e1\u0000\u0000\u056f\u0570\u0003\u0444\u0222\u0000\u0570"+
		"\u0571\u0003T*\u0000\u0571S\u0001\u0000\u0000\u0000\u0572\u0574\u0003"+
		"\u02a2\u0151\u0000\u0573\u0572\u0001\u0000\u0000\u0000\u0573\u0574\u0001"+
		"\u0000\u0000\u0000\u0574\u0575\u0001\u0000\u0000\u0000\u0575\u0577\u0003"+
		"\u02a0\u0150\u0000\u0576\u0573\u0001\u0000\u0000\u0000\u0576\u0577\u0001"+
		"\u0000\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578\u0579\u0003"+
		"V+\u0000\u0579U\u0001\u0000\u0000\u0000\u057a\u057b\u0005\u016d\u0000"+
		"\u0000\u057b\u057c\u0003\u0332\u0199\u0000\u057cW\u0001\u0000\u0000\u0000"+
		"\u057d\u0582\u0003`0\u0000\u057e\u0582\u0003\u0228\u0114\u0000\u057f\u0582"+
		"\u0003\u0422\u0211\u0000\u0580\u0582\u0003Z-\u0000\u0581\u057d\u0001\u0000"+
		"\u0000\u0000\u0581\u057e\u0001\u0000\u0000\u0000\u0581\u057f\u0001\u0000"+
		"\u0000\u0000\u0581\u0580\u0001\u0000\u0000\u0000\u0582Y\u0001\u0000\u0000"+
		"\u0000\u0583\u0584\u0007\u0001\u0000\u0000\u0584[\u0001\u0000\u0000\u0000"+
		"\u0585\u058a\u0003^/\u0000\u0586\u058a\u0003`0\u0000\u0587\u058a\u0003"+
		"\u0232\u0119\u0000\u0588\u058a\u0003\u0422\u0211\u0000\u0589\u0585\u0001"+
		"\u0000\u0000\u0000\u0589\u0586\u0001\u0000\u0000\u0000\u0589\u0587\u0001"+
		"\u0000\u0000\u0000\u0589\u0588\u0001\u0000\u0000\u0000\u058a]\u0001\u0000"+
		"\u0000\u0000\u058b\u058c\u00038\u001c\u0000\u058c_\u0001\u0000\u0000\u0000"+
		"\u058d\u058e\u0005\u00e4\u0000\u0000\u058e\u0592\u0003\u034a\u01a5\u0000"+
		"\u058f\u0592\u0003\u034c\u01a6\u0000\u0590\u0592\u0003\u0350\u01a8\u0000"+
		"\u0591\u058d\u0001\u0000\u0000\u0000\u0591\u058f\u0001\u0000\u0000\u0000"+
		"\u0591\u0590\u0001\u0000\u0000\u0000\u0592a\u0001\u0000\u0000\u0000\u0593"+
		"\u0595\u0003d2\u0000\u0594\u0593\u0001\u0000\u0000\u0000\u0595\u0596\u0001"+
		"\u0000\u0000\u0000\u0596\u0594\u0001\u0000\u0000\u0000\u0596\u0597\u0001"+
		"\u0000\u0000\u0000\u0597c\u0001\u0000\u0000\u0000\u0598\u059b\u0003f3"+
		"\u0000\u0599\u059b\u0003\u0080@\u0000\u059a\u0598\u0001\u0000\u0000\u0000"+
		"\u059a\u0599\u0001\u0000\u0000\u0000\u059be\u0001\u0000\u0000\u0000\u059c"+
		"\u05a3\u0003h4\u0000\u059d\u05a3\u0003j5\u0000\u059e\u05a3\u0003l6\u0000"+
		"\u059f\u05a3\u0003v;\u0000\u05a0\u05a3\u0003x<\u0000\u05a1\u05a3\u0003"+
		"~?\u0000\u05a2\u059c\u0001\u0000\u0000\u0000\u05a2\u059d\u0001\u0000\u0000"+
		"\u0000\u05a2\u059e\u0001\u0000\u0000\u0000\u05a2\u059f\u0001\u0000\u0000"+
		"\u0000\u05a2\u05a0\u0001\u0000\u0000\u0000\u05a2\u05a1\u0001\u0000\u0000"+
		"\u0000\u05a3g\u0001\u0000\u0000\u0000\u05a4\u05a5\u0005?\u0000\u0000\u05a5"+
		"\u05a9\u0005\u00b9\u0000\u0000\u05a6\u05a7\u0005l\u0000\u0000\u05a7\u05a8"+
		"\u0005\u0098\u0000\u0000\u05a8\u05aa\u0005Y\u0000\u0000\u05a9\u05a6\u0001"+
		"\u0000\u0000\u0000\u05a9\u05aa\u0001\u0000\u0000\u0000\u05aa\u05ab\u0001"+
		"\u0000\u0000\u0000\u05ab\u05ac\u0003\u021c\u010e\u0000\u05aci\u0001\u0000"+
		"\u0000\u0000\u05ad\u05ae\u0005R\u0000\u0000\u05ae\u05b1\u0005\u00b9\u0000"+
		"\u0000\u05af\u05b0\u0005l\u0000\u0000\u05b0\u05b2\u0005Y\u0000\u0000\u05b1"+
		"\u05af\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001\u0000\u0000\u0000\u05b2"+
		"\u05b3\u0001\u0000\u0000\u0000\u05b3\u05b4\u0003\u021c\u010e\u0000\u05b4"+
		"k\u0001\u0000\u0000\u0000\u05b5\u05c5\u0005?\u0000\u0000\u05b6\u05b8\u0005"+
		"\u0131\u0000\u0000\u05b7\u05b6\u0001\u0000\u0000\u0000\u05b7\u05b8\u0001"+
		"\u0000\u0000\u0000\u05b8\u05b9\u0001\u0000\u0000\u0000\u05b9\u05bd\u0005"+
		"\u0121\u0000\u0000\u05ba\u05bb\u0005l\u0000\u0000\u05bb\u05bc\u0005\u0098"+
		"\u0000\u0000\u05bc\u05be\u0005Y\u0000\u0000\u05bd\u05ba\u0001\u0000\u0000"+
		"\u0000\u05bd\u05be\u0001\u0000\u0000\u0000\u05be\u05c6\u0001\u0000\u0000"+
		"\u0000\u05bf\u05c0\u0005\u00a1\u0000\u0000\u05c0\u05c2\u0005\u00b2\u0000"+
		"\u0000\u05c1\u05c3\u0005\u0131\u0000\u0000\u05c2\u05c1\u0001\u0000\u0000"+
		"\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c4\u0001\u0000\u0000"+
		"\u0000\u05c4\u05c6\u0005\u0121\u0000\u0000\u05c5\u05b7\u0001\u0000\u0000"+
		"\u0000\u05c5\u05bf\u0001\u0000\u0000\u0000\u05c6\u05c7\u0001\u0000\u0000"+
		"\u0000\u05c7\u05ca\u0003\u022a\u0115\u0000\u05c8\u05cb\u0003n7\u0000\u05c9"+
		"\u05cb\u0003p8\u0000\u05ca\u05c8\u0001\u0000\u0000\u0000\u05ca\u05c9\u0001"+
		"\u0000\u0000\u0000\u05cb\u05cd\u0001\u0000\u0000\u0000\u05cc\u05ce\u0003"+
		"t:\u0000\u05cd\u05cc\u0001\u0000\u0000\u0000\u05cd\u05ce\u0001\u0000\u0000"+
		"\u0000\u05cem\u0001\u0000\u0000\u0000\u05cf\u05d1\u0003\u02a2\u0151\u0000"+
		"\u05d0\u05cf\u0001\u0000\u0000\u0000\u05d0\u05d1\u0001\u0000\u0000\u0000"+
		"\u05d1\u05d2\u0001\u0000\u0000\u0000\u05d2\u05d7\u0005\u0019\u0000\u0000"+
		"\u05d3\u05d5\u0005\u0131\u0000\u0000\u05d4\u05d3\u0001\u0000\u0000\u0000"+
		"\u05d4\u05d5\u0001\u0000\u0000\u0000\u05d5\u05d6\u0001\u0000\u0000\u0000"+
		"\u05d6\u05d8\u0005\u0121\u0000\u0000\u05d7\u05d4\u0001\u0000\u0000\u0000"+
		"\u05d7\u05d8\u0001\u0000\u0000\u0000\u05d8o\u0001\u0000\u0000\u0000\u05d9"+
		"\u05e9\u0003r9\u0000\u05da\u05dc\u0003\u02a2\u0151\u0000\u05db\u05da\u0001"+
		"\u0000\u0000\u0000\u05db\u05dc\u0001\u0000\u0000\u0000\u05dc\u05dd\u0001"+
		"\u0000\u0000\u0000\u05dd\u05e9\u0003\u022e\u0117\u0000\u05de\u05e0\u0003"+
		"\u02a2\u0151\u0000\u05df\u05de\u0001\u0000\u0000\u0000\u05df\u05e0\u0001"+
		"\u0000\u0000\u0000\u05e0\u05e5\u0001\u0000\u0000\u0000\u05e1\u05e3\u0005"+
		"\u0131\u0000\u0000\u05e2\u05e1\u0001\u0000\u0000\u0000\u05e2\u05e3\u0001"+
		"\u0000\u0000\u0000\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4\u05e6\u0005"+
		"\u0121\u0000\u0000\u05e5\u05e2\u0001\u0000\u0000\u0000\u05e5\u05e6\u0001"+
		"\u0000\u0000\u0000\u05e6\u05e7\u0001\u0000\u0000\u0000\u05e7\u05e9\u0003"+
		"\u023c\u011e\u0000\u05e8\u05d9\u0001\u0000\u0000\u0000\u05e8\u05db\u0001"+
		"\u0000\u0000\u0000\u05e8\u05df\u0001\u0000\u0000\u0000\u05e9q\u0001\u0000"+
		"\u0000\u0000\u05ea\u05eb\u0005\u0083\u0000\u0000\u05eb\u05ec\u0003X,\u0000"+
		"\u05ecs\u0001\u0000\u0000\u0000\u05ed\u05ee\u0005\u001b\u0000\u0000\u05ee"+
		"\u05ef\u0005:\u0000\u0000\u05ef\u05f0\u0005\u009e\u0000\u0000\u05f0\u05f1"+
		"\u0003X,\u0000\u05f1u\u0001\u0000\u0000\u0000\u05f2\u05f4\u0005R\u0000"+
		"\u0000\u05f3\u05f5\u0005\u0131\u0000\u0000\u05f4\u05f3\u0001\u0000\u0000"+
		"\u0000\u05f4\u05f5\u0001\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000"+
		"\u0000\u05f6\u05f9\u0005\u0121\u0000\u0000\u05f7\u05f8\u0005l\u0000\u0000"+
		"\u05f8\u05fa\u0005Y\u0000\u0000\u05f9\u05f7\u0001\u0000\u0000\u0000\u05f9"+
		"\u05fa\u0001\u0000\u0000\u0000\u05fa\u05fb\u0001\u0000\u0000\u0000\u05fb"+
		"\u05fc\u0003\u022a\u0115\u0000\u05fcw\u0001\u0000\u0000\u0000\u05fd\u060f"+
		"\u0005?\u0000\u0000\u05fe\u0600\u0005\u0131\u0000\u0000\u05ff\u05fe\u0001"+
		"\u0000\u0000\u0000\u05ff\u0600\u0001\u0000\u0000\u0000\u0600\u0601\u0001"+
		"\u0000\u0000\u0000\u0601\u0602\u0005\u0121\u0000\u0000\u0602\u0606\u0005"+
		"\u013e\u0000\u0000\u0603\u0604\u0005l\u0000\u0000\u0604\u0605\u0005\u0098"+
		"\u0000\u0000\u0605\u0607\u0005Y\u0000\u0000\u0606\u0603\u0001\u0000\u0000"+
		"\u0000\u0606\u0607\u0001\u0000\u0000\u0000\u0607\u0610\u0001\u0000\u0000"+
		"\u0000\u0608\u0609\u0005\u00a1\u0000\u0000\u0609\u060b\u0005\u00b2\u0000"+
		"\u0000\u060a\u060c\u0005\u0131\u0000\u0000\u060b\u060a\u0001\u0000\u0000"+
		"\u0000\u060b\u060c\u0001\u0000\u0000\u0000\u060c\u060d\u0001\u0000\u0000"+
		"\u0000\u060d\u060e\u0005\u0121\u0000\u0000\u060e\u0610\u0005\u013e\u0000"+
		"\u0000\u060f\u05ff\u0001\u0000\u0000\u0000\u060f\u0608\u0001\u0000\u0000"+
		"\u0000\u0610\u0611\u0001\u0000\u0000\u0000\u0611\u0612\u0003\u0230\u0118"+
		"\u0000\u0612\u0613\u0003z=\u0000\u0613y\u0001\u0000\u0000\u0000\u0614"+
		"\u0616\u0005\u001b\u0000\u0000\u0615\u0614\u0001\u0000\u0000\u0000\u0615"+
		"\u0616\u0001\u0000\u0000\u0000\u0616\u0617\u0001\u0000\u0000\u0000\u0617"+
		"\u061e\u0003|>\u0000\u0618\u061e\u0003r9\u0000\u0619\u061b\u0005\u001b"+
		"\u0000\u0000\u061a\u0619\u0001\u0000\u0000\u0000\u061a\u061b\u0001\u0000"+
		"\u0000\u0000\u061b\u061c\u0001\u0000\u0000\u0000\u061c\u061e\u0003\u023c"+
		"\u011e\u0000\u061d\u0615\u0001\u0000\u0000\u0000\u061d\u0618\u0001\u0000"+
		"\u0000\u0000\u061d\u061a\u0001\u0000\u0000\u0000\u061e{\u0001\u0000\u0000"+
		"\u0000\u061f\u0620\u0005:\u0000\u0000\u0620\u0621\u0005\u009e\u0000\u0000"+
		"\u0621\u0622\u0003\u022e\u0117\u0000\u0622}\u0001\u0000\u0000\u0000\u0623"+
		"\u0625\u0005R\u0000\u0000\u0624\u0626\u0005\u0131\u0000\u0000\u0625\u0624"+
		"\u0001\u0000\u0000\u0000\u0625\u0626\u0001\u0000\u0000\u0000\u0626\u0627"+
		"\u0001\u0000\u0000\u0000\u0627\u0628\u0005\u0121\u0000\u0000\u0628\u062b"+
		"\u0005\u013e\u0000\u0000\u0629\u062a\u0005l\u0000\u0000\u062a\u062c\u0005"+
		"Y\u0000\u0000\u062b\u0629\u0001\u0000\u0000\u0000\u062b\u062c\u0001\u0000"+
		"\u0000\u0000\u062c\u062d\u0001\u0000\u0000\u0000\u062d\u062e\u0003\u0230"+
		"\u0118\u0000\u062e\u007f\u0001\u0000\u0000\u0000\u062f\u0630\u0003\u0110"+
		"\u0088\u0000\u0630\u0081\u0001\u0000\u0000\u0000\u0631\u0634\u0003\u0084"+
		"B\u0000\u0632\u0634\u0003\u008aE\u0000\u0633\u0631\u0001\u0000\u0000\u0000"+
		"\u0633\u0632\u0001\u0000\u0000\u0000\u0634\u0083\u0001\u0000\u0000\u0000"+
		"\u0635\u0638\u0003\u0086C\u0000\u0636\u0638\u0003\u0088D\u0000\u0637\u0635"+
		"\u0001\u0000\u0000\u0000\u0637\u0636\u0001\u0000\u0000\u0000\u0638\u0085"+
		"\u0001\u0000\u0000\u0000\u0639\u063a\u0003\u0122\u0091\u0000\u063a\u063c"+
		"\u0003\u008eG\u0000\u063b\u063d\u0003\u00f2y\u0000\u063c\u063b\u0001\u0000"+
		"\u0000\u0000\u063c\u063d\u0001\u0000\u0000\u0000\u063d\u0087\u0001\u0000"+
		"\u0000\u0000\u063e\u063f\u0003\u0122\u0091\u0000\u063f\u0640\u00036\u001b"+
		"\u0000\u0640\u0089\u0001\u0000\u0000\u0000\u0641\u0644\u0003\u008cF\u0000"+
		"\u0642\u0644\u00036\u001b\u0000\u0643\u0641\u0001\u0000\u0000\u0000\u0643"+
		"\u0642\u0001\u0000\u0000\u0000\u0644\u008b\u0001\u0000\u0000\u0000\u0645"+
		"\u0647\u0003\u008eG\u0000\u0646\u0648\u0003\u00f2y\u0000\u0647\u0646\u0001"+
		"\u0000\u0000\u0000\u0647\u0648\u0001\u0000\u0000\u0000\u0648\u008d\u0001"+
		"\u0000\u0000\u0000\u0649\u064b\u0003\u00ceg\u0000\u064a\u0649\u0001\u0000"+
		"\u0000\u0000\u064b\u064e\u0001\u0000\u0000\u0000\u064c\u064a\u0001\u0000"+
		"\u0000\u0000\u064c\u064d\u0001\u0000\u0000\u0000\u064d\u0650\u0001\u0000"+
		"\u0000\u0000\u064e\u064c\u0001\u0000\u0000\u0000\u064f\u0651\u0003\u0090"+
		"H\u0000\u0650\u064f\u0001\u0000\u0000\u0000\u0651\u0652\u0001\u0000\u0000"+
		"\u0000\u0652\u0650\u0001\u0000\u0000\u0000\u0652\u0653\u0001\u0000\u0000"+
		"\u0000\u0653\u008f\u0001\u0000\u0000\u0000\u0654\u0657\u0003\u0092I\u0000"+
		"\u0655\u0657\u0003\u00b2Y\u0000\u0656\u0654\u0001\u0000\u0000\u0000\u0656"+
		"\u0655\u0001\u0000\u0000\u0000\u0657\u0091\u0001\u0000\u0000\u0000\u0658"+
		"\u065d\u0003\u0094J\u0000\u0659\u065d\u0003\u0096K\u0000\u065a\u065d\u0003"+
		"\u00a2Q\u0000\u065b\u065d\u0003\u00acV\u0000\u065c\u0658\u0001\u0000\u0000"+
		"\u0000\u065c\u0659\u0001\u0000\u0000\u0000\u065c\u065a\u0001\u0000\u0000"+
		"\u0000\u065c\u065b\u0001\u0000\u0000\u0000\u065d\u0093\u0001\u0000\u0000"+
		"\u0000\u065e\u065f\u0005n\u0000\u0000\u065f\u0660\u0003\u0142\u00a1\u0000"+
		"\u0660\u0095\u0001\u0000\u0000\u0000\u0661\u0662\u0005\u00be\u0000\u0000"+
		"\u0662\u0663\u0003\u0098L\u0000\u0663\u0097\u0001\u0000\u0000\u0000\u0664"+
		"\u0669\u0003\u009aM\u0000\u0665\u0666\u0005\u0169\u0000\u0000\u0666\u0668"+
		"\u0003\u009aM\u0000\u0667\u0665\u0001\u0000\u0000\u0000\u0668\u066b\u0001"+
		"\u0000\u0000\u0000\u0669\u0667\u0001\u0000\u0000\u0000\u0669\u066a\u0001"+
		"\u0000\u0000\u0000\u066a\u0099\u0001\u0000\u0000\u0000\u066b\u0669\u0001"+
		"\u0000\u0000\u0000\u066c\u0670\u0003\u009cN\u0000\u066d\u0670\u0003\u009e"+
		"O\u0000\u066e\u0670\u0003\u00a0P\u0000\u066f\u066c\u0001\u0000\u0000\u0000"+
		"\u066f\u066d\u0001\u0000\u0000\u0000\u066f\u066e\u0001\u0000\u0000\u0000"+
		"\u0670\u009b\u0001\u0000\u0000\u0000\u0671\u0672\u0003\u0390\u01c8\u0000"+
		"\u0672\u0673\u0005\u0177\u0000\u0000\u0673\u0674\u0003\u043a\u021d\u0000"+
		"\u0674\u0675\u0005\u016d\u0000\u0000\u0675\u0676\u0003\u0332\u0199\u0000"+
		"\u0676\u009d\u0001\u0000\u0000\u0000\u0677\u0678\u0003\u0390\u01c8\u0000"+
		"\u0678\u0679\u0005\u016d\u0000\u0000\u0679\u067b\u0005\u0171\u0000\u0000"+
		"\u067a\u067c\u0003\u018c\u00c6\u0000\u067b\u067a\u0001\u0000\u0000\u0000"+
		"\u067b\u067c\u0001\u0000\u0000\u0000\u067c\u067d\u0001\u0000\u0000\u0000"+
		"\u067d\u067e\u0005\u017c\u0000\u0000\u067e\u009f\u0001\u0000\u0000\u0000"+
		"\u067f\u0680\u0003\u0390\u01c8\u0000\u0680\u0681\u0003\u0184\u00c2\u0000"+
		"\u0681\u0682\u0003\u0438\u021c\u0000\u0682\u00a1\u0001\u0000\u0000\u0000"+
		"\u0683\u0684\u0005\u00b1\u0000\u0000\u0684\u0685\u0003\u00a4R\u0000\u0685"+
		"\u00a3\u0001\u0000\u0000\u0000\u0686\u068b\u0003\u00a6S\u0000\u0687\u0688"+
		"\u0005\u0169\u0000\u0000\u0688\u068a\u0003\u00a6S\u0000\u0689\u0687\u0001"+
		"\u0000\u0000\u0000\u068a\u068d\u0001\u0000\u0000\u0000\u068b\u0689\u0001"+
		"\u0000\u0000\u0000\u068b\u068c\u0001\u0000\u0000\u0000\u068c\u00a5\u0001"+
		"\u0000\u0000\u0000\u068d\u068b\u0001\u0000\u0000\u0000\u068e\u0691\u0003"+
		"\u00a8T\u0000\u068f\u0691\u0003\u00aaU\u0000\u0690\u068e\u0001\u0000\u0000"+
		"\u0000\u0690\u068f\u0001\u0000\u0000\u0000\u0691\u00a7\u0001\u0000\u0000"+
		"\u0000\u0692\u0693\u0003\u0390\u01c8\u0000\u0693\u0694\u0005\u0177\u0000"+
		"\u0000\u0694\u0695\u0003\u043a\u021d\u0000\u0695\u00a9\u0001\u0000\u0000"+
		"\u0000\u0696\u0697\u0003\u0390\u01c8\u0000\u0697\u0698\u0003\u0184\u00c2"+
		"\u0000\u0698\u0699\u0003\u0438\u021c\u0000\u0699\u00ab\u0001\u0000\u0000"+
		"\u0000\u069a\u069c\u0007\u0002\u0000\u0000\u069b\u069a\u0001\u0000\u0000"+
		"\u0000\u069b\u069c\u0001\u0000\u0000\u0000\u069c\u069d\u0001\u0000\u0000"+
		"\u0000\u069d\u069e\u0005L\u0000\u0000\u069e\u069f\u0003\u00aeW\u0000\u069f"+
		"\u00ad\u0001\u0000\u0000\u0000\u06a0\u06a5\u0003\u00b0X\u0000\u06a1\u06a2"+
		"\u0005\u0169\u0000\u0000\u06a2\u06a4\u0003\u00b0X\u0000\u06a3\u06a1\u0001"+
		"\u0000\u0000\u0000\u06a4\u06a7\u0001\u0000\u0000\u0000\u06a5\u06a3\u0001"+
		"\u0000\u0000\u0000\u06a5\u06a6\u0001\u0000\u0000\u0000\u06a6\u00af\u0001"+
		"\u0000\u0000\u0000\u06a7\u06a5\u0001\u0000\u0000\u0000\u06a8\u06a9\u0003"+
		"\u0332\u0199\u0000\u06a9\u00b1\u0001\u0000\u0000\u0000\u06aa\u06ab\u0003"+
		"\u0110\u0088\u0000\u06ab\u00b3\u0001\u0000\u0000\u0000\u06ac\u06ad\u0003"+
		"\u00b6[\u0000\u06ad\u00b5\u0001\u0000\u0000\u0000\u06ae\u06af\u0006[\uffff"+
		"\uffff\u0000\u06af\u06b0\u0003\u00bc^\u0000\u06b0\u06b7\u0001\u0000\u0000"+
		"\u0000\u06b1\u06b2\n\u0002\u0000\u0000\u06b2\u06b3\u0003\u00b8\\\u0000"+
		"\u06b3\u06b4\u0003\u00bc^\u0000\u06b4\u06b6\u0001\u0000\u0000\u0000\u06b5"+
		"\u06b1\u0001\u0000\u0000\u0000\u06b6\u06b9\u0001\u0000\u0000\u0000\u06b7"+
		"\u06b5\u0001\u0000\u0000\u0000\u06b7\u06b8\u0001\u0000\u0000\u0000\u06b8"+
		"\u00b7\u0001\u0000\u0000\u0000\u06b9\u06b7\u0001\u0000\u0000\u0000\u06ba"+
		"\u06bd\u0003\u00ba]\u0000\u06bb\u06bd\u0005\u00a3\u0000\u0000\u06bc\u06ba"+
		"\u0001\u0000\u0000\u0000\u06bc\u06bb\u0001\u0000\u0000\u0000\u06bd\u00b9"+
		"\u0001\u0000\u0000\u0000\u06be\u06c0\u0005\u00dc\u0000\u0000\u06bf\u06c1"+
		"\u0003\u0386\u01c3\u0000\u06c0\u06bf\u0001\u0000\u0000\u0000\u06c0\u06c1"+
		"\u0001\u0000\u0000\u0000\u06c1\u06cb\u0001\u0000\u0000\u0000\u06c2\u06c4"+
		"\u0005X\u0000\u0000\u06c3\u06c5\u0003\u0386\u01c3\u0000\u06c4\u06c3\u0001"+
		"\u0000\u0000\u0000\u06c4\u06c5\u0001\u0000\u0000\u0000\u06c5\u06cb\u0001"+
		"\u0000\u0000\u0000\u06c6\u06c8\u0005}\u0000\u0000\u06c7\u06c9\u0003\u0386"+
		"\u01c3\u0000\u06c8\u06c7\u0001\u0000\u0000\u0000\u06c8\u06c9\u0001\u0000"+
		"\u0000\u0000\u06c9\u06cb\u0001\u0000\u0000\u0000\u06ca\u06be\u0001\u0000"+
		"\u0000\u0000\u06ca\u06c2\u0001\u0000\u0000\u0000\u06ca\u06c6\u0001\u0000"+
		"\u0000\u0000\u06cb\u00bb\u0001\u0000\u0000\u0000\u06cc\u06cd\u0003\u00be"+
		"_\u0000\u06cd\u00bd\u0001\u0000\u0000\u0000\u06ce\u06d1\u0003\u00c0`\u0000"+
		"\u06cf\u06d1\u0003\u00cae\u0000\u06d0\u06ce\u0001\u0000\u0000\u0000\u06d0"+
		"\u06cf\u0001\u0000\u0000\u0000\u06d1\u00bf\u0001\u0000\u0000\u0000\u06d2"+
		"\u06d4\u0003\u00c2a\u0000\u06d3\u06d2\u0001\u0000\u0000\u0000\u06d4\u06d7"+
		"\u0001\u0000\u0000\u0000\u06d5\u06d3\u0001\u0000\u0000\u0000\u06d5\u06d6"+
		"\u0001\u0000\u0000\u0000\u06d6\u06d8\u0001\u0000\u0000\u0000\u06d7\u06d5"+
		"\u0001\u0000\u0000\u0000\u06d8\u06dd\u0003\u00c4b\u0000\u06d9\u06dd\u0003"+
		"\u00c6c\u0000\u06da\u06dd\u0003\u00c8d\u0000\u06db\u06dd\u0003\u00fe\u007f"+
		"\u0000\u06dc\u06d5\u0001\u0000\u0000\u0000\u06dc\u06d9\u0001\u0000\u0000"+
		"\u0000\u06dc\u06da\u0001\u0000\u0000\u0000\u06dc\u06db\u0001\u0000\u0000"+
		"\u0000\u06dd\u00c1\u0001\u0000\u0000\u0000\u06de\u06df\u0003\u0122\u0091"+
		"\u0000\u06df\u06e0\u0003\u00ccf\u0000\u06e0\u00c3\u0001\u0000\u0000\u0000"+
		"\u06e1\u06e2\u0003\u0122\u0091\u0000\u06e2\u06e3\u0003\u00ccf\u0000\u06e3"+
		"\u06e4\u0003\u00f2y\u0000\u06e4\u00c5\u0001\u0000\u0000\u0000\u06e5\u06e6"+
		"\u0003\u0122\u0091\u0000\u06e6\u06e7\u0003\u00f2y\u0000\u06e7\u00c7\u0001"+
		"\u0000\u0000\u0000\u06e8\u06e9\u0003\u0122\u0091\u0000\u06e9\u06ea\u0003"+
		"8\u001c\u0000\u06ea\u00c9\u0001\u0000\u0000\u0000\u06eb\u06ed\u0003\u00cc"+
		"f\u0000\u06ec\u06eb\u0001\u0000\u0000\u0000\u06ec\u06ed\u0001\u0000\u0000"+
		"\u0000\u06ed\u06ee\u0001\u0000\u0000\u0000\u06ee\u06f1\u0003\u00f2y\u0000"+
		"\u06ef\u06f1\u00038\u001c\u0000\u06f0\u06ec\u0001\u0000\u0000\u0000\u06f0"+
		"\u06ef\u0001\u0000\u0000\u0000\u06f1\u00cb\u0001\u0000\u0000\u0000\u06f2"+
		"\u06f4\u0003\u00ceg\u0000\u06f3\u06f2\u0001\u0000\u0000\u0000\u06f4\u06f5"+
		"\u0001\u0000\u0000\u0000\u06f5\u06f3\u0001\u0000\u0000\u0000\u06f5\u06f6"+
		"\u0001\u0000\u0000\u0000\u06f6\u00cd\u0001\u0000\u0000\u0000\u06f7\u06fa"+
		"\u0003\u00d0h\u0000\u06f8\u06fa\u0003\u00dcn\u0000\u06f9\u06f7\u0001\u0000"+
		"\u0000\u0000\u06f9\u06f8\u0001\u0000\u0000\u0000\u06fa\u00cf\u0001\u0000"+
		"\u0000\u0000\u06fb\u0701\u0003\u00d2i\u0000\u06fc\u0701\u0003\u00e0p\u0000"+
		"\u06fd\u0701\u0003\u00e6s\u0000\u06fe\u0701\u0003\u00deo\u0000\u06ff\u0701"+
		"\u0003\u00f0x\u0000\u0700\u06fb\u0001\u0000\u0000\u0000\u0700\u06fc\u0001"+
		"\u0000\u0000\u0000\u0700\u06fd\u0001\u0000\u0000\u0000\u0700\u06fe\u0001"+
		"\u0000\u0000\u0000\u0700\u06ff\u0001\u0000\u0000\u0000\u0701\u00d1\u0001"+
		"\u0000\u0000\u0000\u0702\u0705\u0003\u00d4j\u0000\u0703\u0705\u0003\u00d6"+
		"k\u0000\u0704\u0702\u0001\u0000\u0000\u0000\u0704\u0703\u0001\u0000\u0000"+
		"\u0000\u0705\u00d3\u0001\u0000\u0000\u0000\u0706\u0707\u0005\u008f\u0000"+
		"\u0000\u0707\u0708\u0003\u0124\u0092\u0000\u0708\u00d5\u0001\u0000\u0000"+
		"\u0000\u0709\u070a\u0005\u00a0\u0000\u0000\u070a\u070b\u0003\u00d8l\u0000"+
		"\u070b\u00d7\u0001\u0000\u0000\u0000\u070c\u0716\u0003\u00d4j\u0000\u070d"+
		"\u070e\u0005\u0171\u0000\u0000\u070e\u070f\u0003\u00dam\u0000\u070f\u0710"+
		"\u0005\u017c\u0000\u0000\u0710\u0716\u0001\u0000\u0000\u0000\u0711\u0712"+
		"\u0005\u0173\u0000\u0000\u0712\u0713\u0003\u00dam\u0000\u0713\u0714\u0005"+
		"\u017e\u0000\u0000\u0714\u0716\u0001\u0000\u0000\u0000\u0715\u070c\u0001"+
		"\u0000\u0000\u0000\u0715\u070d\u0001\u0000\u0000\u0000\u0715\u0711\u0001"+
		"\u0000\u0000\u0000\u0716\u00d9\u0001\u0000\u0000\u0000\u0717\u0719\u0003"+
		"\u00d2i\u0000\u0718\u0717\u0001\u0000\u0000\u0000\u0719\u071a\u0001\u0000"+
		"\u0000\u0000\u071a\u0718\u0001\u0000\u0000\u0000\u071a\u071b\u0001\u0000"+
		"\u0000\u0000\u071b\u00db\u0001\u0000\u0000\u0000\u071c\u071d\u0003\u0110"+
		"\u0088\u0000\u071d\u00dd\u0001\u0000\u0000\u0000\u071e\u0721\u0005[\u0000"+
		"\u0000\u071f\u0722\u0003\u01f2\u00f9\u0000\u0720\u0722\u0003\u0304\u0182"+
		"\u0000\u0721\u071f\u0001\u0000\u0000\u0000\u0721\u0720\u0001\u0000\u0000"+
		"\u0000\u0722\u00df\u0001\u0000\u0000\u0000\u0723\u0724\u0005\u0082\u0000"+
		"\u0000\u0724\u0725\u0003\u00e2q\u0000\u0725\u00e1\u0001\u0000\u0000\u0000"+
		"\u0726\u072b\u0003\u00e4r\u0000\u0727\u0728\u0005\u0169\u0000\u0000\u0728"+
		"\u072a\u0003\u00e4r\u0000\u0729\u0727\u0001\u0000\u0000\u0000\u072a\u072d"+
		"\u0001\u0000\u0000\u0000\u072b\u0729\u0001\u0000\u0000\u0000\u072b\u072c"+
		"\u0001\u0000\u0000\u0000\u072c\u00e3\u0001\u0000\u0000\u0000\u072d\u072b"+
		"\u0001\u0000\u0000\u0000\u072e\u0734\u0003R)\u0000\u072f\u0730\u0003\u0444"+
		"\u0222\u0000\u0730\u0731\u0005\u016d\u0000\u0000\u0731\u0732\u0003\u0332"+
		"\u0199\u0000\u0732\u0734\u0001\u0000\u0000\u0000\u0733\u072e\u0001\u0000"+
		"\u0000\u0000\u0733\u072f\u0001\u0000\u0000\u0000\u0734\u00e5\u0001\u0000"+
		"\u0000\u0000\u0735\u0736\u0005d\u0000\u0000\u0736\u0738\u0003\u00e8t\u0000"+
		"\u0737\u0739\u0003\u00eew\u0000\u0738\u0737\u0001\u0000\u0000\u0000\u0738"+
		"\u0739\u0001\u0000\u0000\u0000\u0739\u00e7\u0001\u0000\u0000\u0000\u073a"+
		"\u073b\u0003\u00eau\u0000\u073b\u073c\u0003\u00ecv\u0000\u073c\u00e9\u0001"+
		"\u0000\u0000\u0000\u073d\u073e\u0003\u0444\u0222\u0000\u073e\u073f\u0005"+
		"m\u0000\u0000\u073f\u00eb\u0001\u0000\u0000\u0000\u0740\u0741\u0003\u0332"+
		"\u0199\u0000\u0741\u00ed\u0001\u0000\u0000\u0000\u0742\u0743\u0005\u00e7"+
		"\u0000\u0000\u0743\u0744\u0007\u0003\u0000\u0000\u0744\u0745\u0003\u0444"+
		"\u0222\u0000\u0745\u00ef\u0001\u0000\u0000\u0000\u0746\u0748\u0003\u0206"+
		"\u0103\u0000\u0747\u0749\u0003\u0214\u010a\u0000\u0748\u0747\u0001\u0000"+
		"\u0000\u0000\u0748\u0749\u0001\u0000\u0000\u0000\u0749\u074b\u0001\u0000"+
		"\u0000\u0000\u074a\u074c\u0003\u0212\u0109\u0000\u074b\u074a\u0001\u0000"+
		"\u0000\u0000\u074b\u074c\u0001\u0000\u0000\u0000\u074c\u0753\u0001\u0000"+
		"\u0000\u0000\u074d\u074f\u0003\u0214\u010a\u0000\u074e\u0750\u0003\u0212"+
		"\u0109\u0000\u074f\u074e\u0001\u0000\u0000\u0000\u074f\u0750\u0001\u0000"+
		"\u0000\u0000\u0750\u0753\u0001\u0000\u0000\u0000\u0751\u0753\u0003\u0212"+
		"\u0109\u0000\u0752\u0746\u0001\u0000\u0000\u0000\u0752\u074d\u0001\u0000"+
		"\u0000\u0000\u0752\u0751\u0001\u0000\u0000\u0000\u0753\u00f1\u0001\u0000"+
		"\u0000\u0000\u0754\u0756\u0003\u00f4z\u0000\u0755\u0757\u0003\u00f0x\u0000"+
		"\u0756\u0755\u0001\u0000\u0000\u0000\u0756\u0757\u0001\u0000\u0000\u0000"+
		"\u0757\u075a\u0001\u0000\u0000\u0000\u0758\u075a\u0005\\\u0000\u0000\u0759"+
		"\u0754\u0001\u0000\u0000\u0000\u0759\u0758\u0001\u0000\u0000\u0000\u075a"+
		"\u00f3\u0001\u0000\u0000\u0000\u075b\u075c\u0005\u00b4\u0000\u0000\u075c"+
		"\u075d\u0003\u00f6{\u0000\u075d\u00f5\u0001\u0000\u0000\u0000\u075e\u0760"+
		"\u0003\u0386\u01c3\u0000\u075f\u075e\u0001\u0000\u0000\u0000\u075f\u0760"+
		"\u0001\u0000\u0000\u0000\u0760\u0763\u0001\u0000\u0000\u0000\u0761\u0764"+
		"\u0005\u0167\u0000\u0000\u0762\u0764\u0003\u00f8|\u0000\u0763\u0761\u0001"+
		"\u0000\u0000\u0000\u0763\u0762\u0001\u0000\u0000\u0000\u0764\u0766\u0001"+
		"\u0000\u0000\u0000\u0765\u0767\u0003\u01fe\u00ff\u0000\u0766\u0765\u0001"+
		"\u0000\u0000\u0000\u0766\u0767\u0001\u0000\u0000\u0000\u0767\u076b\u0001"+
		"\u0000\u0000\u0000\u0768\u0769\u0005\u012c\u0000\u0000\u0769\u076b\u0005"+
		"\u0117\u0000\u0000\u076a\u075f\u0001\u0000\u0000\u0000\u076a\u0768\u0001"+
		"\u0000\u0000\u0000\u076b\u00f7\u0001\u0000\u0000\u0000\u076c\u0771\u0003"+
		"\u00fa}\u0000\u076d\u076e\u0005\u0169\u0000\u0000\u076e\u0770\u0003\u00fa"+
		"}\u0000\u076f\u076d\u0001\u0000\u0000\u0000\u0770\u0773\u0001\u0000\u0000"+
		"\u0000\u0771\u076f\u0001\u0000\u0000\u0000\u0771\u0772\u0001\u0000\u0000"+
		"\u0000\u0772\u00f9\u0001\u0000\u0000\u0000\u0773\u0771\u0001\u0000\u0000"+
		"\u0000\u0774\u0776\u0003\u0348\u01a4\u0000\u0775\u0777\u0003\u00fc~\u0000"+
		"\u0776\u0775\u0001\u0000\u0000\u0000\u0776\u0777\u0001\u0000\u0000\u0000"+
		"\u0777\u00fb\u0001\u0000\u0000\u0000\u0778\u0779\u0005\u001b\u0000\u0000"+
		"\u0779\u077a\u0003\u0456\u022b\u0000\u077a\u00fd\u0001\u0000\u0000\u0000"+
		"\u077b\u077d\u0005\u00bb\u0000\u0000\u077c\u077e\u0003\u0386\u01c3\u0000"+
		"\u077d\u077c\u0001\u0000\u0000\u0000\u077d\u077e\u0001\u0000\u0000\u0000"+
		"\u077e\u0781\u0001\u0000\u0000\u0000\u077f\u0782\u0005\u0167\u0000\u0000"+
		"\u0780\u0782\u0003\u0100\u0080\u0000\u0781\u077f\u0001\u0000\u0000\u0000"+
		"\u0781\u0780\u0001\u0000\u0000\u0000\u0782\u0796\u0001\u0000\u0000\u0000"+
		"\u0783\u0785\u0003\u0108\u0084\u0000\u0784\u0786\u0003\u01f2\u00f9\u0000"+
		"\u0785\u0784\u0001\u0000\u0000\u0000\u0785\u0786\u0001\u0000\u0000\u0000"+
		"\u0786\u0788\u0001\u0000\u0000\u0000\u0787\u0789\u0003\u01fe\u00ff\u0000"+
		"\u0788\u0787\u0001\u0000\u0000\u0000\u0788\u0789\u0001\u0000\u0000\u0000"+
		"\u0789\u078b\u0001\u0000\u0000\u0000\u078a\u078c\u0003\u0106\u0083\u0000"+
		"\u078b\u078a\u0001\u0000\u0000\u0000\u078b\u078c\u0001\u0000\u0000\u0000"+
		"\u078c\u078e\u0001\u0000\u0000\u0000\u078d\u078f\u0003\u0206\u0103\u0000"+
		"\u078e\u078d\u0001\u0000\u0000\u0000\u078e\u078f\u0001\u0000\u0000\u0000"+
		"\u078f\u0791\u0001\u0000\u0000\u0000\u0790\u0792\u0003\u0214\u010a\u0000"+
		"\u0791\u0790\u0001\u0000\u0000\u0000\u0791\u0792\u0001\u0000\u0000\u0000"+
		"\u0792\u0794\u0001\u0000\u0000\u0000\u0793\u0795\u0003\u0212\u0109\u0000"+
		"\u0794\u0793\u0001\u0000\u0000\u0000\u0794\u0795\u0001\u0000\u0000\u0000"+
		"\u0795\u0797\u0001\u0000\u0000\u0000\u0796\u0783\u0001\u0000\u0000\u0000"+
		"\u0796\u0797\u0001\u0000\u0000\u0000\u0797\u00ff\u0001\u0000\u0000\u0000"+
		"\u0798\u079d\u0003\u0102\u0081\u0000\u0799\u079a\u0005\u0169\u0000\u0000"+
		"\u079a\u079c\u0003\u0102\u0081\u0000\u079b\u0799\u0001\u0000\u0000\u0000"+
		"\u079c\u079f\u0001\u0000\u0000\u0000\u079d\u079b\u0001\u0000\u0000\u0000"+
		"\u079d\u079e\u0001\u0000\u0000\u0000\u079e\u0101\u0001\u0000\u0000\u0000"+
		"\u079f\u079d\u0001\u0000\u0000\u0000\u07a0\u07a2\u0003\u0348\u01a4\u0000"+
		"\u07a1\u07a3\u0003\u0104\u0082\u0000\u07a2\u07a1\u0001\u0000\u0000\u0000"+
		"\u07a2\u07a3\u0001\u0000\u0000\u0000\u07a3\u0103\u0001\u0000\u0000\u0000"+
		"\u07a4\u07a5\u0005\u001b\u0000\u0000\u07a5\u07a6\u0003\u0456\u022b\u0000"+
		"\u07a6\u0105\u0001\u0000\u0000\u0000\u07a7\u07a8\u0005g\u0000\u0000\u07a8"+
		"\u07a9\u0003\u0304\u0182\u0000\u07a9\u0107\u0001\u0000\u0000\u0000\u07aa"+
		"\u07ad\u0005e\u0000\u0000\u07ab\u07ae\u0003\u010a\u0085\u0000\u07ac\u07ae"+
		"\u0003\u010e\u0087\u0000\u07ad\u07ab\u0001\u0000\u0000\u0000\u07ad\u07ac"+
		"\u0001\u0000\u0000\u0000\u07ae\u0109\u0001\u0000\u0000\u0000\u07af\u07b4"+
		"\u0003\u010c\u0086\u0000\u07b0\u07b1\u0005\u0169\u0000\u0000\u07b1\u07b3"+
		"\u0003\u010c\u0086\u0000\u07b2\u07b0\u0001\u0000\u0000\u0000\u07b3\u07b6"+
		"\u0001\u0000\u0000\u0000\u07b4\u07b2\u0001\u0000\u0000\u0000\u07b4\u07b5"+
		"\u0001\u0000\u0000\u0000\u07b5\u010b\u0001\u0000\u0000\u0000\u07b6\u07b4"+
		"\u0001\u0000\u0000\u0000\u07b7\u07b8\u0003X,\u0000\u07b8\u07b9\u0003\u00d2"+
		"i\u0000\u07b9\u010d\u0001\u0000\u0000\u0000\u07ba\u07bf\u00038\u001c\u0000"+
		"\u07bb\u07bc\u0003X,\u0000\u07bc\u07bd\u00038\u001c\u0000\u07bd\u07bf"+
		"\u0001\u0000\u0000\u0000\u07be\u07ba\u0001\u0000\u0000\u0000\u07be\u07bb"+
		"\u0001\u0000\u0000\u0000\u07bf\u010f\u0001\u0000\u0000\u0000\u07c0\u07c2"+
		"\u0005\u00a0\u0000\u0000\u07c1\u07c0\u0001\u0000\u0000\u0000\u07c1\u07c2"+
		"\u0001\u0000\u0000\u0000\u07c2\u07c3\u0001\u0000\u0000\u0000\u07c3\u07c4"+
		"\u0005,\u0000\u0000\u07c4\u07c5\u0003\u0112\u0089\u0000\u07c5\u0111\u0001"+
		"\u0000\u0000\u0000\u07c6\u07c9\u0003\u0114\u008a\u0000\u07c7\u07c9\u0003"+
		"\u011a\u008d\u0000\u07c8\u07c6\u0001\u0000\u0000\u0000\u07c8\u07c7\u0001"+
		"\u0000\u0000\u0000\u07c9\u0113\u0001\u0000\u0000\u0000\u07ca\u07cc\u0003"+
		"\u0116\u008b\u0000\u07cb\u07ca\u0001\u0000\u0000\u0000\u07cb\u07cc\u0001"+
		"\u0000\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000\u0000\u07cd\u07ce\u0003"+
		"2\u0019\u0000\u07ce\u0115\u0001\u0000\u0000\u0000\u07cf\u07d1\u0005\u0173"+
		"\u0000\u0000\u07d0\u07d2\u0003\u0118\u008c\u0000\u07d1\u07d0\u0001\u0000"+
		"\u0000\u0000\u07d1\u07d2\u0001\u0000\u0000\u0000\u07d2\u07d3\u0001\u0000"+
		"\u0000\u0000\u07d3\u07d4\u0005\u017e\u0000\u0000\u07d4\u0117\u0001\u0000"+
		"\u0000\u0000\u07d5\u07da\u0003\u0390\u01c8\u0000\u07d6\u07d7\u0005\u0169"+
		"\u0000\u0000\u07d7\u07d9\u0003\u0390\u01c8\u0000\u07d8\u07d6\u0001\u0000"+
		"\u0000\u0000\u07d9\u07dc\u0001\u0000\u0000\u0000\u07da\u07d8\u0001\u0000"+
		"\u0000\u0000\u07da\u07db\u0001\u0000\u0000\u0000\u07db\u0119\u0001\u0000"+
		"\u0000\u0000\u07dc\u07da\u0001\u0000\u0000\u0000\u07dd\u07de\u0003\u0234"+
		"\u011a\u0000\u07de\u07e0\u0005\u0173\u0000\u0000\u07df\u07e1\u0003\u011c"+
		"\u008e\u0000\u07e0\u07df\u0001\u0000\u0000\u0000\u07e0\u07e1\u0001\u0000"+
		"\u0000\u0000\u07e1\u07e2\u0001\u0000\u0000\u0000\u07e2\u07e4\u0005\u017e"+
		"\u0000\u0000\u07e3\u07e5\u0003\u01f4\u00fa\u0000\u07e4\u07e3\u0001\u0000"+
		"\u0000\u0000\u07e4\u07e5\u0001\u0000\u0000\u0000\u07e5\u011b\u0001\u0000"+
		"\u0000\u0000\u07e6\u07eb\u0003\u011e\u008f\u0000\u07e7\u07e8\u0005\u0169"+
		"\u0000\u0000\u07e8\u07ea\u0003\u011e\u008f\u0000\u07e9\u07e7\u0001\u0000"+
		"\u0000\u0000\u07ea\u07ed\u0001\u0000\u0000\u0000\u07eb\u07e9\u0001\u0000"+
		"\u0000\u0000\u07eb\u07ec\u0001\u0000\u0000\u0000\u07ec\u011d\u0001\u0000"+
		"\u0000\u0000\u07ed\u07eb\u0001\u0000\u0000\u0000\u07ee\u07ef\u0003\u0332"+
		"\u0199\u0000\u07ef\u011f\u0001\u0000\u0000\u0000\u07f0\u07f1\u0005\u001f"+
		"\u0000\u0000\u07f1\u07f2\u0003\u0218\u010c\u0000\u07f2\u0121\u0001\u0000"+
		"\u0000\u0000\u07f3\u07f4\u0005\u00df\u0000\u0000\u07f4\u07f5\u0003X,\u0000"+
		"\u07f5\u0123\u0001\u0000\u0000\u0000\u07f6\u07f8\u0003\u012c\u0096\u0000"+
		"\u07f7\u07f9\u0003\u0126\u0093\u0000\u07f8\u07f7\u0001\u0000\u0000\u0000"+
		"\u07f8\u07f9\u0001\u0000\u0000\u0000\u07f9\u0125\u0001\u0000\u0000\u0000"+
		"\u07fa\u07fb\u0005\u00ea\u0000\u0000\u07fb\u07fc\u0003\u0128\u0094\u0000"+
		"\u07fc\u0127\u0001\u0000\u0000\u0000\u07fd\u0802\u0003\u012a\u0095\u0000"+
		"\u07fe\u07ff\u0005\u0169\u0000\u0000\u07ff\u0801\u0003\u012a\u0095\u0000"+
		"\u0800\u07fe\u0001\u0000\u0000\u0000\u0801\u0804\u0001\u0000\u0000\u0000"+
		"\u0802\u0800\u0001\u0000\u0000\u0000\u0802\u0803\u0001\u0000\u0000\u0000"+
		"\u0803\u0808\u0001\u0000\u0000\u0000\u0804\u0802\u0001\u0000\u0000\u0000"+
		"\u0805\u0806\u0005\u012c\u0000\u0000\u0806\u0808\u0005\u0117\u0000\u0000"+
		"\u0807\u07fd\u0001\u0000\u0000\u0000\u0807\u0805\u0001\u0000\u0000\u0000"+
		"\u0808\u0129\u0001\u0000\u0000\u0000\u0809\u080a\u0003\u0390\u01c8\u0000"+
		"\u080a\u012b\u0001\u0000\u0000\u0000\u080b\u080d\u0003\u012e\u0097\u0000"+
		"\u080c\u080b\u0001\u0000\u0000\u0000\u080c\u080d\u0001\u0000\u0000\u0000"+
		"\u080d\u080e\u0001\u0000\u0000\u0000\u080e\u0810\u0003\u0138\u009c\u0000"+
		"\u080f\u0811\u0003\u013e\u009f\u0000\u0810\u080f\u0001\u0000\u0000\u0000"+
		"\u0810\u0811\u0001\u0000\u0000\u0000\u0811\u0813\u0001\u0000\u0000\u0000"+
		"\u0812\u0814\u0003\u0140\u00a0\u0000\u0813\u0812\u0001\u0000\u0000\u0000"+
		"\u0813\u0814\u0001\u0000\u0000\u0000\u0814\u012d\u0001\u0000\u0000\u0000"+
		"\u0815\u0818\u0003\u0130\u0098\u0000\u0816\u0818\u0003\u0132\u0099\u0000"+
		"\u0817\u0815\u0001\u0000\u0000\u0000\u0817\u0816\u0001\u0000\u0000\u0000"+
		"\u0818\u012f\u0001\u0000\u0000\u0000\u0819\u081a\u0005\u0135\u0000\u0000"+
		"\u081a\u081b\u0003\u0134\u009a\u0000\u081b\u0131\u0001\u0000\u0000\u0000"+
		"\u081c\u081d\u0005\u011a\u0000\u0000\u081d\u081e\u0003\u0136\u009b\u0000"+
		"\u081e\u0133\u0001\u0000\u0000\u0000\u081f\u0821\u0005\u011e\u0000\u0000"+
		"\u0820\u0822\u0005\u0117\u0000\u0000\u0821\u0820\u0001\u0000\u0000\u0000"+
		"\u0821\u0822\u0001\u0000\u0000\u0000\u0822\u0825\u0001\u0000\u0000\u0000"+
		"\u0823\u0825\u0005\u011f\u0000\u0000\u0824\u081f\u0001\u0000\u0000\u0000"+
		"\u0824\u0823\u0001\u0000\u0000\u0000\u0825\u0135\u0001\u0000\u0000\u0000"+
		"\u0826\u0828\u0003\u0478\u023c\u0000\u0827\u0829\u0005\u0117\u0000\u0000"+
		"\u0828\u0827\u0001\u0000\u0000\u0000\u0828\u0829\u0001\u0000\u0000\u0000"+
		"\u0829\u082c\u0001\u0000\u0000\u0000\u082a\u082c\u0003\u0476\u023b\u0000"+
		"\u082b\u0826\u0001\u0000\u0000\u0000\u082b\u082a\u0001\u0000\u0000\u0000"+
		"\u082c\u0137\u0001\u0000\u0000\u0000\u082d\u0832\u0003\u013a\u009d\u0000"+
		"\u082e\u082f\u0005\u0169\u0000\u0000\u082f\u0831\u0003\u013a\u009d\u0000"+
		"\u0830\u082e\u0001\u0000\u0000\u0000\u0831\u0834\u0001\u0000\u0000\u0000"+
		"\u0832\u0830\u0001\u0000\u0000\u0000\u0832\u0833\u0001\u0000\u0000\u0000"+
		"\u0833\u0139\u0001\u0000\u0000\u0000\u0834\u0832\u0001\u0000\u0000\u0000"+
		"\u0835\u0837\u0003\u013c\u009e\u0000\u0836\u0835\u0001\u0000\u0000\u0000"+
		"\u0836\u0837\u0001\u0000\u0000\u0000\u0837\u0839\u0001\u0000\u0000\u0000"+
		"\u0838\u083a\u0003\u0156\u00ab\u0000\u0839\u0838\u0001\u0000\u0000\u0000"+
		"\u0839\u083a\u0001\u0000\u0000\u0000\u083a\u083b\u0001\u0000\u0000\u0000"+
		"\u083b\u083c\u0003\u0172\u00b9\u0000\u083c\u013b\u0001\u0000\u0000\u0000"+
		"\u083d\u083e\u0003\u0440\u0220\u0000\u083e\u083f\u0005\u016d\u0000\u0000"+
		"\u083f\u013d\u0001\u0000\u0000\u0000\u0840\u0841\u0005\u0123\u0000\u0000"+
		"\u0841\u0842\u0003\u0156\u00ab\u0000\u0842\u013f\u0001\u0000\u0000\u0000"+
		"\u0843\u0844\u0005\u00e6\u0000\u0000\u0844\u0845\u0003\u0304\u0182\u0000"+
		"\u0845\u0141\u0001\u0000\u0000\u0000\u0846\u0847\u0003\u0144\u00a2\u0000"+
		"\u0847\u0143\u0001\u0000\u0000\u0000\u0848\u084d\u0003\u0146\u00a3\u0000"+
		"\u0849\u084a\u0005\u0169\u0000\u0000\u084a\u084c\u0003\u0146\u00a3\u0000"+
		"\u084b\u0849\u0001\u0000\u0000\u0000\u084c\u084f\u0001\u0000\u0000\u0000"+
		"\u084d\u084b\u0001\u0000\u0000\u0000\u084d\u084e\u0001\u0000\u0000\u0000"+
		"\u084e\u0145\u0001\u0000\u0000\u0000\u084f\u084d\u0001\u0000\u0000\u0000"+
		"\u0850\u0856\u0003\u0148\u00a4\u0000\u0851\u0852\u0003\u014a\u00a5\u0000"+
		"\u0852\u0853\u0003\u0148\u00a4\u0000\u0853\u0855\u0001\u0000\u0000\u0000"+
		"\u0854\u0851\u0001\u0000\u0000\u0000\u0855\u0858\u0001\u0000\u0000\u0000"+
		"\u0856\u0854\u0001\u0000\u0000\u0000\u0856\u0857\u0001\u0000\u0000\u0000"+
		"\u0857\u0147\u0001\u0000\u0000\u0000\u0858\u0856\u0001\u0000\u0000\u0000"+
		"\u0859\u085b\u0005\u0173\u0000\u0000\u085a\u085c\u0003\u0152\u00a9\u0000"+
		"\u085b\u085a\u0001\u0000\u0000\u0000\u085b\u085c\u0001\u0000\u0000\u0000"+
		"\u085c\u085d\u0001\u0000\u0000\u0000\u085d\u085e\u0005\u017e\u0000\u0000"+
		"\u085e\u0149\u0001\u0000\u0000\u0000\u085f\u0863\u0003\u014c\u00a6\u0000"+
		"\u0860\u0863\u0003\u014e\u00a7\u0000\u0861\u0863\u0003\u0150\u00a8\u0000"+
		"\u0862\u085f\u0001\u0000\u0000\u0000\u0862\u0860\u0001\u0000\u0000\u0000"+
		"\u0862\u0861\u0001\u0000\u0000\u0000\u0863\u014b\u0001\u0000\u0000\u0000"+
		"\u0864\u0866\u0005\u0152\u0000\u0000\u0865\u0867\u0003\u0152\u00a9\u0000"+
		"\u0866\u0865\u0001\u0000\u0000\u0000\u0866\u0867\u0001\u0000\u0000\u0000"+
		"\u0867\u0868\u0001\u0000\u0000\u0000\u0868\u0869\u0005\u015c\u0000\u0000"+
		"\u0869\u014d\u0001\u0000\u0000\u0000\u086a\u086c\u0005\u0158\u0000\u0000"+
		"\u086b\u086d\u0003\u0152\u00a9\u0000\u086c\u086b\u0001\u0000\u0000\u0000"+
		"\u086c\u086d\u0001\u0000\u0000\u0000\u086d\u086e\u0001\u0000\u0000\u0000"+
		"\u086e\u086f\u0005\u0149\u0000\u0000\u086f\u014f\u0001\u0000\u0000\u0000"+
		"\u0870\u0872\u0005\u0163\u0000\u0000\u0871\u0873\u0003\u0152\u00a9\u0000"+
		"\u0872\u0871\u0001\u0000\u0000\u0000\u0872\u0873\u0001\u0000\u0000\u0000"+
		"\u0873\u0874\u0001\u0000\u0000\u0000\u0874\u0875\u0005\u015d\u0000\u0000"+
		"\u0875\u0151\u0001\u0000\u0000\u0000\u0876\u0878\u0003\u0180\u00c0\u0000"+
		"\u0877\u0879\u0003\u0154\u00aa\u0000\u0878\u0877\u0001\u0000\u0000\u0000"+
		"\u0878\u0879\u0001\u0000\u0000\u0000\u0879\u087f\u0001\u0000\u0000\u0000"+
		"\u087a\u087c\u0003\u0180\u00c0\u0000\u087b\u087a\u0001\u0000\u0000\u0000"+
		"\u087b\u087c\u0001\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000"+
		"\u087d\u087f\u0003\u0154\u00aa\u0000\u087e\u0876\u0001\u0000\u0000\u0000"+
		"\u087e\u087b\u0001\u0000\u0000\u0000\u087f\u0153\u0001\u0000\u0000\u0000"+
		"\u0880\u0881\u0003\u0184\u00c2\u0000\u0881\u0883\u0003\u0294\u014a\u0000"+
		"\u0882\u0884\u0003\u018a\u00c5\u0000\u0883\u0882\u0001\u0000\u0000\u0000"+
		"\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u088c\u0001\u0000\u0000\u0000"+
		"\u0885\u0886\u0003\u0184\u00c2\u0000\u0886\u0887\u0003\u0294\u014a\u0000"+
		"\u0887\u0889\u0001\u0000\u0000\u0000\u0888\u0885\u0001\u0000\u0000\u0000"+
		"\u0888\u0889\u0001\u0000\u0000\u0000\u0889\u088a\u0001\u0000\u0000\u0000"+
		"\u088a\u088c\u0003\u018a\u00c5\u0000\u088b\u0880\u0001\u0000\u0000\u0000"+
		"\u088b\u0888\u0001\u0000\u0000\u0000\u088c\u0155\u0001\u0000\u0000\u0000"+
		"\u088d\u0890\u0003\u0158\u00ac\u0000\u088e\u0890\u0003\u015c\u00ae\u0000"+
		"\u088f\u088d\u0001\u0000\u0000\u0000\u088f\u088e\u0001\u0000\u0000\u0000"+
		"\u0890\u0157\u0001\u0000\u0000\u0000\u0891\u0893\u0003\u015a\u00ad\u0000"+
		"\u0892\u0894\u0003\u0160\u00b0\u0000\u0893\u0892\u0001\u0000\u0000\u0000"+
		"\u0893\u0894\u0001\u0000\u0000\u0000\u0894\u0159\u0001\u0000\u0000\u0000"+
		"\u0895\u0896\u0007\u0004\u0000\u0000\u0896\u015b\u0001\u0000\u0000\u0000"+
		"\u0897\u089b\u0003\u015e\u00af\u0000\u0898\u089b\u0003\u0162\u00b1\u0000"+
		"\u0899\u089b\u0003\u0166\u00b3\u0000\u089a\u0897\u0001\u0000\u0000\u0000"+
		"\u089a\u0898\u0001\u0000\u0000\u0000\u089a\u0899\u0001\u0000\u0000\u0000"+
		"\u089b\u015d\u0001\u0000\u0000\u0000\u089c\u089e\u0005\u0016\u0000\u0000"+
		"\u089d\u089f\u0003\u015a\u00ad\u0000\u089e\u089d\u0001\u0000\u0000\u0000"+
		"\u089e\u089f\u0001\u0000\u0000\u0000\u089f\u08a1\u0001\u0000\u0000\u0000"+
		"\u08a0\u08a2\u0003\u0160\u00b0\u0000\u08a1\u08a0\u0001\u0000\u0000\u0000"+
		"\u08a1\u08a2\u0001\u0000\u0000\u0000\u08a2\u015f\u0001\u0000\u0000\u0000"+
		"\u08a3\u08a4\u0007\u0005\u0000\u0000\u08a4\u0161\u0001\u0000\u0000\u0000"+
		"\u08a5\u08a7\u0005\u0019\u0000\u0000\u08a6\u08a8\u0003\u0164\u00b2\u0000"+
		"\u08a7\u08a6\u0001\u0000\u0000\u0000\u08a7\u08a8\u0001\u0000\u0000\u0000"+
		"\u08a8\u08aa\u0001\u0000\u0000\u0000\u08a9\u08ab\u0003\u015a\u00ad\u0000"+
		"\u08aa\u08a9\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000"+
		"\u08ab\u08ad\u0001\u0000\u0000\u0000\u08ac\u08ae\u0003\u0160\u00b0\u0000"+
		"\u08ad";
	private static final String _serializedATNSegment1 =
		"\u08ac\u0001\u0000\u0000\u0000\u08ad\u08ae\u0001\u0000\u0000\u0000\u08ae"+
		"\u0163\u0001\u0000\u0000\u0000\u08af\u08b0\u0003\u0354\u01aa\u0000\u08b0"+
		"\u0165\u0001\u0000\u0000\u0000\u08b1\u08b6\u0003\u0168\u00b4\u0000\u08b2"+
		"\u08b6\u0003\u016a\u00b5\u0000\u08b3\u08b6\u0003\u016c\u00b6\u0000\u08b4"+
		"\u08b6\u0003\u016e\u00b7\u0000\u08b5\u08b1\u0001\u0000\u0000\u0000\u08b5"+
		"\u08b2\u0001\u0000\u0000\u0000\u08b5\u08b3\u0001\u0000\u0000\u0000\u08b5"+
		"\u08b4\u0001\u0000\u0000\u0000\u08b6\u0167\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b8\u0005\u0016\u0000\u0000\u08b8\u08ba\u0005\u0136\u0000\u0000\u08b9"+
		"\u08bb\u0003\u015a\u00ad\u0000\u08ba\u08b9\u0001\u0000\u0000\u0000\u08ba"+
		"\u08bb\u0001\u0000\u0000\u0000\u08bb\u08bd\u0001\u0000\u0000\u0000\u08bc"+
		"\u08be\u0003\u0160\u00b0\u0000\u08bd\u08bc\u0001\u0000\u0000\u0000\u08bd"+
		"\u08be\u0001\u0000\u0000\u0000\u08be\u0169\u0001\u0000\u0000\u0000\u08bf"+
		"\u08c0\u0005\u0019\u0000\u0000\u08c0\u08c2\u0005\u0136\u0000\u0000\u08c1"+
		"\u08c3\u0003\u015a\u00ad\u0000\u08c2\u08c1\u0001\u0000\u0000\u0000\u08c2"+
		"\u08c3\u0001\u0000\u0000\u0000\u08c3\u08c5\u0001\u0000\u0000\u0000\u08c4"+
		"\u08c6\u0003\u0160\u00b0\u0000\u08c5\u08c4\u0001\u0000\u0000\u0000\u08c5"+
		"\u08c6\u0001\u0000\u0000\u0000\u08c6\u016b\u0001\u0000\u0000\u0000\u08c7"+
		"\u08c8\u0005\u0136\u0000\u0000\u08c8\u08ca\u0003\u0164\u00b2\u0000\u08c9"+
		"\u08cb\u0003\u015a\u00ad\u0000\u08ca\u08c9\u0001\u0000\u0000\u0000\u08ca"+
		"\u08cb\u0001\u0000\u0000\u0000\u08cb\u08cd\u0001\u0000\u0000\u0000\u08cc"+
		"\u08ce\u0003\u0160\u00b0\u0000\u08cd\u08cc\u0001\u0000\u0000\u0000\u08cd"+
		"\u08ce\u0001\u0000\u0000\u0000\u08ce\u016d\u0001\u0000\u0000\u0000\u08cf"+
		"\u08d1\u0005\u0136\u0000\u0000\u08d0\u08d2\u0003\u0170\u00b8\u0000\u08d1"+
		"\u08d0\u0001\u0000\u0000\u0000\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2"+
		"\u08d4\u0001\u0000\u0000\u0000\u08d3\u08d5\u0003\u015a\u00ad\u0000\u08d4"+
		"\u08d3\u0001\u0000\u0000\u0000\u08d4\u08d5\u0001\u0000\u0000\u0000\u08d5"+
		"\u08d7\u0001\u0000\u0000\u0000\u08d6\u08d8\u0003\u0160\u00b0\u0000\u08d7"+
		"\u08d6\u0001\u0000\u0000\u0000\u08d7\u08d8\u0001\u0000\u0000\u0000\u08d8"+
		"\u08d9\u0001\u0000\u0000\u0000\u08d9\u08da\u0007\u0006\u0000\u0000\u08da"+
		"\u016f\u0001\u0000\u0000\u0000\u08db\u08dc\u0003\u0354\u01aa\u0000\u08dc"+
		"\u0171\u0001\u0000\u0000\u0000\u08dd\u08ed\u0003\u0174\u00ba\u0000\u08de"+
		"\u08e1\u0003\u0174\u00ba\u0000\u08df\u08e0\u0005\u0148\u0000\u0000\u08e0"+
		"\u08e2\u0003\u0174\u00ba\u0000\u08e1\u08df\u0001\u0000\u0000\u0000\u08e2"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e3\u08e1\u0001\u0000\u0000\u0000\u08e3"+
		"\u08e4\u0001\u0000\u0000\u0000\u08e4\u08ed\u0001\u0000\u0000\u0000\u08e5"+
		"\u08e8\u0003\u0174\u00ba\u0000\u08e6\u08e7\u0005\u0182\u0000\u0000\u08e7"+
		"\u08e9\u0003\u0174\u00ba\u0000\u08e8\u08e6\u0001\u0000\u0000\u0000\u08e9"+
		"\u08ea\u0001\u0000\u0000\u0000\u08ea\u08e8\u0001\u0000\u0000\u0000\u08ea"+
		"\u08eb\u0001\u0000\u0000\u0000\u08eb\u08ed\u0001\u0000\u0000\u0000\u08ec"+
		"\u08dd\u0001\u0000\u0000\u0000\u08ec\u08de\u0001\u0000\u0000\u0000\u08ec"+
		"\u08e5\u0001\u0000\u0000\u0000\u08ed\u0173\u0001\u0000\u0000\u0000\u08ee"+
		"\u08f0\u0003\u0176\u00bb\u0000\u08ef\u08ee\u0001\u0000\u0000\u0000\u08f0"+
		"\u08f1\u0001\u0000\u0000\u0000\u08f1\u08ef\u0001\u0000\u0000\u0000\u08f1"+
		"\u08f2\u0001\u0000\u0000\u0000\u08f2\u0175\u0001\u0000\u0000\u0000\u08f3"+
		"\u08fb\u0003\u0178\u00bc\u0000\u08f4\u08f5\u0003\u0178\u00bc\u0000\u08f5"+
		"\u08f6\u0003\u01b0\u00d8\u0000\u08f6\u08fb\u0001\u0000\u0000\u0000\u08f7"+
		"\u08f8\u0003\u0178\u00bc\u0000\u08f8\u08f9\u0005\u0179\u0000\u0000\u08f9"+
		"\u08fb\u0001\u0000\u0000\u0000\u08fa\u08f3\u0001\u0000\u0000\u0000\u08fa"+
		"\u08f4\u0001\u0000\u0000\u0000\u08fa\u08f7\u0001\u0000\u0000\u0000\u08fb"+
		"\u0177\u0001\u0000\u0000\u0000\u08fc\u0900\u0003\u017a\u00bd\u0000\u08fd"+
		"\u0900\u0003\u01a4\u00d2\u0000\u08fe\u0900\u0003\u01ba\u00dd\u0000\u08ff"+
		"\u08fc\u0001\u0000\u0000\u0000\u08ff\u08fd\u0001\u0000\u0000\u0000\u08ff"+
		"\u08fe\u0001\u0000\u0000\u0000\u0900\u0179\u0001\u0000\u0000\u0000\u0901"+
		"\u0904\u0003\u017c\u00be\u0000\u0902\u0904\u0003\u0190\u00c8\u0000\u0903"+
		"\u0901\u0001\u0000\u0000\u0000\u0903\u0902\u0001\u0000\u0000\u0000\u0904"+
		"\u017b\u0001\u0000\u0000\u0000\u0905\u0906\u0005\u0173\u0000\u0000\u0906"+
		"\u0907\u0003\u017e\u00bf\u0000\u0907\u0908\u0005\u017e\u0000\u0000\u0908"+
		"\u017d\u0001\u0000\u0000\u0000\u0909\u090b\u0003\u0180\u00c0\u0000\u090a"+
		"\u0909\u0001\u0000\u0000\u0000\u090a\u090b\u0001\u0000\u0000\u0000\u090b"+
		"\u090d\u0001\u0000\u0000\u0000\u090c\u090e\u0003\u0182\u00c1\u0000\u090d"+
		"\u090c\u0001\u0000\u0000\u0000\u090d\u090e\u0001\u0000\u0000\u0000\u090e"+
		"\u0910\u0001\u0000\u0000\u0000\u090f\u0911\u0003\u0186\u00c3\u0000\u0910"+
		"\u090f\u0001\u0000\u0000\u0000\u0910\u0911\u0001\u0000\u0000\u0000\u0911"+
		"\u017f\u0001\u0000\u0000\u0000\u0912\u0914\u0005\u013a\u0000\u0000\u0913"+
		"\u0912\u0001\u0000\u0000\u0000\u0913\u0914\u0001\u0000\u0000\u0000\u0914"+
		"\u0915\u0001\u0000\u0000\u0000\u0915\u0916\u0003\u043e\u021f\u0000\u0916"+
		"\u0181\u0001\u0000\u0000\u0000\u0917\u0918\u0003\u0184\u00c2\u0000\u0918"+
		"\u0919\u0003\u01aa\u00d5\u0000\u0919\u0183\u0001\u0000\u0000\u0000\u091a"+
		"\u091b\u0007\u0007\u0000\u0000\u091b\u0185\u0001\u0000\u0000\u0000\u091c"+
		"\u091f\u0003\u0188\u00c4\u0000\u091d\u091f\u0003\u018a\u00c5\u0000\u091e"+
		"\u091c\u0001\u0000\u0000\u0000\u091e\u091d\u0001\u0000\u0000\u0000\u091f"+
		"\u0187\u0001\u0000\u0000\u0000\u0920\u0921\u0005\u00e6\u0000\u0000\u0921"+
		"\u0922\u0003\u0304\u0182\u0000\u0922\u0189\u0001\u0000\u0000\u0000\u0923"+
		"\u0924\u0005\u0171\u0000\u0000\u0924\u0925\u0003\u018c\u00c6\u0000\u0925"+
		"\u0926\u0005\u017c\u0000\u0000\u0926\u018b\u0001\u0000\u0000\u0000\u0927"+
		"\u092c\u0003\u018e\u00c7\u0000\u0928\u0929\u0005\u0169\u0000\u0000\u0929"+
		"\u092b\u0003\u018e\u00c7\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092b"+
		"\u092e\u0001\u0000\u0000\u0000\u092c\u092a\u0001\u0000\u0000\u0000\u092c"+
		"\u092d\u0001\u0000\u0000\u0000\u092d\u018d\u0001\u0000\u0000\u0000\u092e"+
		"\u092c\u0001\u0000\u0000\u0000\u092f\u0930\u0003\u043a\u021d\u0000\u0930"+
		"\u0931\u0005\u0168\u0000\u0000\u0931\u0932\u0003\u0332\u0199\u0000\u0932"+
		"\u018f\u0001\u0000\u0000\u0000\u0933\u0936\u0003\u0192\u00c9\u0000\u0934"+
		"\u0936\u0003\u01a2\u00d1\u0000\u0935\u0933\u0001\u0000\u0000\u0000\u0935"+
		"\u0934\u0001\u0000\u0000\u0000\u0936\u0191\u0001\u0000\u0000\u0000\u0937"+
		"\u093f\u0003\u0194\u00ca\u0000\u0938\u093f\u0003\u0196\u00cb\u0000\u0939"+
		"\u093f\u0003\u0198\u00cc\u0000\u093a\u093f\u0003\u019a\u00cd\u0000\u093b"+
		"\u093f\u0003\u019c\u00ce\u0000\u093c\u093f\u0003\u019e\u00cf\u0000\u093d"+
		"\u093f\u0003\u01a0\u00d0\u0000\u093e\u0937\u0001\u0000\u0000\u0000\u093e"+
		"\u0938\u0001\u0000\u0000\u0000\u093e\u0939\u0001\u0000\u0000\u0000\u093e"+
		"\u093a\u0001\u0000\u0000\u0000\u093e\u093b\u0001\u0000\u0000\u0000\u093e"+
		"\u093c\u0001\u0000\u0000\u0000\u093e\u093d\u0001\u0000\u0000\u0000\u093f"+
		"\u0193\u0001\u0000\u0000\u0000\u0940\u0941\u0005\u0152\u0000\u0000\u0941"+
		"\u0942\u0003\u017e\u00bf\u0000\u0942\u0943\u0005\u015c\u0000\u0000\u0943"+
		"\u0195\u0001\u0000\u0000\u0000\u0944\u0945\u0005\u0163\u0000\u0000\u0945"+
		"\u0946\u0003\u017e\u00bf\u0000\u0946\u0947\u0005\u015d\u0000\u0000\u0947"+
		"\u0197\u0001\u0000\u0000\u0000\u0948\u0949\u0005\u0158\u0000\u0000\u0949"+
		"\u094a\u0003\u017e\u00bf\u0000\u094a\u094b\u0005\u0149\u0000\u0000\u094b"+
		"\u0199\u0001\u0000\u0000\u0000\u094c\u094d\u0005\u0153\u0000\u0000\u094d"+
		"\u094e\u0003\u017e\u00bf\u0000\u094e\u094f\u0005\u015d\u0000\u0000\u094f"+
		"\u019b\u0001\u0000\u0000\u0000\u0950\u0951\u0005\u0163\u0000\u0000\u0951"+
		"\u0952\u0003\u017e\u00bf\u0000\u0952\u0953\u0005\u014a\u0000\u0000\u0953"+
		"\u019d\u0001\u0000\u0000\u0000\u0954\u0955\u0005\u0152\u0000\u0000\u0955"+
		"\u0956\u0003\u017e\u00bf\u0000\u0956\u0957\u0005\u0149\u0000\u0000\u0957"+
		"\u019f\u0001\u0000\u0000\u0000\u0958\u0959\u0005\u0158\u0000\u0000\u0959"+
		"\u095a\u0003\u017e\u00bf\u0000\u095a\u095b\u0005\u015c\u0000\u0000\u095b"+
		"\u01a1\u0001\u0000\u0000\u0000\u095c\u095d\u0007\b\u0000\u0000\u095d\u01a3"+
		"\u0001\u0000\u0000\u0000\u095e\u0960\u0005\u0173\u0000\u0000\u095f\u0961"+
		"\u0003\u01a6\u00d3\u0000\u0960\u095f\u0001\u0000\u0000\u0000\u0960\u0961"+
		"\u0001\u0000\u0000\u0000\u0961\u0963\u0001\u0000\u0000\u0000\u0962\u0964"+
		"\u0003\u0158\u00ac\u0000\u0963\u0962\u0001\u0000\u0000\u0000\u0963\u0964"+
		"\u0001\u0000\u0000\u0000\u0964\u0965\u0001\u0000\u0000\u0000\u0965\u0967"+
		"\u0003\u0172\u00b9\u0000\u0966\u0968\u0003\u01a8\u00d4\u0000\u0967\u0966"+
		"\u0001\u0000\u0000\u0000\u0967\u0968\u0001\u0000\u0000\u0000\u0968\u0969"+
		"\u0001\u0000\u0000\u0000\u0969\u096a\u0005\u017e\u0000\u0000\u096a\u01a5"+
		"\u0001\u0000\u0000\u0000\u096b\u096c\u0003\u0442\u0221\u0000\u096c\u096d"+
		"\u0005\u016d\u0000\u0000\u096d\u01a7\u0001\u0000\u0000\u0000\u096e\u096f"+
		"\u0005\u00e6\u0000\u0000\u096f\u0970\u0003\u0304\u0182\u0000\u0970\u01a9"+
		"\u0001\u0000\u0000\u0000\u0971\u0972\u0006\u00d5\uffff\uffff\u0000\u0972"+
		"\u0973\u0005\u016e\u0000\u0000\u0973\u097b\u0003\u01aa\u00d5\u0006\u0974"+
		"\u097b\u0003\u0438\u021c\u0000\u0975\u097b\u0005\u0176\u0000\u0000\u0976"+
		"\u0977\u0005\u0173\u0000\u0000\u0977\u0978\u0003\u01aa\u00d5\u0000\u0978"+
		"\u0979\u0005\u017e\u0000\u0000\u0979\u097b\u0001\u0000\u0000\u0000\u097a"+
		"\u0971\u0001\u0000\u0000\u0000\u097a\u0974\u0001\u0000\u0000\u0000\u097a"+
		"\u0975\u0001\u0000\u0000\u0000\u097a\u0976\u0001\u0000\u0000\u0000\u097b"+
		"\u0984\u0001\u0000\u0000\u0000\u097c\u097d\n\u0005\u0000\u0000\u097d\u097e"+
		"\u0005\u0166\u0000\u0000\u097e\u0983\u0003\u01aa\u00d5\u0006\u097f\u0980"+
		"\n\u0004\u0000\u0000\u0980\u0981\u0005\u0182\u0000\u0000\u0981\u0983\u0003"+
		"\u01aa\u00d5\u0005\u0982\u097c\u0001\u0000\u0000\u0000\u0982\u097f\u0001"+
		"\u0000\u0000\u0000\u0983\u0986\u0001\u0000\u0000\u0000\u0984\u0982\u0001"+
		"\u0000\u0000\u0000\u0984\u0985\u0001\u0000\u0000\u0000\u0985\u01ab\u0001"+
		"\u0000\u0000\u0000\u0986\u0984\u0001\u0000\u0000\u0000\u0987\u0988\u0003"+
		"\u0390\u01c8\u0000\u0988\u01ad\u0001\u0000\u0000\u0000\u0989\u098a\u0003"+
		"\u0390\u01c8\u0000\u098a\u01af\u0001\u0000\u0000\u0000\u098b\u0990\u0005"+
		"\u0167\u0000\u0000\u098c\u0990\u0005\u0178\u0000\u0000\u098d\u0990\u0003"+
		"\u01b2\u00d9\u0000\u098e\u0990\u0003\u01b4\u00da\u0000\u098f\u098b\u0001"+
		"\u0000\u0000\u0000\u098f\u098c\u0001\u0000\u0000\u0000\u098f\u098d\u0001"+
		"\u0000\u0000\u0000\u098f\u098e\u0001\u0000\u0000\u0000\u0990\u01b1\u0001"+
		"\u0000\u0000\u0000\u0991\u0992\u0005\u0171\u0000\u0000\u0992\u0993\u0003"+
		"\u0464\u0232\u0000\u0993\u0994\u0005\u017c\u0000\u0000\u0994\u01b3\u0001"+
		"\u0000\u0000\u0000\u0995\u0997\u0005\u0171\u0000\u0000\u0996\u0998\u0003"+
		"\u01b6\u00db\u0000\u0997\u0996\u0001\u0000\u0000\u0000\u0997\u0998\u0001"+
		"\u0000\u0000\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u099b\u0005"+
		"\u0169\u0000\u0000\u099a\u099c\u0003\u01b8\u00dc\u0000\u099b\u099a\u0001"+
		"\u0000\u0000\u0000\u099b\u099c\u0001\u0000\u0000\u0000\u099c\u099d\u0001"+
		"\u0000\u0000\u0000\u099d\u099e\u0005\u017c\u0000\u0000\u099e\u01b5\u0001"+
		"\u0000\u0000\u0000\u099f\u09a0\u0003\u0464\u0232\u0000\u09a0\u01b7\u0001"+
		"\u0000\u0000\u0000\u09a1\u09a2\u0003\u0464\u0232\u0000\u09a2\u01b9\u0001"+
		"\u0000\u0000\u0000\u09a3\u09ab\u0003\u01bc\u00de\u0000\u09a4\u09ab\u0003"+
		"\u01be\u00df\u0000\u09a5\u09ab\u0003\u01c0\u00e0\u0000\u09a6\u09ab\u0003"+
		"\u01c2\u00e1\u0000\u09a7\u09ab\u0003\u01c4\u00e2\u0000\u09a8\u09ab\u0003"+
		"\u01c6\u00e3\u0000\u09a9\u09ab\u0003\u01c8\u00e4\u0000\u09aa\u09a3\u0001"+
		"\u0000\u0000\u0000\u09aa\u09a4\u0001\u0000\u0000\u0000\u09aa\u09a5\u0001"+
		"\u0000\u0000\u0000\u09aa\u09a6\u0001\u0000\u0000\u0000\u09aa\u09a7\u0001"+
		"\u0000\u0000\u0000\u09aa\u09a8\u0001\u0000\u0000\u0000\u09aa\u09a9\u0001"+
		"\u0000\u0000\u0000\u09ab\u01bb\u0001\u0000\u0000\u0000\u09ac\u09ad\u0005"+
		"\u0155\u0000\u0000\u09ad\u09ae\u0003\u01ca\u00e5\u0000\u09ae\u09af\u0005"+
		"\u015f\u0000\u0000\u09af\u01bd\u0001\u0000\u0000\u0000\u09b0\u09b1\u0005"+
		"\u0165\u0000\u0000\u09b1\u09b2\u0003\u01ca\u00e5\u0000\u09b2\u09b3\u0005"+
		"\u0161\u0000\u0000\u09b3\u01bf\u0001\u0000\u0000\u0000\u09b4\u09b5\u0005"+
		"\u0159\u0000\u0000\u09b5\u09b6\u0003\u01ca\u00e5\u0000\u09b6\u09b7\u0005"+
		"\u0160\u0000\u0000\u09b7\u01c1\u0001\u0000\u0000\u0000\u09b8\u09b9\u0005"+
		"\u0156\u0000\u0000\u09b9\u09ba\u0003\u01ca\u00e5\u0000\u09ba\u09bb\u0005"+
		"\u0161\u0000\u0000\u09bb\u01c3\u0001\u0000\u0000\u0000\u09bc\u09bd\u0005"+
		"\u0165\u0000\u0000\u09bd\u09be\u0003\u01ca\u00e5\u0000\u09be\u09bf\u0005"+
		"\u0162\u0000\u0000\u09bf\u01c5\u0001\u0000\u0000\u0000\u09c0\u09c1\u0005"+
		"\u0155\u0000\u0000\u09c1\u09c2\u0003\u01ca\u00e5\u0000\u09c2\u09c3\u0005"+
		"\u0160\u0000\u0000\u09c3\u01c7\u0001\u0000\u0000\u0000\u09c4\u09c5\u0005"+
		"\u0159\u0000\u0000\u09c5\u09c6\u0003\u01ca\u00e5\u0000\u09c6\u09c7\u0005"+
		"\u015f\u0000\u0000\u09c7\u01c9\u0001\u0000\u0000\u0000\u09c8\u09cc\u0003"+
		"\u01d0\u00e8\u0000\u09c9\u09cc\u0003\u01cc\u00e6\u0000\u09ca\u09cc\u0003"+
		"\u01ce\u00e7\u0000\u09cb\u09c8\u0001\u0000\u0000\u0000\u09cb\u09c9\u0001"+
		"\u0000\u0000\u0000\u09cb\u09ca\u0001\u0000\u0000\u0000\u09cc\u01cb\u0001"+
		"\u0000\u0000\u0000\u09cd\u09ce\u0003\u01d0\u00e8\u0000\u09ce\u09cf\u0005"+
		"\u0182\u0000\u0000\u09cf\u09d4\u0003\u01d0\u00e8\u0000\u09d0\u09d1\u0005"+
		"\u0182\u0000\u0000\u09d1\u09d3\u0003\u01d0\u00e8\u0000\u09d2\u09d0\u0001"+
		"\u0000\u0000\u0000\u09d3\u09d6\u0001\u0000\u0000\u0000\u09d4\u09d2\u0001"+
		"\u0000\u0000\u0000\u09d4\u09d5\u0001\u0000\u0000\u0000\u09d5\u01cd\u0001"+
		"\u0000\u0000\u0000\u09d6\u09d4\u0001\u0000\u0000\u0000\u09d7\u09d8\u0003"+
		"\u01d0\u00e8\u0000\u09d8\u09d9\u0005\u0148\u0000\u0000\u09d9\u09de\u0003"+
		"\u01d0\u00e8\u0000\u09da\u09db\u0005\u0148\u0000\u0000\u09db\u09dd\u0003"+
		"\u01d0\u00e8\u0000\u09dc\u09da\u0001\u0000\u0000\u0000\u09dd\u09e0\u0001"+
		"\u0000\u0000\u0000\u09de\u09dc\u0001\u0000\u0000\u0000\u09de\u09df\u0001"+
		"\u0000\u0000\u0000\u09df\u01cf\u0001\u0000\u0000\u0000\u09e0\u09de\u0001"+
		"\u0000\u0000\u0000\u09e1\u09e2\u0006\u00e8\uffff\uffff\u0000\u09e2\u09e3"+
		"\u0003\u01d2\u00e9\u0000\u09e3\u09e8\u0001\u0000\u0000\u0000\u09e4\u09e5"+
		"\n\u0001\u0000\u0000\u09e5\u09e7\u0003\u01d2\u00e9\u0000\u09e6\u09e4\u0001"+
		"\u0000\u0000\u0000\u09e7\u09ea\u0001\u0000\u0000\u0000\u09e8\u09e6\u0001"+
		"\u0000\u0000\u0000\u09e8\u09e9\u0001\u0000\u0000\u0000\u09e9\u01d1\u0001"+
		"\u0000\u0000\u0000\u09ea\u09e8\u0001\u0000\u0000\u0000\u09eb\u09ec\u0006"+
		"\u00e9\uffff\uffff\u0000\u09ec\u09ed\u0003\u01d4\u00ea\u0000\u09ed\u09f3"+
		"\u0001\u0000\u0000\u0000\u09ee\u09ef\n\u0001\u0000\u0000\u09ef\u09f0\u0005"+
		"\u0166\u0000\u0000\u09f0\u09f2\u0003\u01d4\u00ea\u0000\u09f1\u09ee\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f5\u0001\u0000\u0000\u0000\u09f3\u09f1\u0001"+
		"\u0000\u0000\u0000\u09f3\u09f4\u0001\u0000\u0000\u0000\u09f4\u01d3\u0001"+
		"\u0000\u0000\u0000\u09f5\u09f3\u0001\u0000\u0000\u0000\u09f6\u09fa\u0003"+
		"\u01da\u00ed\u0000\u09f7\u09fa\u0003\u01d6\u00eb\u0000\u09f8\u09fa\u0003"+
		"\u01d8\u00ec\u0000\u09f9\u09f6\u0001\u0000\u0000\u0000\u09f9\u09f7\u0001"+
		"\u0000\u0000\u0000\u09f9\u09f8\u0001\u0000\u0000\u0000\u09fa\u01d5\u0001"+
		"\u0000\u0000\u0000\u09fb\u09fc\u0003\u01da\u00ed\u0000\u09fc\u09fd\u0003"+
		"\u01b0\u00d8\u0000\u09fd\u01d7\u0001\u0000\u0000\u0000\u09fe\u09ff\u0003"+
		"\u01da\u00ed\u0000\u09ff\u0a00\u0005\u0179\u0000\u0000\u0a00\u01d9\u0001"+
		"\u0000\u0000\u0000\u0a01\u0a04\u0003\u01dc\u00ee\u0000\u0a02\u0a04\u0003"+
		"\u01ec\u00f6\u0000\u0a03\u0a01\u0001\u0000\u0000\u0000\u0a03\u0a02\u0001"+
		"\u0000\u0000\u0000\u0a04\u01db\u0001\u0000\u0000\u0000\u0a05\u0a0d\u0003"+
		"\u01de\u00ef\u0000\u0a06\u0a0d\u0003\u01e0\u00f0\u0000\u0a07\u0a0d\u0003"+
		"\u01e2\u00f1\u0000\u0a08\u0a0d\u0003\u01e4\u00f2\u0000\u0a09\u0a0d\u0003"+
		"\u01e6\u00f3\u0000\u0a0a\u0a0d\u0003\u01e8\u00f4\u0000\u0a0b\u0a0d\u0003"+
		"\u01ea\u00f5\u0000\u0a0c\u0a05\u0001\u0000\u0000\u0000\u0a0c\u0a06\u0001"+
		"\u0000\u0000\u0000\u0a0c\u0a07\u0001\u0000\u0000\u0000\u0a0c\u0a08\u0001"+
		"\u0000\u0000\u0000\u0a0c\u0a09\u0001\u0000\u0000\u0000\u0a0c\u0a0a\u0001"+
		"\u0000\u0000\u0000\u0a0c\u0a0b\u0001\u0000\u0000\u0000\u0a0d\u01dd\u0001"+
		"\u0000\u0000\u0000\u0a0e\u0a0f\u0005\u0174\u0000\u0000\u0a0f\u0a10\u0003"+
		"\u01ec\u00f6\u0000\u0a10\u01df\u0001\u0000\u0000\u0000\u0a11\u0a12\u0005"+
		"\u0180\u0000\u0000\u0a12\u0a13\u0003\u01ec\u00f6\u0000\u0a13\u01e1\u0001"+
		"\u0000\u0000\u0000\u0a14\u0a15\u0003\u01ec\u00f6\u0000\u0a15\u0a16\u0005"+
		"\u016f\u0000\u0000\u0a16\u01e3\u0001\u0000\u0000\u0000\u0a17\u0a18\u0005"+
		"\u0151\u0000\u0000\u0a18\u0a19\u0003\u01ec\u00f6\u0000\u0a19\u01e5\u0001"+
		"\u0000\u0000\u0000\u0a1a\u0a1b\u0005\u0180\u0000\u0000\u0a1b\u0a1c\u0003"+
		"\u01ec\u00f6\u0000\u0a1c\u0a1d\u0005\u016f\u0000\u0000\u0a1d\u01e7\u0001"+
		"\u0000\u0000\u0000\u0a1e\u0a1f\u0005\u0174\u0000\u0000\u0a1f\u0a20\u0003"+
		"\u01ec\u00f6\u0000\u0a20\u0a21\u0005\u016f\u0000\u0000\u0a21\u01e9\u0001"+
		"\u0000\u0000\u0000\u0a22\u0a23\u0005\u0175\u0000\u0000\u0a23\u0a24\u0003"+
		"\u01ec\u00f6\u0000\u0a24\u01eb\u0001\u0000\u0000\u0000\u0a25\u0a28\u0003"+
		"\u01f0\u00f8\u0000\u0a26\u0a28\u0003\u01ee\u00f7\u0000\u0a27\u0a25\u0001"+
		"\u0000\u0000\u0000\u0a27\u0a26\u0001\u0000\u0000\u0000\u0a28\u01ed\u0001"+
		"\u0000\u0000\u0000\u0a29\u0a2a\u0005\u016e\u0000\u0000\u0a2a\u0a2b\u0003"+
		"\u01f0\u00f8\u0000\u0a2b\u01ef\u0001\u0000\u0000\u0000\u0a2c\u0a32\u0003"+
		"\u0438\u021c\u0000\u0a2d\u0a2e\u0005\u0173\u0000\u0000\u0a2e\u0a2f\u0003"+
		"\u01ca\u00e5\u0000\u0a2f\u0a30\u0005\u017e\u0000\u0000\u0a30\u0a32\u0001"+
		"\u0000\u0000\u0000\u0a31\u0a2c\u0001\u0000\u0000\u0000\u0a31\u0a2d\u0001"+
		"\u0000\u0000\u0000\u0a32\u01f1\u0001\u0000\u0000\u0000\u0a33\u0a34\u0005"+
		"\u00e6\u0000\u0000\u0a34\u0a35\u0003\u0304\u0182\u0000\u0a35\u01f3\u0001"+
		"\u0000\u0000\u0000\u0a36\u0a37\u0005\u00ea\u0000\u0000\u0a37\u0a38\u0003"+
		"\u01f6\u00fb\u0000\u0a38\u01f5\u0001\u0000\u0000\u0000\u0a39\u0a3e\u0003"+
		"\u01f8\u00fc\u0000\u0a3a\u0a3b\u0005\u0169\u0000\u0000\u0a3b\u0a3d\u0003"+
		"\u01f8\u00fc\u0000\u0a3c\u0a3a\u0001\u0000\u0000\u0000\u0a3d\u0a40\u0001"+
		"\u0000\u0000\u0000\u0a3e\u0a3c\u0001\u0000\u0000\u0000\u0a3e\u0a3f\u0001"+
		"\u0000\u0000\u0000\u0a3f\u01f7\u0001\u0000\u0000\u0000\u0a40\u0a3e\u0001"+
		"\u0000\u0000\u0000\u0a41\u0a43\u0003\u01fa\u00fd\u0000\u0a42\u0a44\u0003"+
		"\u01fc\u00fe\u0000\u0a43\u0a42\u0001\u0000\u0000\u0000\u0a43\u0a44\u0001"+
		"\u0000\u0000\u0000\u0a44\u01f9\u0001\u0000\u0000\u0000\u0a45\u0a46\u0003"+
		"\u043c\u021e\u0000\u0a46\u01fb\u0001\u0000\u0000\u0000\u0a47\u0a48\u0005"+
		"\u001b\u0000\u0000\u0a48\u0a49\u0003\u0444\u0222\u0000\u0a49\u01fd\u0001"+
		"\u0000\u0000\u0000\u0a4a\u0a4b\u0005f\u0000\u0000\u0a4b\u0a4c\u0005)\u0000"+
		"\u0000\u0a4c\u0a4d\u0003\u0200\u0100\u0000\u0a4d\u01ff\u0001\u0000\u0000"+
		"\u0000\u0a4e\u0a53\u0003\u0202\u0101\u0000\u0a4f\u0a50\u0005\u0169\u0000"+
		"\u0000\u0a50\u0a52\u0003\u0202\u0101\u0000\u0a51\u0a4f\u0001\u0000\u0000"+
		"\u0000\u0a52\u0a55\u0001\u0000\u0000\u0000\u0a53\u0a51\u0001\u0000\u0000"+
		"\u0000\u0a53\u0a54\u0001\u0000\u0000\u0000\u0a54\u0a58\u0001\u0000\u0000"+
		"\u0000\u0a55\u0a53\u0001\u0000\u0000\u0000\u0a56\u0a58\u0003\u0204\u0102"+
		"\u0000\u0a57\u0a4e\u0001\u0000\u0000\u0000\u0a57\u0a56\u0001\u0000\u0000"+
		"\u0000\u0a58\u0201\u0001\u0000\u0000\u0000\u0a59\u0a5a\u0003\u0390\u01c8"+
		"\u0000\u0a5a\u0203\u0001\u0000\u0000\u0000\u0a5b\u0a5c\u0005\u0173\u0000"+
		"\u0000\u0a5c\u0a5d\u0005\u017e\u0000\u0000\u0a5d\u0205\u0001\u0000\u0000"+
		"\u0000\u0a5e\u0a5f\u0005\u00a2\u0000\u0000\u0a5f\u0a60\u0005)\u0000\u0000"+
		"\u0a60\u0a61\u0003\u0208\u0104\u0000\u0a61\u0207\u0001\u0000\u0000\u0000"+
		"\u0a62\u0a67\u0003\u020a\u0105\u0000\u0a63\u0a64\u0005\u0169\u0000\u0000"+
		"\u0a64\u0a66\u0003\u020a\u0105\u0000\u0a65\u0a63\u0001\u0000\u0000\u0000"+
		"\u0a66\u0a69\u0001\u0000\u0000\u0000\u0a67\u0a65\u0001\u0000\u0000\u0000"+
		"\u0a67\u0a68\u0001\u0000\u0000\u0000\u0a68\u0209\u0001\u0000\u0000\u0000"+
		"\u0a69\u0a67\u0001\u0000\u0000\u0000\u0a6a\u0a6c\u0003\u020c\u0106\u0000"+
		"\u0a6b\u0a6d\u0003\u020e\u0107\u0000\u0a6c\u0a6b\u0001\u0000\u0000\u0000"+
		"\u0a6c\u0a6d\u0001\u0000\u0000\u0000\u0a6d\u0a6f\u0001\u0000\u0000\u0000"+
		"\u0a6e\u0a70\u0003\u0210\u0108\u0000\u0a6f\u0a6e\u0001\u0000\u0000\u0000"+
		"\u0a6f\u0a70\u0001\u0000\u0000\u0000\u0a70\u020b\u0001\u0000\u0000\u0000"+
		"\u0a71\u0a72\u0003\u0348\u01a4\u0000\u0a72\u020d\u0001\u0000\u0000\u0000"+
		"\u0a73\u0a74\u0007\t\u0000\u0000\u0a74\u020f\u0001\u0000\u0000\u0000\u0a75"+
		"\u0a76\u0005\u009b\u0000\u0000\u0a76\u0a7a\u0005\u0120\u0000\u0000\u0a77"+
		"\u0a78\u0005\u009b\u0000\u0000\u0a78\u0a7a\u0005\u0127\u0000\u0000\u0a79"+
		"\u0a75\u0001\u0000\u0000\u0000\u0a79\u0a77\u0001\u0000\u0000\u0000\u0a7a"+
		"\u0211\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0005\u0084\u0000\u0000\u0a7c"+
		"\u0a7d\u0003\u0354\u01aa\u0000\u0a7d\u0213\u0001\u0000\u0000\u0000\u0a7e"+
		"\u0a7f\u0003\u0216\u010b\u0000\u0a7f\u0a80\u0003\u0354\u01aa\u0000\u0a80"+
		"\u0215\u0001\u0000\u0000\u0000\u0a81\u0a82\u0007\n\u0000\u0000\u0a82\u0217"+
		"\u0001\u0000\u0000\u0000\u0a83\u0a87\u0003\u021a\u010d\u0000\u0a84\u0a87"+
		"\u0003\u021e\u010f\u0000\u0a85\u0a87\u0003\u023a\u011d\u0000\u0a86\u0a83"+
		"\u0001\u0000\u0000\u0000\u0a86\u0a84\u0001\u0000\u0000\u0000\u0a86\u0a85"+
		"\u0001\u0000\u0000\u0000\u0a87\u0219\u0001\u0000\u0000\u0000\u0a88\u0a8d"+
		"\u0005\u017f\u0000\u0000\u0a89\u0a8a\u0003\u0222\u0111\u0000\u0a8a\u0a8b"+
		"\u0003\u0426\u0213\u0000\u0a8b\u0a8d\u0001\u0000\u0000\u0000\u0a8c\u0a88"+
		"\u0001\u0000\u0000\u0000\u0a8c\u0a89\u0001\u0000\u0000\u0000\u0a8d\u021b"+
		"\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0003\u0222\u0111\u0000\u0a8f\u0a90"+
		"\u0003\u0426\u0213\u0000\u0a90\u021d\u0001\u0000\u0000\u0000\u0a91\u0a96"+
		"\u0003\u0220\u0110\u0000\u0a92\u0a93\u0003\u0224\u0112\u0000\u0a93\u0a94"+
		"\u0003\u0426\u0213\u0000\u0a94\u0a96\u0001\u0000\u0000\u0000\u0a95\u0a91"+
		"\u0001\u0000\u0000\u0000\u0a95\u0a92\u0001\u0000\u0000\u0000\u0a96\u021f"+
		"\u0001\u0000\u0000\u0000\u0a97\u0a98\u0007\u000b\u0000\u0000\u0a98\u0221"+
		"\u0001\u0000\u0000\u0000\u0a99\u0a9b\u0005\u017f\u0000\u0000\u0a9a\u0a9c"+
		"\u0003\u0226\u0113\u0000\u0a9b\u0a9a\u0001\u0000\u0000\u0000\u0a9b\u0a9c"+
		"\u0001\u0000\u0000\u0000\u0a9c\u0223\u0001\u0000\u0000\u0000\u0a9d\u0aa2"+
		"\u0005\u014e\u0000\u0000\u0a9e\u0a9f\u0005\u017f\u0000\u0000\u0a9f\u0aa1"+
		"\u0005\u014e\u0000\u0000\u0aa0\u0a9e\u0001\u0000\u0000\u0000\u0aa1\u0aa4"+
		"\u0001\u0000\u0000\u0000\u0aa2\u0aa0\u0001\u0000\u0000\u0000\u0aa2\u0aa3"+
		"\u0001\u0000\u0000\u0000\u0aa3\u0aa5\u0001\u0000\u0000\u0000\u0aa4\u0aa2"+
		"\u0001\u0000\u0000\u0000\u0aa5\u0aa7\u0005\u017f\u0000\u0000\u0aa6\u0aa8"+
		"\u0003\u0226\u0113\u0000\u0aa7\u0aa6\u0001\u0000\u0000\u0000\u0aa7\u0aa8"+
		"\u0001\u0000\u0000\u0000\u0aa8\u0225\u0001\u0000\u0000\u0000\u0aa9\u0aaa"+
		"\u0003\u0424\u0212\u0000\u0aaa\u0aab\u0005\u017f\u0000\u0000\u0aab\u0aad"+
		"\u0001\u0000\u0000\u0000\u0aac\u0aa9\u0001\u0000\u0000\u0000\u0aad\u0aae"+
		"\u0001\u0000\u0000\u0000\u0aae\u0aac\u0001\u0000\u0000\u0000\u0aae\u0aaf"+
		"\u0001\u0000\u0000\u0000\u0aaf\u0227\u0001\u0000\u0000\u0000\u0ab0\u0ab1"+
		"\u0003\u0238\u011c\u0000\u0ab1\u0ab2\u0003\u0428\u0214\u0000\u0ab2\u0ab7"+
		"\u0001\u0000\u0000\u0000\u0ab3\u0ab7\u0003\u042a\u0215\u0000\u0ab4\u0ab7"+
		"\u0003\u022c\u0116\u0000\u0ab5\u0ab7\u0003\u023a\u011d\u0000\u0ab6\u0ab0"+
		"\u0001\u0000\u0000\u0000\u0ab6\u0ab3\u0001\u0000\u0000\u0000\u0ab6\u0ab4"+
		"\u0001\u0000\u0000\u0000\u0ab6\u0ab5\u0001\u0000\u0000\u0000\u0ab7\u0229"+
		"\u0001\u0000\u0000\u0000\u0ab8\u0aba\u0003\u0238\u011c\u0000\u0ab9\u0ab8"+
		"\u0001\u0000\u0000\u0000\u0ab9\u0aba\u0001\u0000\u0000\u0000\u0aba\u0abb"+
		"\u0001\u0000\u0000\u0000\u0abb\u0abc\u0003\u0428\u0214\u0000\u0abc\u022b"+
		"\u0001\u0000\u0000\u0000\u0abd\u0abe\u0007\f\u0000\u0000\u0abe\u022d\u0001"+
		"\u0000\u0000\u0000\u0abf\u0ac2\u0003\u0230\u0118\u0000\u0ac0\u0ac2\u0003"+
		"\u023a\u011d\u0000\u0ac1\u0abf\u0001\u0000\u0000\u0000\u0ac1\u0ac0\u0001"+
		"\u0000\u0000\u0000\u0ac2\u022f\u0001\u0000\u0000\u0000\u0ac3\u0ac5\u0003"+
		"\u0238\u011c\u0000\u0ac4\u0ac3\u0001\u0000\u0000\u0000\u0ac4\u0ac5\u0001"+
		"\u0000\u0000\u0000\u0ac5\u0ac6\u0001\u0000\u0000\u0000\u0ac6\u0ac7\u0003"+
		"\u042c\u0216\u0000\u0ac7\u0231\u0001\u0000\u0000\u0000\u0ac8\u0ac9\u0003"+
		"\u0238\u011c\u0000\u0ac9\u0aca\u0003\u0432\u0219\u0000\u0aca\u0ace\u0001"+
		"\u0000\u0000\u0000\u0acb\u0ace\u0003\u0434\u021a\u0000\u0acc\u0ace\u0003"+
		"\u023a\u011d\u0000\u0acd\u0ac8\u0001\u0000\u0000\u0000\u0acd\u0acb\u0001"+
		"\u0000\u0000\u0000\u0acd\u0acc\u0001\u0000\u0000\u0000\u0ace\u0233\u0001"+
		"\u0000\u0000\u0000\u0acf\u0ad2\u0003\u0236\u011b\u0000\u0ad0\u0ad2\u0003"+
		"\u023a\u011d\u0000\u0ad1\u0acf\u0001\u0000\u0000\u0000\u0ad1\u0ad0\u0001"+
		"\u0000\u0000\u0000\u0ad2\u0235\u0001\u0000\u0000\u0000\u0ad3\u0ad5\u0003"+
		"\u0238\u011c\u0000\u0ad4\u0ad3\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0001"+
		"\u0000\u0000\u0000\u0ad5\u0ad6\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0003"+
		"\u0436\u021b\u0000\u0ad7\u0237\u0001\u0000\u0000\u0000\u0ad8\u0ada\u0003"+
		"\u0218\u010c\u0000\u0ad9\u0adb\u0005\u017f\u0000\u0000\u0ada\u0ad9\u0001"+
		"\u0000\u0000\u0000\u0ada\u0adb\u0001\u0000\u0000\u0000\u0adb\u0ae1\u0001"+
		"\u0000\u0000\u0000\u0adc\u0add\u0003\u0420\u0210\u0000\u0add\u0ade\u0005"+
		"\u0177\u0000\u0000\u0ade\u0ae0\u0001\u0000\u0000\u0000\u0adf\u0adc\u0001"+
		"\u0000\u0000\u0000\u0ae0\u0ae3\u0001\u0000\u0000\u0000\u0ae1\u0adf\u0001"+
		"\u0000\u0000\u0000\u0ae1\u0ae2\u0001\u0000\u0000\u0000\u0ae2\u0aec\u0001"+
		"\u0000\u0000\u0000\u0ae3\u0ae1\u0001\u0000\u0000\u0000\u0ae4\u0ae5\u0003"+
		"\u0420\u0210\u0000\u0ae5\u0ae6\u0005\u0177\u0000\u0000\u0ae6\u0ae8\u0001"+
		"\u0000\u0000\u0000\u0ae7\u0ae4\u0001\u0000\u0000\u0000\u0ae8\u0ae9\u0001"+
		"\u0000\u0000\u0000\u0ae9\u0ae7\u0001\u0000\u0000\u0000\u0ae9\u0aea\u0001"+
		"\u0000\u0000\u0000\u0aea\u0aec\u0001\u0000\u0000\u0000\u0aeb\u0ad8\u0001"+
		"\u0000\u0000\u0000\u0aeb\u0ae7\u0001\u0000\u0000\u0000\u0aec\u0239\u0001"+
		"\u0000\u0000\u0000\u0aed\u0aee\u0005\u0146\u0000\u0000\u0aee\u023b\u0001"+
		"\u0000\u0000\u0000\u0aef\u0af0\u0005\u0171\u0000\u0000\u0af0\u0af1\u0003"+
		"\u023e\u011f\u0000\u0af1\u0af2\u0005\u017c\u0000\u0000\u0af2\u023d\u0001"+
		"\u0000\u0000\u0000\u0af3\u0af4\u0003\u0240\u0120\u0000\u0af4\u023f\u0001"+
		"\u0000\u0000\u0000\u0af5\u0afa\u0003\u0242\u0121\u0000\u0af6\u0af7\u0005"+
		"\u0169\u0000\u0000\u0af7\u0af9\u0003\u0242\u0121\u0000\u0af8\u0af6\u0001"+
		"\u0000\u0000\u0000\u0af9\u0afc\u0001\u0000\u0000\u0000\u0afa\u0af8\u0001"+
		"\u0000\u0000\u0000\u0afa\u0afb\u0001\u0000\u0000\u0000\u0afb\u0241\u0001"+
		"\u0000\u0000\u0000\u0afc\u0afa\u0001\u0000\u0000\u0000\u0afd\u0b00\u0003"+
		"\u0244\u0122\u0000\u0afe\u0b00\u0003\u0258\u012c\u0000\u0aff\u0afd\u0001"+
		"\u0000\u0000\u0000\u0aff\u0afe\u0001\u0000\u0000\u0000\u0b00\u0243\u0001"+
		"\u0000\u0000\u0000\u0b01\u0b04\u0003\u0246\u0123\u0000\u0b02\u0b04\u0003"+
		"\u0248\u0124\u0000\u0b03\u0b01\u0001\u0000\u0000\u0000\u0b03\u0b02\u0001"+
		"\u0000\u0000\u0000\u0b04\u0245\u0001\u0000\u0000\u0000\u0b05\u0b07\u0003"+
		"\u0474\u023a\u0000\u0b06\u0b08\u0005\u013e\u0000\u0000\u0b07\u0b06\u0001"+
		"\u0000\u0000\u0000\u0b07\u0b08\u0001\u0000\u0000\u0000\u0b08\u0b09\u0001"+
		"\u0000\u0000\u0000\u0b09\u0b0a\u0003\u042e\u0217\u0000\u0b0a\u0b0c\u0001"+
		"\u0000\u0000\u0000\u0b0b\u0b05\u0001\u0000\u0000\u0000\u0b0b\u0b0c\u0001"+
		"\u0000\u0000\u0000\u0b0c\u0b0d\u0001\u0000\u0000\u0000\u0b0d\u0b0f\u0005"+
		"\u0173\u0000\u0000\u0b0e\u0b10\u0003\u024e\u0127\u0000\u0b0f\u0b0e\u0001"+
		"\u0000\u0000\u0000\u0b0f\u0b10\u0001\u0000\u0000\u0000\u0b10\u0b12\u0001"+
		"\u0000\u0000\u0000\u0b11\u0b13\u0003\u024c\u0126\u0000\u0b12\u0b11\u0001"+
		"\u0000\u0000\u0000\u0b12\u0b13\u0001\u0000\u0000\u0000\u0b13\u0b14\u0001"+
		"\u0000\u0000\u0000\u0b14\u0b15\u0005\u017e\u0000\u0000\u0b15\u0247\u0001"+
		"\u0000\u0000\u0000\u0b16\u0b18\u0003\u0474\u023a\u0000\u0b17\u0b19\u0005"+
		"\u013e\u0000\u0000\u0b18\u0b17\u0001\u0000\u0000\u0000\u0b18\u0b19\u0001"+
		"\u0000\u0000\u0000\u0b19\u0b1a\u0001\u0000\u0000\u0000\u0b1a\u0b1d\u0003"+
		"\u024a\u0125\u0000\u0b1b\u0b1c\u0005\u001b\u0000\u0000\u0b1c\u0b1e\u0003"+
		"\u024e\u0127\u0000\u0b1d\u0b1b\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0001"+
		"\u0000\u0000\u0000\u0b1e\u0249\u0001\u0000\u0000\u0000\u0b1f\u0b21\u0003"+
		"\u042e\u0217\u0000\u0b20\u0b22\u0003\u024c\u0126\u0000\u0b21\u0b20\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b22\u0001\u0000\u0000\u0000\u0b22\u0b25\u0001"+
		"\u0000\u0000\u0000\u0b23\u0b25\u0003\u024c\u0126\u0000\u0b24\u0b1f\u0001"+
		"\u0000\u0000\u0000\u0b24\u0b23\u0001\u0000\u0000\u0000\u0b25\u024b\u0001"+
		"\u0000\u0000\u0000\u0b26\u0b28\u0003\u0252\u0129\u0000\u0b27\u0b29\u0003"+
		"\u0250\u0128\u0000\u0b28\u0b27\u0001\u0000\u0000\u0000\u0b28\u0b29\u0001"+
		"\u0000\u0000\u0000\u0b29\u0b2c\u0001\u0000\u0000\u0000\u0b2a\u0b2c\u0003"+
		"\u0250\u0128\u0000\u0b2b\u0b26\u0001\u0000\u0000\u0000\u0b2b\u0b2a\u0001"+
		"\u0000\u0000\u0000\u0b2c\u024d\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0003"+
		"\u0458\u022c\u0000\u0b2e\u024f\u0001\u0000\u0000\u0000\u0b2f\u0b35\u0003"+
		"\u0254\u012a\u0000\u0b30\u0b35\u0003\u0256\u012b\u0000\u0b31\u0b32\u0003"+
		"\u0254\u012a\u0000\u0b32\u0b33\u0003\u0256\u012b\u0000\u0b33\u0b35\u0001"+
		"\u0000\u0000\u0000\u0b34\u0b2f\u0001\u0000\u0000\u0000\u0b34\u0b30\u0001"+
		"\u0000\u0000\u0000\u0b34\u0b31\u0001\u0000\u0000\u0000\u0b35\u0251\u0001"+
		"\u0000\u0000\u0000\u0b36\u0b38\u0003\u0292\u0149\u0000\u0b37\u0b36\u0001"+
		"\u0000\u0000\u0000\u0b37\u0b38\u0001\u0000\u0000\u0000\u0b38\u0b39\u0001"+
		"\u0000\u0000\u0000\u0b39\u0b3a\u0005\u0001\u0000\u0000\u0b3a\u0253\u0001"+
		"\u0000\u0000\u0000\u0b3b\u0b3c\u0003\u0292\u0149\u0000\u0b3c\u0255\u0001"+
		"\u0000\u0000\u0000\u0b3d\u0b3e\u0003\u0296\u014b\u0000\u0b3e\u0257\u0001"+
		"\u0000\u0000\u0000\u0b3f\u0b42\u0003\u025a\u012d\u0000\u0b40\u0b42\u0003"+
		"\u025c\u012e\u0000\u0b41\u0b3f\u0001\u0000\u0000\u0000\u0b41\u0b40\u0001"+
		"\u0000\u0000\u0000\u0b42\u0259\u0001\u0000\u0000\u0000\u0b43\u0b45\u0003"+
		"\u027c\u013e\u0000\u0b44\u0b43\u0001\u0000\u0000\u0000\u0b44\u0b45\u0001"+
		"\u0000\u0000\u0000\u0b45\u0b46\u0001\u0000\u0000\u0000\u0b46\u0b48\u0003"+
		"\u0478\u023c\u0000\u0b47\u0b49\u0005\u013e\u0000\u0000\u0b48\u0b47\u0001"+
		"\u0000\u0000\u0000\u0b48\u0b49\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001"+
		"\u0000\u0000\u0000\u0b4a\u0b4b\u0003\u0430\u0218\u0000\u0b4b\u0b4d\u0001"+
		"\u0000\u0000\u0000\u0b4c\u0b44\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u0001"+
		"\u0000\u0000\u0000\u0b4d\u0b50\u0001\u0000\u0000\u0000\u0b4e\u0b51\u0003"+
		"\u026a\u0135\u0000\u0b4f\u0b51\u0003\u0270\u0138\u0000\u0b50\u0b4e\u0001"+
		"\u0000\u0000\u0000\u0b50\u0b4f\u0001\u0000\u0000\u0000\u0b51\u025b\u0001"+
		"\u0000\u0000\u0000\u0b52\u0b53\u0003\u027c\u013e\u0000\u0b53\u0b55\u0003"+
		"\u0478\u023c\u0000\u0b54\u0b56\u0005\u013e\u0000\u0000\u0b55\u0b54\u0001"+
		"\u0000\u0000\u0000\u0b55\u0b56\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001"+
		"\u0000\u0000\u0000\u0b57\u0b58\u0003\u025e\u012f\u0000\u0b58\u0b59\u0003"+
		"\u027e\u013f\u0000\u0b59\u025d\u0001\u0000\u0000\u0000\u0b5a\u0b5c\u0003"+
		"\u0430\u0218\u0000\u0b5b\u0b5d\u0003\u0260\u0130\u0000\u0b5c\u0b5b\u0001"+
		"\u0000\u0000\u0000\u0b5c\u0b5d\u0001\u0000\u0000\u0000\u0b5d\u0b60\u0001"+
		"\u0000\u0000\u0000\u0b5e\u0b60\u0003\u0260\u0130\u0000\u0b5f\u0b5a\u0001"+
		"\u0000\u0000\u0000\u0b5f\u0b5e\u0001\u0000\u0000\u0000\u0b60\u025f\u0001"+
		"\u0000\u0000\u0000\u0b61\u0b63\u0003\u0264\u0132\u0000\u0b62\u0b64\u0003"+
		"\u0262\u0131\u0000\u0b63\u0b62\u0001\u0000\u0000\u0000\u0b63\u0b64\u0001"+
		"\u0000\u0000\u0000\u0b64\u0b67\u0001\u0000\u0000\u0000\u0b65\u0b67\u0003"+
		"\u0262\u0131\u0000\u0b66\u0b61\u0001\u0000\u0000\u0000\u0b66\u0b65\u0001"+
		"\u0000\u0000\u0000\u0b67\u0261\u0001\u0000\u0000\u0000\u0b68\u0b6e\u0003"+
		"\u0266\u0133\u0000\u0b69\u0b6e\u0003\u0268\u0134\u0000\u0b6a\u0b6b\u0003"+
		"\u0266\u0133\u0000\u0b6b\u0b6c\u0003\u0268\u0134\u0000\u0b6c\u0b6e\u0001"+
		"\u0000\u0000\u0000\u0b6d\u0b68\u0001\u0000\u0000\u0000\u0b6d\u0b69\u0001"+
		"\u0000\u0000\u0000\u0b6d\u0b6a\u0001\u0000\u0000\u0000\u0b6e\u0263\u0001"+
		"\u0000\u0000\u0000\u0b6f\u0b71\u0003\u0292\u0149\u0000\u0b70\u0b6f\u0001"+
		"\u0000\u0000\u0000\u0b70\u0b71\u0001\u0000\u0000\u0000\u0b71\u0b72\u0001"+
		"\u0000\u0000\u0000\u0b72\u0b73\u0005\u0001\u0000\u0000\u0b73\u0265\u0001"+
		"\u0000\u0000\u0000\u0b74\u0b75\u0003\u0292\u0149\u0000\u0b75\u0267\u0001"+
		"\u0000\u0000\u0000\u0b76\u0b77\u0003\u0296\u014b\u0000\u0b77\u0269\u0001"+
		"\u0000\u0000\u0000\u0b78\u0b7b\u0003\u026c\u0136\u0000\u0b79\u0b7b\u0003"+
		"\u026e\u0137\u0000\u0b7a\u0b78\u0001\u0000\u0000\u0000\u0b7a\u0b79\u0001"+
		"\u0000\u0000\u0000\u0b7b\u026b\u0001\u0000\u0000\u0000\u0b7c\u0b7d\u0003"+
		"\u0278\u013c\u0000\u0b7d\u0b7e\u0003\u0272\u0139\u0000\u0b7e\u0b7f\u0003"+
		"\u027a\u013d\u0000\u0b7f\u026d\u0001\u0000\u0000\u0000\u0b80\u0b81\u0003"+
		"\u027a\u013d\u0000\u0b81\u0b82\u0003\u0274\u013a\u0000\u0b82\u0b83\u0003"+
		"\u0278\u013c\u0000\u0b83\u026f\u0001\u0000\u0000\u0000\u0b84\u0b85\u0003"+
		"\u0278\u013c\u0000\u0b85\u0b86\u0003\u0276\u013b\u0000\u0b86\u0b87\u0003"+
		"\u027a\u013d\u0000\u0b87\u0271\u0001\u0000\u0000\u0000\u0b88\u0b89\u0005"+
		"\u0158\u0000\u0000\u0b89\u0b8a\u0003\u0260\u0130\u0000\u0b8a\u0b8b\u0005"+
		"\u0149\u0000\u0000\u0b8b\u0273\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0005"+
		"\u0152\u0000\u0000\u0b8d\u0b8e\u0003\u0260\u0130\u0000\u0b8e\u0b8f\u0005"+
		"\u015c\u0000\u0000\u0b8f\u0275\u0001\u0000\u0000\u0000\u0b90\u0b91\u0005"+
		"\u0163\u0000\u0000\u0b91\u0b92\u0003\u0260\u0130\u0000\u0b92\u0b93\u0005"+
		"\u015d\u0000\u0000\u0b93\u0277\u0001\u0000\u0000\u0000\u0b94\u0b95\u0005"+
		"\u0173\u0000\u0000\u0b95\u0b96\u0003\u028e\u0147\u0000\u0b96\u0b97\u0005"+
		"\u017e\u0000\u0000\u0b97\u0b9e\u0001\u0000\u0000\u0000\u0b98\u0b9a\u0005"+
		"\u0173\u0000\u0000\u0b99\u0b9b\u0003\u024c\u0126\u0000\u0b9a\u0b99\u0001"+
		"\u0000\u0000\u0000\u0b9a\u0b9b\u0001\u0000\u0000\u0000\u0b9b\u0b9c\u0001"+
		"\u0000\u0000\u0000\u0b9c\u0b9e\u0005\u017e\u0000\u0000\u0b9d\u0b94\u0001"+
		"\u0000\u0000\u0000\u0b9d\u0b98\u0001\u0000\u0000\u0000\u0b9e\u0279\u0001"+
		"\u0000\u0000\u0000\u0b9f\u0ba0\u0005\u0173\u0000\u0000\u0ba0\u0ba1\u0003"+
		"\u0290\u0148\u0000\u0ba1\u0ba2\u0005\u017e\u0000\u0000\u0ba2\u0ba9\u0001"+
		"\u0000\u0000\u0000\u0ba3\u0ba5\u0005\u0173\u0000\u0000\u0ba4\u0ba6\u0003"+
		"\u024c\u0126\u0000\u0ba5\u0ba4\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0001"+
		"\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000\u0000\u0ba7\u0ba9\u0005"+
		"\u017e\u0000\u0000\u0ba8\u0b9f\u0001\u0000\u0000\u0000\u0ba8\u0ba3\u0001"+
		"\u0000\u0000\u0000\u0ba9\u027b\u0001\u0000\u0000\u0000\u0baa\u0bab\u0007"+
		"\r\u0000\u0000\u0bab\u027d\u0001\u0000\u0000\u0000\u0bac\u0bad\u0005\u0118"+
		"\u0000\u0000\u0bad\u0bae\u0003\u0280\u0140\u0000\u0bae\u027f\u0001\u0000"+
		"\u0000\u0000\u0baf\u0bb2\u0003\u0282\u0141\u0000\u0bb0\u0bb2\u0003\u0288"+
		"\u0144\u0000\u0bb1\u0baf\u0001\u0000\u0000\u0000\u0bb1\u0bb0\u0001\u0000"+
		"\u0000\u0000\u0bb2\u0281\u0001\u0000\u0000\u0000\u0bb3\u0bb6\u0003\u0284"+
		"\u0142\u0000\u0bb4\u0bb6\u0003\u0286\u0143\u0000\u0bb5\u0bb3\u0001\u0000"+
		"\u0000\u0000\u0bb5\u0bb4\u0001\u0000\u0000\u0000\u0bb6\u0283\u0001\u0000"+
		"\u0000\u0000\u0bb7\u0bb8\u0005\u0173\u0000\u0000\u0bb8\u0bb9\u0003\u028e"+
		"\u0147\u0000\u0bb9\u0bba\u0003\u028a\u0145\u0000\u0bba\u0bbb\u0003\u0290"+
		"\u0148\u0000\u0bbb\u0bbc\u0005\u017e\u0000\u0000\u0bbc\u0285\u0001\u0000"+
		"\u0000\u0000\u0bbd\u0bbe\u0005\u0173\u0000\u0000\u0bbe\u0bbf\u0003\u0290"+
		"\u0148\u0000\u0bbf\u0bc0\u0005\u0150\u0000\u0000\u0bc0\u0bc1\u0003\u028e"+
		"\u0147\u0000\u0bc1\u0bc2\u0005\u017e\u0000\u0000\u0bc2\u0287\u0001\u0000"+
		"\u0000\u0000\u0bc3\u0bc4\u0005\u0173\u0000\u0000\u0bc4\u0bc5\u0003\u028e"+
		"\u0147\u0000\u0bc5\u0bc6\u0003\u028c\u0146\u0000\u0bc6\u0bc7\u0003\u0290"+
		"\u0148\u0000\u0bc7\u0bc8\u0005\u017e\u0000\u0000\u0bc8\u0289\u0001\u0000"+
		"\u0000\u0000\u0bc9\u0bca\u0007\u000e\u0000\u0000\u0bca\u028b\u0001\u0000"+
		"\u0000\u0000\u0bcb\u0bcc\u0007\u000f\u0000\u0000\u0bcc\u028d\u0001\u0000"+
		"\u0000\u0000\u0bcd\u0bce\u0003\u0458\u022c\u0000\u0bce\u028f\u0001\u0000"+
		"\u0000\u0000\u0bcf\u0bd0\u0003\u0458\u022c\u0000\u0bd0\u0291\u0001\u0000"+
		"\u0000\u0000\u0bd1\u0bd2\u0005\u0124\u0000\u0000\u0bd2\u0bd9\u0003\u0438"+
		"\u021c\u0000\u0bd3\u0bd4\u0005\u0126\u0000\u0000\u0bd4\u0bd9\u0003\u0294"+
		"\u014a\u0000\u0bd5\u0bd6\u0003\u0184\u00c2\u0000\u0bd6\u0bd7\u0003\u0294"+
		"\u014a\u0000\u0bd7\u0bd9\u0001\u0000\u0000\u0000\u0bd8\u0bd1\u0001\u0000"+
		"\u0000\u0000\u0bd8\u0bd3\u0001\u0000\u0000\u0000\u0bd8\u0bd5\u0001\u0000"+
		"\u0000\u0000\u0bd9\u0293\u0001\u0000\u0000\u0000\u0bda\u0bdf\u0003\u0438"+
		"\u021c\u0000\u0bdb\u0bdc\u0005\u0166\u0000\u0000\u0bdc\u0bde\u0003\u0438"+
		"\u021c\u0000\u0bdd\u0bdb\u0001\u0000\u0000\u0000\u0bde\u0be1\u0001\u0000"+
		"\u0000\u0000\u0bdf\u0bdd\u0001\u0000\u0000\u0000\u0bdf\u0be0\u0001\u0000"+
		"\u0000\u0000\u0be0\u0295\u0001\u0000\u0000\u0000\u0be1\u0bdf\u0001\u0000"+
		"\u0000\u0000\u0be2\u0be4\u0005\u0171\u0000\u0000\u0be3\u0be5\u0003\u0298"+
		"\u014c\u0000\u0be4\u0be3\u0001\u0000\u0000\u0000\u0be4\u0be5\u0001\u0000"+
		"\u0000\u0000\u0be5\u0be6\u0001\u0000\u0000\u0000\u0be6\u0be7\u0005\u017c"+
		"\u0000\u0000\u0be7\u0297\u0001\u0000\u0000\u0000\u0be8\u0bed\u0003\u029a"+
		"\u014d\u0000\u0be9\u0bea\u0005\u0169\u0000\u0000\u0bea\u0bec\u0003\u029a"+
		"\u014d\u0000\u0beb\u0be9\u0001\u0000\u0000\u0000\u0bec\u0bef\u0001\u0000"+
		"\u0000\u0000\u0bed\u0beb\u0001\u0000\u0000\u0000\u0bed\u0bee\u0001\u0000"+
		"\u0000\u0000\u0bee\u0299\u0001\u0000\u0000\u0000\u0bef\u0bed\u0001\u0000"+
		"\u0000\u0000\u0bf0\u0bf2\u0003\u043a\u021d\u0000\u0bf1\u0bf3\u0003\u02a2"+
		"\u0151\u0000\u0bf2\u0bf1\u0001\u0000\u0000\u0000\u0bf2\u0bf3\u0001\u0000"+
		"\u0000\u0000\u0bf3\u0bf4\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0003\u029c"+
		"\u014e\u0000\u0bf5\u029b\u0001\u0000\u0000\u0000\u0bf6\u0bf7\u0003\u02a0"+
		"\u0150\u0000\u0bf7\u029d\u0001\u0000\u0000\u0000\u0bf8\u0bfa\u0005\u0116"+
		"\u0000\u0000\u0bf9\u0bf8\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0001\u0000"+
		"\u0000\u0000\u0bfa\u0bfb\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0005\u0139"+
		"\u0000\u0000\u0bfc\u0bfd\u0003\u02fc\u017e\u0000\u0bfd\u029f\u0001\u0000"+
		"\u0000\u0000\u0bfe\u0bff\u0006\u0150\uffff\uffff\u0000\u0bff\u0c38\u0003"+
		"\u02a4\u0152\u0000\u0c00\u0c38\u0003\u02f4\u017a\u0000\u0c01\u0c02\u0003"+
		"\u02f6\u017b\u0000\u0c02\u0c03\u0005\u0174\u0000\u0000\u0c03\u0c04\u0003"+
		"\u02a0\u0150\u0000\u0c04\u0c09\u0005\u016f\u0000\u0000\u0c05\u0c06\u0005"+
		"\u0172\u0000\u0000\u0c06\u0c07\u0003\u02ae\u0157\u0000\u0c07\u0c08\u0005"+
		"\u017d\u0000\u0000\u0c08\u0c0a\u0001\u0000\u0000\u0000\u0c09\u0c05\u0001"+
		"\u0000\u0000\u0000\u0c09\u0c0a\u0001\u0000\u0000\u0000\u0c0a\u0c0c\u0001"+
		"\u0000\u0000\u0000\u0c0b\u0c0d\u0003\u0300\u0180\u0000\u0c0c\u0c0b\u0001"+
		"\u0000\u0000\u0000\u0c0c\u0c0d\u0001\u0000\u0000\u0000\u0c0d\u0c38\u0001"+
		"\u0000\u0000\u0000\u0c0e\u0c13\u0003\u02f6\u017b\u0000\u0c0f\u0c10\u0005"+
		"\u0172\u0000\u0000\u0c10\u0c11\u0003\u02ae\u0157\u0000\u0c11\u0c12\u0005"+
		"\u017d\u0000\u0000\u0c12\u0c14\u0001\u0000\u0000\u0000\u0c13\u0c0f\u0001"+
		"\u0000\u0000\u0000\u0c13\u0c14\u0001\u0000\u0000\u0000\u0c14\u0c16\u0001"+
		"\u0000\u0000\u0000\u0c15\u0c17\u0003\u0300\u0180\u0000\u0c16\u0c15\u0001"+
		"\u0000\u0000\u0000\u0c16\u0c17\u0001\u0000\u0000\u0000\u0c17\u0c38\u0001"+
		"\u0000\u0000\u0000\u0c18\u0c38\u0003\u02fa\u017d\u0000\u0c19\u0c1b\u0005"+
		"\u0019\u0000\u0000\u0c1a\u0c1c\u0005\u00e1\u0000\u0000\u0c1b\u0c1a\u0001"+
		"\u0000\u0000\u0000\u0c1b\u0c1c\u0001\u0000\u0000\u0000\u0c1c\u0c1e\u0001"+
		"\u0000\u0000\u0000\u0c1d\u0c1f\u0003\u0300\u0180\u0000\u0c1e\u0c1d\u0001"+
		"\u0000\u0000\u0000\u0c1e\u0c1f\u0001\u0000\u0000\u0000\u0c1f\u0c38\u0001"+
		"\u0000\u0000\u0000\u0c20\u0c22\u0005\u0019\u0000\u0000\u0c21\u0c20\u0001"+
		"\u0000\u0000\u0000\u0c21\u0c22\u0001\u0000\u0000\u0000\u0c22\u0c23\u0001"+
		"\u0000\u0000\u0000\u0c23\u0c24\u0005\u0131\u0000\u0000\u0c24\u0c26\u0005"+
		"\u00e1\u0000\u0000\u0c25\u0c27\u0003\u0300\u0180\u0000\u0c26\u0c25\u0001"+
		"\u0000\u0000\u0000\u0c26\u0c27\u0001\u0000\u0000\u0000\u0c27\u0c38\u0001"+
		"\u0000\u0000\u0000\u0c28\u0c2a\u0005\u0019\u0000\u0000\u0c29\u0c2b\u0005"+
		"\u00e1\u0000\u0000\u0c2a\u0c29\u0001\u0000\u0000\u0000\u0c2a\u0c2b\u0001"+
		"\u0000\u0000\u0000\u0c2b\u0c2c\u0001\u0000\u0000\u0000\u0c2c\u0c2d\u0005"+
		"\u0174\u0000\u0000\u0c2d\u0c32\u0003\u02a0\u0150\u0000\u0c2e\u0c2f\u0005"+
		"\u0182\u0000\u0000\u0c2f\u0c31\u0003\u02a0\u0150\u0000\u0c30\u0c2e\u0001"+
		"\u0000\u0000\u0000\u0c31\u0c34\u0001\u0000\u0000\u0000\u0c32\u0c30\u0001"+
		"\u0000\u0000\u0000\u0c32\u0c33\u0001\u0000\u0000\u0000\u0c33\u0c35\u0001"+
		"\u0000\u0000\u0000\u0c34\u0c32\u0001\u0000\u0000\u0000\u0c35\u0c36\u0005"+
		"\u016f\u0000\u0000\u0c36\u0c38\u0001\u0000\u0000\u0000\u0c37\u0bfe\u0001"+
		"\u0000\u0000\u0000\u0c37\u0c00\u0001\u0000\u0000\u0000\u0c37\u0c01\u0001"+
		"\u0000\u0000\u0000\u0c37\u0c0e\u0001\u0000\u0000\u0000\u0c37\u0c18\u0001"+
		"\u0000\u0000\u0000\u0c37\u0c19\u0001\u0000\u0000\u0000\u0c37\u0c21\u0001"+
		"\u0000\u0000\u0000\u0c37\u0c28\u0001\u0000\u0000\u0000\u0c38\u0c49\u0001"+
		"\u0000\u0000\u0000\u0c39\u0c3a\n\u0001\u0000\u0000\u0c3a\u0c3b\u0005\u0182"+
		"\u0000\u0000\u0c3b\u0c48\u0003\u02a0\u0150\u0002\u0c3c\u0c3d\n\u0007\u0000"+
		"\u0000\u0c3d\u0c42\u0003\u02f6\u017b\u0000\u0c3e\u0c3f\u0005\u0172\u0000"+
		"\u0000\u0c3f\u0c40\u0003\u02ae\u0157\u0000\u0c40\u0c41\u0005\u017d\u0000"+
		"\u0000\u0c41\u0c43\u0001\u0000\u0000\u0000\u0c42\u0c3e\u0001\u0000\u0000"+
		"\u0000\u0c42\u0c43\u0001\u0000\u0000\u0000\u0c43\u0c45\u0001\u0000\u0000"+
		"\u0000\u0c44\u0c46\u0003\u0300\u0180\u0000\u0c45\u0c44\u0001\u0000\u0000"+
		"\u0000\u0c45\u0c46\u0001\u0000\u0000\u0000\u0c46\u0c48\u0001\u0000\u0000"+
		"\u0000\u0c47\u0c39\u0001\u0000\u0000\u0000\u0c47\u0c3c\u0001\u0000\u0000"+
		"\u0000\u0c48\u0c4b\u0001\u0000\u0000\u0000\u0c49\u0c47\u0001\u0000\u0000"+
		"\u0000\u0c49\u0c4a\u0001\u0000\u0000\u0000\u0c4a\u02a1\u0001\u0000\u0000"+
		"\u0000\u0c4b\u0c49\u0001\u0000\u0000\u0000\u0c4c\u0c4d\u0007\u0010\u0000"+
		"\u0000\u0c4d\u02a3\u0001\u0000\u0000\u0000\u0c4e\u0c56\u0003\u02a6\u0153"+
		"\u0000\u0c4f\u0c56\u0003\u02a8\u0154\u0000\u0c50\u0c56\u0003\u02aa\u0155"+
		"\u0000\u0c51\u0c56\u0003\u02b2\u0159\u0000\u0c52\u0c56\u0003\u02c6\u0163"+
		"\u0000\u0c53\u0c56\u0003\u02d8\u016c\u0000\u0c54\u0c56\u0003\u02da\u016d"+
		"\u0000\u0c55\u0c4e\u0001\u0000\u0000\u0000\u0c55\u0c4f\u0001\u0000\u0000"+
		"\u0000\u0c55\u0c50\u0001\u0000\u0000\u0000\u0c55\u0c51\u0001\u0000\u0000"+
		"\u0000\u0c55\u0c52\u0001\u0000\u0000\u0000\u0c55\u0c53\u0001\u0000\u0000"+
		"\u0000\u0c55\u0c54\u0001\u0000\u0000\u0000\u0c56\u02a5\u0001\u0000\u0000"+
		"\u0000\u0c57\u0c59\u0007\u0011\u0000\u0000\u0c58\u0c5a\u0003\u0300\u0180"+
		"\u0000\u0c59\u0c58\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0001\u0000\u0000"+
		"\u0000\u0c5a\u02a7\u0001\u0000\u0000\u0000\u0c5b\u0c65\u0005\u00ca\u0000"+
		"\u0000\u0c5c\u0c60\u0005\u0173\u0000\u0000\u0c5d\u0c5e\u0003\u02ac\u0156"+
		"\u0000\u0c5e\u0c5f\u0005\u0169\u0000\u0000\u0c5f\u0c61\u0001\u0000\u0000"+
		"\u0000\u0c60\u0c5d\u0001\u0000\u0000\u0000\u0c60\u0c61\u0001\u0000\u0000"+
		"\u0000\u0c61\u0c62\u0001\u0000\u0000\u0000\u0c62\u0c63\u0003\u02ae\u0157"+
		"\u0000\u0c63\u0c64\u0005\u017e\u0000\u0000\u0c64\u0c66\u0001\u0000\u0000"+
		"\u0000\u0c65\u0c5c\u0001\u0000\u0000\u0000\u0c65\u0c66\u0001\u0000\u0000"+
		"\u0000\u0c66\u0c68\u0001\u0000\u0000\u0000\u0c67\u0c69\u0003\u0300\u0180"+
		"\u0000\u0c68\u0c67\u0001\u0000\u0000\u0000\u0c68\u0c69\u0001\u0000\u0000"+
		"\u0000\u0c69\u0c7f\u0001\u0000\u0000\u0000\u0c6a\u0c6f\u00052\u0000\u0000"+
		"\u0c6b\u0c6c\u0005\u0173\u0000\u0000\u0c6c\u0c6d\u0003\u02b0\u0158\u0000"+
		"\u0c6d\u0c6e\u0005\u017e\u0000\u0000\u0c6e\u0c70\u0001\u0000\u0000\u0000"+
		"\u0c6f\u0c6b\u0001\u0000\u0000\u0000\u0c6f\u0c70\u0001\u0000\u0000\u0000"+
		"\u0c70\u0c72\u0001\u0000\u0000\u0000\u0c71\u0c73\u0003\u0300\u0180\u0000"+
		"\u0c72\u0c71\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000"+
		"\u0c73\u0c7f\u0001\u0000\u0000\u0000\u0c74\u0c79\u0005\u00e3\u0000\u0000"+
		"\u0c75\u0c76\u0005\u0173\u0000\u0000\u0c76\u0c77\u0003\u02ae\u0157\u0000"+
		"\u0c77\u0c78\u0005\u017e\u0000\u0000\u0c78\u0c7a\u0001\u0000\u0000\u0000"+
		"\u0c79\u0c75\u0001\u0000\u0000\u0000\u0c79\u0c7a\u0001\u0000\u0000\u0000"+
		"\u0c7a\u0c7c\u0001\u0000\u0000\u0000\u0c7b\u0c7d\u0003\u0300\u0180\u0000"+
		"\u0c7c\u0c7b\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0001\u0000\u0000\u0000"+
		"\u0c7d\u0c7f\u0001\u0000\u0000\u0000\u0c7e\u0c5b\u0001\u0000\u0000\u0000"+
		"\u0c7e\u0c6a\u0001\u0000\u0000\u0000\u0c7e\u0c74\u0001\u0000\u0000\u0000"+
		"\u0c7f\u02a9\u0001\u0000\u0000\u0000\u0c80\u0c8a\u0005+\u0000\u0000\u0c81"+
		"\u0c85\u0005\u0173\u0000\u0000\u0c82\u0c83\u0003\u02ac\u0156\u0000\u0c83"+
		"\u0c84\u0005\u0169\u0000\u0000\u0c84\u0c86\u0001\u0000\u0000\u0000\u0c85"+
		"\u0c82\u0001\u0000\u0000\u0000\u0c85\u0c86\u0001\u0000\u0000\u0000\u0c86"+
		"\u0c87\u0001\u0000\u0000\u0000\u0c87\u0c88\u0003\u02ae\u0157\u0000\u0c88"+
		"\u0c89\u0005\u017e\u0000\u0000\u0c89\u0c8b\u0001\u0000\u0000\u0000\u0c8a"+
		"\u0c81\u0001\u0000\u0000\u0000\u0c8a\u0c8b\u0001\u0000\u0000\u0000\u0c8b"+
		"\u0c8d\u0001\u0000\u0000\u0000\u0c8c\u0c8e\u0003\u0300\u0180\u0000\u0c8d"+
		"\u0c8c\u0001\u0000\u0000\u0000\u0c8d\u0c8e\u0001\u0000\u0000\u0000\u0c8e"+
		"\u0ca4\u0001\u0000\u0000\u0000\u0c8f\u0c94\u0005$\u0000\u0000\u0c90\u0c91"+
		"\u0005\u0173\u0000\u0000\u0c91\u0c92\u0003\u02b0\u0158\u0000\u0c92\u0c93"+
		"\u0005\u017e\u0000\u0000\u0c93\u0c95\u0001\u0000\u0000\u0000\u0c94\u0c90"+
		"\u0001\u0000\u0000\u0000\u0c94\u0c95\u0001\u0000\u0000\u0000\u0c95\u0c97"+
		"\u0001\u0000\u0000\u0000\u0c96\u0c98\u0003\u0300\u0180\u0000\u0c97\u0c96"+
		"\u0001\u0000\u0000\u0000\u0c97\u0c98\u0001\u0000\u0000\u0000\u0c98\u0ca4"+
		"\u0001\u0000\u0000\u0000\u0c99\u0c9e\u0005\u00e2\u0000\u0000\u0c9a\u0c9b"+
		"\u0005\u0173\u0000\u0000\u0c9b\u0c9c\u0003\u02ae\u0157\u0000\u0c9c\u0c9d"+
		"\u0005\u017e\u0000\u0000\u0c9d\u0c9f\u0001\u0000\u0000\u0000\u0c9e\u0c9a"+
		"\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000\u0000\u0c9f\u0ca1"+
		"\u0001\u0000\u0000\u0000\u0ca0\u0ca2\u0003\u0300\u0180\u0000\u0ca1\u0ca0"+
		"\u0001\u0000\u0000\u0000\u0ca1\u0ca2\u0001\u0000\u0000\u0000\u0ca2\u0ca4"+
		"\u0001\u0000\u0000\u0000\u0ca3\u0c80\u0001\u0000\u0000\u0000\u0ca3\u0c8f"+
		"\u0001\u0000\u0000\u0000\u0ca3\u0c99\u0001\u0000\u0000\u0000\u0ca4\u02ab"+
		"\u0001\u0000\u0000\u0000\u0ca5\u0ca6\u0003\u0464\u0232\u0000\u0ca6\u02ad"+
		"\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0003\u0464\u0232\u0000\u0ca8\u02af"+
		"\u0001\u0000\u0000\u0000\u0ca9\u0caa\u0003\u0464\u0232\u0000\u0caa\u02b1"+
		"\u0001\u0000\u0000\u0000\u0cab\u0cae\u0003\u02b4\u015a\u0000\u0cac\u0cae"+
		"\u0003\u02c4\u0162\u0000\u0cad\u0cab\u0001\u0000\u0000\u0000\u0cad\u0cac"+
		"\u0001\u0000\u0000\u0000\u0cae\u02b3\u0001\u0000\u0000\u0000\u0caf\u0cb2"+
		"\u0003\u02b6\u015b\u0000\u0cb0\u0cb2\u0003\u02be\u015f\u0000\u0cb1\u0caf"+
		"\u0001\u0000\u0000\u0000\u0cb1\u0cb0\u0001\u0000\u0000\u0000\u0cb2\u02b5"+
		"\u0001\u0000\u0000\u0000\u0cb3\u0cb6\u0003\u02b8\u015c\u0000\u0cb4\u0cb6"+
		"\u0003\u02ba\u015d\u0000\u0cb5\u0cb3\u0001\u0000\u0000\u0000\u0cb5\u0cb4"+
		"\u0001\u0000\u0000\u0000\u0cb6\u02b7\u0001\u0000\u0000\u0000\u0cb7\u0cb9"+
		"\u0005q\u0000\u0000\u0cb8\u0cba\u0003\u0300\u0180\u0000\u0cb9\u0cb8\u0001"+
		"\u0000\u0000\u0000\u0cb9\u0cba\u0001\u0000\u0000\u0000\u0cba\u0ce6\u0001"+
		"\u0000\u0000\u0000\u0cbb\u0cbd\u0005s\u0000\u0000\u0cbc\u0cbe\u0003\u0300"+
		"\u0180\u0000\u0cbd\u0cbc\u0001\u0000\u0000\u0000\u0cbd\u0cbe\u0001\u0000"+
		"\u0000\u0000\u0cbe\u0ce6\u0001\u0000\u0000\u0000\u0cbf\u0cc1\u0005u\u0000"+
		"\u0000\u0cc0\u0cc2\u0003\u0300\u0180\u0000\u0cc1\u0cc0\u0001\u0000\u0000"+
		"\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0ce6\u0001\u0000\u0000"+
		"\u0000\u0cc3\u0cc5\u0005w\u0000\u0000\u0cc4\u0cc6\u0003\u0300\u0180\u0000"+
		"\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0001\u0000\u0000\u0000"+
		"\u0cc6\u0ce6\u0001\u0000\u0000\u0000\u0cc7\u0cc9\u0005y\u0000\u0000\u0cc8"+
		"\u0cca\u0003\u0300\u0180\u0000\u0cc9\u0cc8\u0001\u0000\u0000\u0000\u0cc9"+
		"\u0cca\u0001\u0000\u0000\u0000\u0cca\u0ce6\u0001\u0000\u0000\u0000\u0ccb"+
		"\u0ccd\u0005{\u0000\u0000\u0ccc\u0cce\u0003\u0300\u0180\u0000\u0ccd\u0ccc"+
		"\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0001\u0000\u0000\u0000\u0cce\u0ce6"+
		"\u0001\u0000\u0000\u0000\u0ccf\u0cd1\u0005\u00c5\u0000\u0000\u0cd0\u0cd2"+
		"\u0003\u0300\u0180\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd1\u0cd2"+
		"\u0001\u0000\u0000\u0000\u0cd2\u0ce6\u0001\u0000\u0000\u0000\u0cd3\u0cd8"+
		"\u0005o\u0000\u0000\u0cd4\u0cd5\u0005\u0173\u0000\u0000\u0cd5\u0cd6\u0003"+
		"\u02c0\u0160\u0000\u0cd6\u0cd7\u0005\u017e\u0000\u0000\u0cd7\u0cd9\u0001"+
		"\u0000\u0000\u0000\u0cd8\u0cd4\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0001"+
		"\u0000\u0000\u0000\u0cd9\u0cdb\u0001\u0000\u0000\u0000\u0cda\u0cdc\u0003"+
		"\u0300\u0180\u0000\u0cdb\u0cda\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0ce6\u0001\u0000\u0000\u0000\u0cdd\u0cdf\u0005"+
		"#\u0000\u0000\u0cde\u0ce0\u0003\u0300\u0180\u0000\u0cdf\u0cde\u0001\u0000"+
		"\u0000\u0000\u0cdf\u0ce0\u0001\u0000\u0000\u0000\u0ce0\u0ce6\u0001\u0000"+
		"\u0000\u0000\u0ce1\u0ce3\u0005\u00bf\u0000\u0000\u0ce2\u0ce1\u0001\u0000"+
		"\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000\u0ce3\u0ce4\u0001\u0000"+
		"\u0000\u0000\u0ce4\u0ce6\u0003\u02bc\u015e\u0000\u0ce5\u0cb7\u0001\u0000"+
		"\u0000\u0000\u0ce5\u0cbb\u0001\u0000\u0000\u0000\u0ce5\u0cbf\u0001\u0000"+
		"\u0000\u0000\u0ce5\u0cc3\u0001\u0000\u0000\u0000\u0ce5\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0ce5\u0ccb\u0001\u0000\u0000\u0000\u0ce5\u0ccf\u0001\u0000"+
		"\u0000\u0000\u0ce5\u0cd3\u0001\u0000\u0000\u0000\u0ce5\u0cdd\u0001\u0000"+
		"\u0000\u0000\u0ce5\u0ce2\u0001\u0000\u0000\u0000\u0ce6\u02b9\u0001\u0000"+
		"\u0000\u0000\u0ce7\u0ce9\u0005\u00d6\u0000\u0000\u0ce8\u0cea\u0003\u0300"+
		"\u0180\u0000\u0ce9\u0ce8\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0001\u0000"+
		"\u0000\u0000\u0cea\u0d14\u0001\u0000\u0000\u0000\u0ceb\u0ced\u0005\u00d7"+
		"\u0000\u0000\u0cec\u0cee\u0003\u0300\u0180\u0000\u0ced\u0cec\u0001\u0000"+
		"\u0000\u0000\u0ced\u0cee\u0001\u0000\u0000\u0000\u0cee\u0d14\u0001\u0000"+
		"\u0000\u0000\u0cef\u0cf1\u0005\u00d8\u0000\u0000\u0cf0\u0cf2\u0003\u0300"+
		"\u0180\u0000\u0cf1\u0cf0\u0001\u0000\u0000\u0000\u0cf1\u0cf2\u0001\u0000"+
		"\u0000\u0000\u0cf2\u0d14\u0001\u0000\u0000\u0000\u0cf3\u0cf5\u0005\u00d9"+
		"\u0000\u0000\u0cf4\u0cf6\u0003\u0300\u0180\u0000\u0cf5\u0cf4\u0001\u0000"+
		"\u0000\u0000\u0cf5\u0cf6\u0001\u0000\u0000\u0000\u0cf6\u0d14\u0001\u0000"+
		"\u0000\u0000\u0cf7\u0cf9\u0005\u00da\u0000\u0000\u0cf8\u0cfa\u0003\u0300"+
		"\u0180\u0000\u0cf9\u0cf8\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0001\u0000"+
		"\u0000\u0000\u0cfa\u0d14\u0001\u0000\u0000\u0000\u0cfb\u0cfd\u0005\u00db"+
		"\u0000\u0000\u0cfc\u0cfe\u0003\u0300\u0180\u0000\u0cfd\u0cfc\u0001\u0000"+
		"\u0000\u0000\u0cfd\u0cfe\u0001\u0000\u0000\u0000\u0cfe\u0d14\u0001\u0000"+
		"\u0000\u0000\u0cff\u0d01\u0005\u00e0\u0000\u0000\u0d00\u0d02\u0003\u0300"+
		"\u0180\u0000\u0d01\u0d00\u0001\u0000\u0000\u0000\u0d01\u0d02\u0001\u0000"+
		"\u0000\u0000\u0d02\u0d14\u0001\u0000\u0000\u0000\u0d03\u0d08\u0005\u00d5"+
		"\u0000\u0000\u0d04\u0d05\u0005\u0173\u0000\u0000\u0d05\u0d06\u0003\u02c0"+
		"\u0160\u0000\u0d06\u0d07\u0005\u017e\u0000\u0000\u0d07\u0d09\u0001\u0000"+
		"\u0000\u0000\u0d08\u0d04\u0001\u0000\u0000\u0000\u0d08\u0d09\u0001\u0000"+
		"\u0000\u0000\u0d09\u0d0b\u0001\u0000\u0000\u0000\u0d0a\u0d0c\u0003\u0300"+
		"\u0180\u0000\u0d0b\u0d0a\u0001\u0000\u0000\u0000\u0d0b\u0d0c\u0001\u0000"+
		"\u0000\u0000\u0d0c\u0d14\u0001\u0000\u0000\u0000\u0d0d\u0d0f\u0005\u00d4"+
		"\u0000\u0000\u0d0e\u0d10\u0003\u0300\u0180\u0000\u0d0f\u0d0e\u0001\u0000"+
		"\u0000\u0000\u0d0f\u0d10\u0001\u0000\u0000\u0000\u0d10\u0d14\u0001\u0000"+
		"\u0000\u0000\u0d11\u0d12\u0005\u00dd\u0000\u0000\u0d12\u0d14\u0003\u02bc"+
		"\u015e\u0000\u0d13\u0ce7\u0001\u0000\u0000\u0000\u0d13\u0ceb\u0001\u0000"+
		"\u0000\u0000\u0d13\u0cef\u0001\u0000\u0000\u0000\u0d13\u0cf3\u0001\u0000"+
		"\u0000\u0000\u0d13\u0cf7\u0001\u0000\u0000\u0000\u0d13\u0cfb\u0001\u0000"+
		"\u0000\u0000\u0d13\u0cff\u0001\u0000\u0000\u0000\u0d13\u0d03\u0001\u0000"+
		"\u0000\u0000\u0d13\u0d0d\u0001\u0000\u0000\u0000\u0d13\u0d11\u0001\u0000"+
		"\u0000\u0000\u0d14\u02bb\u0001\u0000\u0000\u0000\u0d15\u0d17\u0005r\u0000"+
		"\u0000\u0d16\u0d18\u0003\u0300\u0180\u0000\u0d17\u0d16\u0001\u0000\u0000"+
		"\u0000\u0d17\u0d18\u0001\u0000\u0000\u0000\u0d18\u0d42\u0001\u0000\u0000"+
		"\u0000\u0d19\u0d1b\u0005t\u0000\u0000\u0d1a\u0d1c\u0003\u0300\u0180\u0000"+
		"\u0d1b\u0d1a\u0001\u0000\u0000\u0000\u0d1b\u0d1c\u0001\u0000\u0000\u0000"+
		"\u0d1c\u0d42\u0001\u0000\u0000\u0000\u0d1d\u0d1f\u0005v\u0000\u0000\u0d1e"+
		"\u0d20\u0003\u0300\u0180\u0000\u0d1f\u0d1e\u0001\u0000\u0000\u0000\u0d1f"+
		"\u0d20\u0001\u0000\u0000\u0000\u0d20\u0d42\u0001\u0000\u0000\u0000\u0d21"+
		"\u0d23\u0005x\u0000\u0000\u0d22\u0d24\u0003\u0300\u0180\u0000\u0d23\u0d22"+
		"\u0001\u0000\u0000\u0000\u0d23\u0d24\u0001\u0000\u0000\u0000\u0d24\u0d42"+
		"\u0001\u0000\u0000\u0000\u0d25\u0d27\u0005z\u0000\u0000\u0d26\u0d28\u0003"+
		"\u0300\u0180\u0000\u0d27\u0d26\u0001\u0000\u0000\u0000\u0d27\u0d28\u0001"+
		"\u0000\u0000\u0000\u0d28\u0d42\u0001\u0000\u0000\u0000\u0d29\u0d2b\u0005"+
		"|\u0000\u0000\u0d2a\u0d2c\u0003\u0300\u0180\u0000\u0d2b\u0d2a\u0001\u0000"+
		"\u0000\u0000\u0d2b\u0d2c\u0001\u0000\u0000\u0000\u0d2c\u0d42\u0001\u0000"+
		"\u0000\u0000\u0d2d\u0d2e\u0005\u00c4\u0000\u0000\u0d2e\u0d30\u0005p\u0000"+
		"\u0000\u0d2f\u0d31\u0003\u0300\u0180\u0000\u0d30\u0d2f\u0001\u0000\u0000"+
		"\u0000\u0d30\u0d31\u0001\u0000\u0000\u0000\u0d31\u0d42\u0001\u0000\u0000"+
		"\u0000\u0d32\u0d37\u0005p\u0000\u0000\u0d33\u0d34\u0005\u0173\u0000\u0000"+
		"\u0d34\u0d35\u0003\u02c0\u0160\u0000\u0d35\u0d36\u0005\u017e\u0000\u0000"+
		"\u0d36\u0d38\u0001\u0000\u0000\u0000\u0d37\u0d33\u0001\u0000\u0000\u0000"+
		"\u0d37\u0d38\u0001\u0000\u0000\u0000\u0d38\u0d3a\u0001\u0000\u0000\u0000"+
		"\u0d39\u0d3b\u0003\u0300\u0180\u0000\u0d3a\u0d39\u0001\u0000\u0000\u0000"+
		"\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b\u0d42\u0001\u0000\u0000\u0000"+
		"\u0d3c\u0d3d\u0005\"\u0000\u0000\u0d3d\u0d3f\u0005p\u0000\u0000\u0d3e"+
		"\u0d40\u0003\u0300\u0180\u0000\u0d3f\u0d3e\u0001\u0000\u0000\u0000\u0d3f"+
		"\u0d40\u0001\u0000\u0000\u0000\u0d40\u0d42\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d15\u0001\u0000\u0000\u0000\u0d41\u0d19\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d1d\u0001\u0000\u0000\u0000\u0d41\u0d21\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d25\u0001\u0000\u0000\u0000\u0d41\u0d29\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d2d\u0001\u0000\u0000\u0000\u0d41\u0d32\u0001\u0000\u0000\u0000\u0d41"+
		"\u0d3c\u0001\u0000\u0000\u0000\u0d42\u02bd\u0001\u0000\u0000\u0000\u0d43"+
		"\u0d4e\u0007\u0012\u0000\u0000\u0d44\u0d45\u0005\u0173\u0000\u0000\u0d45"+
		"\u0d48\u0003\u02c0\u0160\u0000\u0d46\u0d47\u0005\u0169\u0000\u0000\u0d47"+
		"\u0d49\u0003\u02c2\u0161\u0000\u0d48\u0d46\u0001\u0000\u0000\u0000\u0d48"+
		"\u0d49\u0001\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a"+
		"\u0d4c\u0005\u017e\u0000\u0000\u0d4b\u0d4d\u0003\u0300\u0180\u0000\u0d4c"+
		"\u0d4b\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0001\u0000\u0000\u0000\u0d4d"+
		"\u0d4f\u0001\u0000\u0000\u0000\u0d4e\u0d44\u0001\u0000\u0000\u0000\u0d4e"+
		"\u0d4f\u0001\u0000\u0000\u0000\u0d4f\u02bf\u0001\u0000\u0000\u0000\u0d50"+
		"\u0d51\u0003\u0466\u0233\u0000\u0d51\u02c1\u0001\u0000\u0000\u0000\u0d52"+
		"\u0d53\u0003\u0466\u0233\u0000\u0d53\u02c3\u0001\u0000\u0000\u0000\u0d54"+
		"\u0d56\u0005^\u0000\u0000\u0d55\u0d57\u0003\u0300\u0180\u0000\u0d56\u0d55"+
		"\u0001\u0000\u0000\u0000\u0d56\u0d57\u0001\u0000\u0000\u0000\u0d57\u0d82"+
		"\u0001\u0000\u0000\u0000\u0d58\u0d5a\u0005_\u0000\u0000\u0d59\u0d5b\u0003"+
		"\u0300\u0180\u0000\u0d5a\u0d59\u0001\u0000\u0000\u0000\u0d5a\u0d5b\u0001"+
		"\u0000\u0000\u0000\u0d5b\u0d82\u0001\u0000\u0000\u0000\u0d5c\u0d5e\u0005"+
		"`\u0000\u0000\u0d5d\u0d5f\u0003\u0300\u0180\u0000\u0d5e\u0d5d\u0001\u0000"+
		"\u0000\u0000\u0d5e\u0d5f\u0001\u0000\u0000\u0000\u0d5f\u0d82\u0001\u0000"+
		"\u0000\u0000\u0d60\u0d62\u0005a\u0000\u0000\u0d61\u0d63\u0003\u0300\u0180"+
		"\u0000\u0d62\u0d61\u0001\u0000\u0000\u0000\u0d62\u0d63\u0001\u0000\u0000"+
		"\u0000\u0d63\u0d82\u0001\u0000\u0000\u0000\u0d64\u0d66\u0005b\u0000\u0000"+
		"\u0d65\u0d67\u0003\u0300\u0180\u0000\u0d66\u0d65\u0001\u0000\u0000\u0000"+
		"\u0d66\u0d67\u0001\u0000\u0000\u0000\u0d67\u0d82\u0001\u0000\u0000\u0000"+
		"\u0d68\u0d71\u0005]\u0000\u0000\u0d69\u0d6a\u0005\u0173\u0000\u0000\u0d6a"+
		"\u0d6d\u0003\u02c0\u0160\u0000\u0d6b\u0d6c\u0005\u0169\u0000\u0000\u0d6c"+
		"\u0d6e\u0003\u02c2\u0161\u0000\u0d6d\u0d6b\u0001\u0000\u0000\u0000\u0d6d"+
		"\u0d6e\u0001\u0000\u0000\u0000\u0d6e\u0d6f\u0001\u0000\u0000\u0000\u0d6f"+
		"\u0d70\u0005\u017e\u0000\u0000\u0d70\u0d72\u0001\u0000\u0000\u0000\u0d71"+
		"\u0d69\u0001\u0000\u0000\u0000\u0d71\u0d72\u0001\u0000\u0000\u0000\u0d72"+
		"\u0d74\u0001\u0000\u0000\u0000\u0d73\u0d75\u0003\u0300\u0180\u0000\u0d74"+
		"\u0d73\u0001\u0000\u0000\u0000\u0d74\u0d75\u0001\u0000\u0000\u0000\u0d75"+
		"\u0d82\u0001\u0000\u0000\u0000\u0d76\u0d78\u0005\u00af\u0000\u0000\u0d77"+
		"\u0d79\u0003\u0300\u0180\u0000\u0d78\u0d77\u0001\u0000\u0000\u0000\u0d78"+
		"\u0d79\u0001\u0000\u0000\u0000\u0d79\u0d82\u0001\u0000\u0000\u0000\u0d7a"+
		"\u0d7c\u0005Q\u0000\u0000\u0d7b\u0d7d\u0005\u00ac\u0000\u0000\u0d7c\u0d7b"+
		"\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0001\u0000\u0000\u0000\u0d7d\u0d7f"+
		"\u0001\u0000\u0000\u0000\u0d7e\u0d80\u0003\u0300\u0180\u0000\u0d7f\u0d7e"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d80\u0001\u0000\u0000\u0000\u0d80\u0d82"+
		"\u0001\u0000\u0000\u0000\u0d81\u0d54\u0001\u0000\u0000\u0000\u0d81\u0d58"+
		"\u0001\u0000\u0000\u0000\u0d81\u0d5c\u0001\u0000\u0000\u0000\u0d81\u0d60"+
		"\u0001\u0000\u0000\u0000\u0d81\u0d64\u0001\u0000\u0000\u0000\u0d81\u0d68"+
		"\u0001\u0000\u0000\u0000\u0d81\u0d76\u0001\u0000\u0000\u0000\u0d81\u0d7a"+
		"\u0001\u0000\u0000\u0000\u0d82\u02c5\u0001\u0000\u0000\u0000\u0d83\u0d86"+
		"\u0003\u02c8\u0164\u0000\u0d84\u0d86\u0003\u02d4\u016a\u0000\u0d85\u0d83"+
		"\u0001\u0000\u0000\u0000\u0d85\u0d84\u0001\u0000\u0000\u0000\u0d86\u02c7"+
		"\u0001\u0000\u0000\u0000\u0d87\u0d8d\u0003\u02ca\u0165\u0000\u0d88\u0d8d"+
		"\u0003\u02cc\u0166\u0000\u0d89\u0d8d\u0003\u02ce\u0167\u0000\u0d8a\u0d8d"+
		"\u0003\u02d0\u0168\u0000\u0d8b\u0d8d\u0003\u02d2\u0169\u0000\u0d8c\u0d87"+
		"\u0001\u0000\u0000\u0000\u0d8c\u0d88\u0001\u0000\u0000\u0000\u0d8c\u0d89"+
		"\u0001\u0000\u0000\u0000\u0d8c\u0d8a\u0001\u0000\u0000\u0000\u0d8c\u0d8b"+
		"\u0001\u0000\u0000\u0000\u0d8d\u02c9\u0001\u0000\u0000\u0000\u0d8e\u0d8f"+
		"\u0005\u00eb\u0000\u0000\u0d8f\u0d91\u0005G\u0000\u0000\u0d90\u0d92\u0003"+
		"\u0300\u0180\u0000\u0d91\u0d90\u0001\u0000\u0000\u0000\u0d91\u0d92\u0001"+
		"\u0000\u0000\u0000\u0d92\u0d9b\u0001\u0000\u0000\u0000\u0d93\u0d94\u0005"+
		"\u00d0\u0000\u0000\u0d94\u0d95\u0005\u00e7\u0000\u0000\u0d95\u0d96\u0005"+
		"\u00cf\u0000\u0000\u0d96\u0d98\u0005\u0144\u0000\u0000\u0d97\u0d99\u0003"+
		"\u0300\u0180\u0000\u0d98\u0d97\u0001\u0000\u0000\u0000\u0d98\u0d99\u0001"+
		"\u0000\u0000\u0000\u0d99\u0d9b\u0001\u0000\u0000\u0000\u0d9a\u0d8e\u0001"+
		"\u0000\u0000\u0000\u0d9a\u0d93\u0001\u0000\u0000\u0000\u0d9b\u02cb\u0001"+
		"\u0000\u0000\u0000\u0d9c\u0d9d\u0005\u0087\u0000\u0000\u0d9d\u0d9f\u0005"+
		"G\u0000\u0000\u0d9e\u0da0\u0003\u0300\u0180\u0000\u0d9f\u0d9e\u0001\u0000"+
		"\u0000\u0000\u0d9f\u0da0\u0001\u0000\u0000\u0000\u0da0\u0dab\u0001\u0000"+
		"\u0000\u0000\u0da1\u0da5\u0005\u00d0\u0000\u0000\u0da2\u0da3\u0005\u0142"+
		"\u0000\u0000\u0da3\u0da4\u0005\u00cf\u0000\u0000\u0da4\u0da6\u0005\u0144"+
		"\u0000\u0000\u0da5\u0da2\u0001\u0000\u0000\u0000\u0da5\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da6\u0da8\u0001\u0000\u0000\u0000\u0da7\u0da9\u0003\u0300"+
		"\u0180\u0000\u0da8\u0da7\u0001\u0000\u0000\u0000\u0da8\u0da9\u0001\u0000"+
		"\u0000\u0000\u0da9\u0dab\u0001\u0000\u0000\u0000\u0daa\u0d9c\u0001\u0000"+
		"\u0000\u0000\u0daa\u0da1\u0001\u0000\u0000\u0000\u0dab\u02cd\u0001\u0000"+
		"\u0000\u0000\u0dac\u0dae\u0005F\u0000\u0000\u0dad\u0daf\u0003\u0300\u0180"+
		"\u0000\u0dae\u0dad\u0001\u0000\u0000\u0000\u0dae\u0daf\u0001\u0000\u0000"+
		"\u0000\u0daf\u02cf\u0001\u0000\u0000\u0000\u0db0\u0db1\u0005\u00eb\u0000"+
		"\u0000\u0db1\u0db3\u0005\u00cf\u0000\u0000\u0db2\u0db4\u0003\u0300\u0180"+
		"\u0000\u0db3\u0db2\u0001\u0000\u0000\u0000\u0db3\u0db4\u0001\u0000\u0000"+
		"\u0000\u0db4\u0dbd\u0001\u0000\u0000\u0000\u0db5\u0db6\u0005\u00cf\u0000"+
		"\u0000\u0db6\u0db7\u0005\u00e7\u0000\u0000\u0db7\u0db8\u0005\u00cf\u0000"+
		"\u0000\u0db8\u0dba\u0005\u0144\u0000\u0000\u0db9\u0dbb\u0003\u0300\u0180"+
		"\u0000\u0dba\u0db9\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0001\u0000\u0000"+
		"\u0000\u0dbb\u0dbd\u0001\u0000\u0000\u0000\u0dbc\u0db0\u0001\u0000\u0000"+
		"\u0000\u0dbc\u0db5\u0001\u0000\u0000\u0000\u0dbd\u02d1\u0001\u0000\u0000"+
		"\u0000\u0dbe\u0dbf\u0005\u0087\u0000\u0000\u0dbf\u0dc1\u0005\u00cf\u0000"+
		"\u0000\u0dc0\u0dc2\u0003\u0300\u0180\u0000\u0dc1\u0dc0\u0001\u0000\u0000"+
		"\u0000\u0dc1\u0dc2\u0001\u0000\u0000\u0000\u0dc2\u0dcb\u0001\u0000\u0000"+
		"\u0000\u0dc3\u0dc4\u0005\u00cf\u0000\u0000\u0dc4\u0dc5\u0005\u0142\u0000"+
		"\u0000\u0dc5\u0dc6\u0005\u00cf\u0000\u0000\u0dc6\u0dc8\u0005\u0144\u0000"+
		"\u0000\u0dc7\u0dc9\u0003\u0300\u0180\u0000\u0dc8\u0dc7\u0001\u0000\u0000"+
		"\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9\u0dcb\u0001\u0000\u0000"+
		"\u0000\u0dca\u0dbe\u0001\u0000\u0000\u0000\u0dca\u0dc3\u0001\u0000\u0000"+
		"\u0000\u0dcb\u02d3\u0001\u0000\u0000\u0000\u0dcc\u0dcd\u0005S\u0000\u0000"+
		"\u0dcd\u0dce\u0005\u0173\u0000\u0000\u0dce\u0dcf\u0003\u02d6\u016b\u0000"+
		"\u0dcf\u0dd1\u0005\u017e\u0000\u0000\u0dd0\u0dd2\u0003\u0300\u0180\u0000"+
		"\u0dd1\u0dd0\u0001\u0000\u0000\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000"+
		"\u0dd2\u02d5\u0001\u0000\u0000\u0000\u0dd3\u0dd4\u0005\u00e9\u0000\u0000"+
		"\u0dd4\u0dd5\u0005\u013b\u0000\u0000\u0dd5\u0dda\u0005\u0094\u0000\u0000"+
		"\u0dd6\u0dd7\u0005H\u0000\u0000\u0dd7\u0dd8\u0005\u013b\u0000\u0000\u0dd8"+
		"\u0dda\u0005\u00ba\u0000\u0000\u0dd9\u0dd3\u0001\u0000\u0000\u0000\u0dd9"+
		"\u0dd6\u0001\u0000\u0000\u0000\u0dda\u02d7\u0001\u0000\u0000\u0000\u0ddb"+
		"\u0de0\u0003\u02e0\u0170\u0000\u0ddc\u0de0\u0003\u02e6\u0173\u0000\u0ddd"+
		"\u0de0\u0003\u02e8\u0174\u0000\u0dde\u0de0\u0003\u02ee\u0177\u0000\u0ddf"+
		"\u0ddb\u0001\u0000\u0000\u0000\u0ddf\u0ddc\u0001\u0000\u0000\u0000\u0ddf"+
		"\u0ddd\u0001\u0000\u0000\u0000\u0ddf\u0dde\u0001\u0000\u0000\u0000\u0de0"+
		"\u02d9\u0001\u0000\u0000\u0000\u0de1\u0de4\u0003\u02dc\u016e\u0000\u0de2"+
		"\u0de4\u0003\u02de\u016f\u0000\u0de3\u0de1\u0001\u0000\u0000\u0000\u0de3"+
		"\u0de2\u0001\u0000\u0000\u0000\u0de4\u02db\u0001\u0000\u0000\u0000\u0de5"+
		"\u0de6\u0005\u009a\u0000\u0000\u0de6\u02dd\u0001\u0000\u0000\u0000\u0de7"+
		"\u0de8\u0005\u009a\u0000\u0000\u0de8\u0deb\u0003\u0300\u0180\u0000\u0de9"+
		"\u0deb\u0005\u0099\u0000\u0000\u0dea\u0de7\u0001\u0000\u0000\u0000\u0dea"+
		"\u0de9\u0001\u0000\u0000\u0000\u0deb\u02df\u0001\u0000\u0000\u0000\u0dec"+
		"\u0def\u0003\u02e4\u0172\u0000\u0ded\u0def\u0003\u02e2\u0171\u0000\u0dee"+
		"\u0dec\u0001\u0000\u0000\u0000\u0dee\u0ded\u0001\u0000\u0000\u0000\u0def"+
		"\u02e1\u0001\u0000\u0000\u0000\u0df0\u0df2\u0005\u0131\u0000\u0000\u0df1"+
		"\u0df0\u0001\u0000\u0000\u0000\u0df1\u0df2\u0001\u0000\u0000\u0000\u0df2"+
		"\u0df3\u0001\u0000\u0000\u0000\u0df3\u0df4\u0005\u0121\u0000\u0000\u0df4"+
		"\u0df6\u0003\u023c\u011e\u0000\u0df5\u0df7\u0003\u0300\u0180\u0000\u0df6"+
		"\u0df5\u0001\u0000\u0000\u0000\u0df6\u0df7\u0001\u0000\u0000\u0000\u0df7"+
		"\u02e3\u0001\u0000\u0000\u0000\u0df8\u0dfa\u0005\u0019\u0000\u0000\u0df9"+
		"\u0dfb\u0005\u0131\u0000\u0000\u0dfa\u0df9\u0001\u0000\u0000\u0000\u0dfa"+
		"\u0dfb\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0001\u0000\u0000\u0000\u0dfc"+
		"\u0dfe\u0005\u0121\u0000\u0000\u0dfd\u0dff\u0003\u0300\u0180\u0000\u0dfe"+
		"\u0dfd\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0001\u0000\u0000\u0000\u0dff"+
		"\u02e5\u0001\u0000\u0000\u0000\u0e00\u0e02\u0003\u029e\u014f\u0000\u0e01"+
		"\u0e03\u0003\u0300\u0180\u0000\u0e02\u0e01\u0001\u0000\u0000\u0000\u0e02"+
		"\u0e03\u0001\u0000\u0000\u0000\u0e03\u02e7\u0001\u0000\u0000\u0000\u0e04"+
		"\u0e07\u0003\u02ec\u0176\u0000\u0e05\u0e07\u0003\u02ea\u0175\u0000\u0e06"+
		"\u0e04\u0001\u0000\u0000\u0000\u0e06\u0e05\u0001\u0000\u0000\u0000\u0e07"+
		"\u02e9\u0001\u0000\u0000\u0000\u0e08\u0e0a\u0003\u0244\u0122\u0000\u0e09"+
		"\u0e0b\u0003\u0300\u0180\u0000\u0e0a\u0e09\u0001\u0000\u0000\u0000\u0e0a"+
		"\u0e0b\u0001\u0000\u0000\u0000\u0e0b\u02eb\u0001\u0000\u0000\u0000\u0e0c"+
		"\u0e0e\u0005\u0019\u0000\u0000\u0e0d\u0e0c\u0001\u0000\u0000\u0000\u0e0d"+
		"\u0e0e\u0001\u0000\u0000\u0000\u0e0e\u0e0f\u0001\u0000\u0000\u0000\u0e0f"+
		"\u0e11\u0003\u0474\u023a\u0000\u0e10\u0e12\u0003\u0300\u0180\u0000\u0e11"+
		"\u0e10\u0001\u0000\u0000\u0000\u0e11\u0e12\u0001\u0000\u0000\u0000\u0e12"+
		"\u02ed\u0001\u0000\u0000\u0000\u0e13\u0e16\u0003\u02f2\u0179\u0000\u0e14"+
		"\u0e16\u0003\u02f0\u0178\u0000\u0e15\u0e13\u0001\u0000\u0000\u0000\u0e15"+
		"\u0e14\u0001\u0000\u0000\u0000\u0e16\u02ef\u0001\u0000\u0000\u0000\u0e17"+
		"\u0e19\u0003\u0258\u012c\u0000\u0e18\u0e1a\u0003\u0300\u0180\u0000\u0e19"+
		"\u0e18\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000\u0e1a"+
		"\u02f1\u0001\u0000\u0000\u0000\u0e1b\u0e1d\u0005\u0019\u0000\u0000\u0e1c"+
		"\u0e1b\u0001\u0000\u0000\u0000\u0e1c\u0e1d\u0001\u0000\u0000\u0000\u0e1d"+
		"\u0e1e\u0001\u0000\u0000\u0000\u0e1e\u0e20\u0003\u0478\u023c\u0000\u0e1f"+
		"\u0e21\u0003\u0300\u0180\u0000\u0e20\u0e1f\u0001\u0000\u0000\u0000\u0e20"+
		"\u0e21\u0001\u0000\u0000\u0000\u0e21\u02f3\u0001\u0000\u0000\u0000\u0e22"+
		"\u0e24\u0005\u00a6\u0000\u0000\u0e23\u0e25\u0003\u0300\u0180\u0000\u0e24"+
		"\u0e23\u0001\u0000\u0000\u0000\u0e24\u0e25\u0001\u0000\u0000\u0000\u0e25"+
		"\u02f5\u0001\u0000\u0000\u0000\u0e26\u0e28\u0005f\u0000\u0000\u0e27\u0e26"+
		"\u0001\u0000\u0000\u0000\u0e27\u0e28\u0001\u0000\u0000\u0000\u0e28\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e29\u0e2a\u0003\u02f8\u017c\u0000\u0e2a\u02f7"+
		"\u0001\u0000\u0000\u0000\u0e2b\u0e2c\u0007\u0013\u0000\u0000\u0e2c\u02f9"+
		"\u0001\u0000\u0000\u0000\u0e2d\u0e2f\u0005\u0019\u0000\u0000\u0e2e\u0e2d"+
		"\u0001\u0000\u0000\u0000\u0e2e\u0e2f\u0001\u0000\u0000\u0000\u0e2f\u0e30"+
		"\u0001\u0000\u0000\u0000\u0e30\u0e32\u0005\u00b0\u0000\u0000\u0e31\u0e33"+
		"\u0003\u0300\u0180\u0000\u0e32\u0e31\u0001\u0000\u0000\u0000\u0e32\u0e33"+
		"\u0001\u0000\u0000\u0000\u0e33\u0e3c\u0001\u0000\u0000\u0000\u0e34\u0e36"+
		"\u0005\u00b0\u0000\u0000\u0e35\u0e34\u0001\u0000\u0000\u0000\u0e35\u0e36"+
		"\u0001\u0000\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37\u0e39"+
		"\u0003\u02fc\u017e\u0000\u0e38\u0e3a\u0003\u0300\u0180\u0000\u0e39\u0e38"+
		"\u0001\u0000\u0000\u0000\u0e39\u0e3a\u0001\u0000\u0000\u0000\u0e3a\u0e3c"+
		"\u0001\u0000\u0000\u0000\u0e3b\u0e2e\u0001\u0000\u0000\u0000\u0e3b\u0e35"+
		"\u0001\u0000\u0000\u0000\u0e3c\u02fb\u0001\u0000\u0000\u0000\u0e3d\u0e3f"+
		"\u0005\u0171\u0000\u0000\u0e3e\u0e40\u0003\u02fe\u017f\u0000\u0e3f\u0e3e"+
		"\u0001\u0000\u0000\u0000\u0e3f\u0e40\u0001\u0000\u0000\u0000\u0e40\u0e41"+
		"\u0001\u0000\u0000\u0000\u0e41\u0e42\u0005\u017c\u0000\u0000\u0e42\u02fd"+
		"\u0001\u0000\u0000\u0000\u0e43\u0e48\u0003\u0302\u0181\u0000\u0e44\u0e45"+
		"\u0005\u0169\u0000\u0000\u0e45\u0e47\u0003\u0302\u0181\u0000\u0e46\u0e44"+
		"\u0001\u0000\u0000\u0000\u0e47\u0e4a\u0001\u0000\u0000\u0000\u0e48\u0e46"+
		"\u0001\u0000\u0000\u0000\u0e48\u0e49\u0001\u0000\u0000\u0000\u0e49\u02ff"+
		"\u0001\u0000\u0000\u0000\u0e4a\u0e48\u0001\u0000\u0000\u0000\u0e4b\u0e4c"+
		"\u0005\u0098\u0000\u0000\u0e4c\u0e4d\u0005\u009a\u0000\u0000\u0e4d\u0301"+
		"\u0001\u0000\u0000\u0000\u0e4e\u0e50\u0003\u043c\u021e\u0000\u0e4f\u0e51"+
		"\u0003\u02a2\u0151\u0000\u0e50\u0e4f\u0001\u0000\u0000\u0000\u0e50\u0e51"+
		"\u0001\u0000\u0000\u0000\u0e51\u0e52\u0001\u0000\u0000\u0000\u0e52\u0e53"+
		"\u0003\u02a0\u0150\u0000\u0e53\u0303\u0001\u0000\u0000\u0000\u0e54\u0e55"+
		"\u0003\u0336\u019b\u0000\u0e55\u0305\u0001\u0000\u0000\u0000\u0e56\u0e60"+
		"\u0003\u030c\u0186\u0000\u0e57\u0e60\u0003\u030e\u0187\u0000\u0e58\u0e60"+
		"\u0003\u0312\u0189\u0000\u0e59\u0e60\u0003\u0318\u018c\u0000\u0e5a\u0e60"+
		"\u0003\u031c\u018e\u0000\u0e5b\u0e60\u0003\u0322\u0191\u0000\u0e5c\u0e60"+
		"\u0003\u032c\u0196\u0000\u0e5d\u0e60\u0003\u032e\u0197\u0000\u0e5e\u0e60"+
		"\u0003\u0330\u0198\u0000\u0e5f\u0e56\u0001\u0000\u0000\u0000\u0e5f\u0e57"+
		"\u0001\u0000\u0000\u0000\u0e5f\u0e58\u0001\u0000\u0000\u0000\u0e5f\u0e59"+
		"\u0001\u0000\u0000\u0000\u0e5f\u0e5a\u0001\u0000\u0000\u0000\u0e5f\u0e5b"+
		"\u0001\u0000\u0000\u0000\u0e5f\u0e5c\u0001\u0000\u0000\u0000\u0e5f\u0e5d"+
		"\u0001\u0000\u0000\u0000\u0e5f\u0e5e\u0001\u0000\u0000\u0000\u0e60\u0307"+
		"\u0001\u0000\u0000\u0000\u0e61\u0e62\u0003\u030a\u0185\u0000\u0e62\u0e63"+
		"\u0003\u0332\u0199\u0000\u0e63\u0309\u0001\u0000\u0000\u0000\u0e64\u0e65"+
		"\u0007\u0014\u0000\u0000\u0e65\u030b\u0001\u0000\u0000\u0000\u0e66\u0e78"+
		"\u0005Y\u0000\u0000\u0e67\u0e68\u0005\u0171\u0000\u0000\u0e68\u0e69\u0003"+
		"\u012c\u0096\u0000\u0e69\u0e6a\u0005\u017c\u0000\u0000\u0e6a\u0e79\u0001"+
		"\u0000\u0000\u0000\u0e6b\u0e6c\u0005\u0173\u0000\u0000\u0e6c\u0e6d\u0003"+
		"\u012c\u0096\u0000\u0e6d\u0e6e\u0005\u017e\u0000\u0000\u0e6e\u0e79\u0001"+
		"\u0000\u0000\u0000\u0e6f\u0e70\u0005\u0171\u0000\u0000\u0e70\u0e71\u0003"+
		"\u00dam\u0000\u0e71\u0e72\u0005\u017c\u0000\u0000\u0e72\u0e79\u0001\u0000"+
		"\u0000\u0000\u0e73\u0e74\u0005\u0173\u0000\u0000\u0e74\u0e75\u0003\u00da"+
		"m\u0000\u0e75\u0e76\u0005\u017e\u0000\u0000\u0e76\u0e79\u0001\u0000\u0000"+
		"\u0000\u0e77\u0e79\u00038\u001c\u0000\u0e78\u0e67\u0001\u0000\u0000\u0000"+
		"\u0e78\u0e6b\u0001\u0000\u0000\u0000\u0e78\u0e6f\u0001\u0000\u0000\u0000"+
		"\u0e78\u0e73\u0001\u0000\u0000\u0000\u0e78\u0e77\u0001\u0000\u0000\u0000"+
		"\u0e79\u030d\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0003\u034a\u01a5\u0000"+
		"\u0e7b\u0e7c\u0003\u0310\u0188\u0000\u0e7c\u030f\u0001\u0000\u0000\u0000"+
		"\u0e7d\u0e7f\u0005\u007f\u0000\u0000\u0e7e\u0e80\u0005\u0098\u0000\u0000"+
		"\u0e7f\u0e7e\u0001\u0000\u0000\u0000\u0e7f\u0e80\u0001\u0000\u0000\u0000"+
		"\u0e80\u0e81\u0001\u0000\u0000\u0000\u0e81\u0e82\u0005\u009a\u0000\u0000"+
		"\u0e82\u0311\u0001\u0000\u0000\u0000\u0e83\u0e84\u0003\u034a\u01a5\u0000"+
		"\u0e84\u0e85\u0003\u0314\u018a\u0000\u0e85\u0313\u0001\u0000\u0000\u0000"+
		"\u0e86\u0e88\u0005\u007f\u0000\u0000\u0e87\u0e89\u0005\u0098\u0000\u0000"+
		"\u0e88\u0e87\u0001\u0000\u0000\u0000\u0e88\u0e89\u0001\u0000\u0000\u0000"+
		"\u0e89\u0e8a\u0001\u0000\u0000\u0000\u0e8a\u0e8b\u0003\u02a2\u0151\u0000"+
		"\u0e8b\u0e8c\u0003\u02a0\u0150\u0000\u0e8c\u0315\u0001\u0000\u0000\u0000"+
		"\u0e8d\u0e8f\u0005\u007f\u0000\u0000\u0e8e\u0e90\u0005\u0098\u0000\u0000"+
		"\u0e8f\u0e8e\u0001\u0000\u0000\u0000\u0e8f\u0e90\u0001\u0000\u0000\u0000"+
		"\u0e90\u0e92\u0001\u0000\u0000\u0000\u0e91\u0e93\u0003\u03f8\u01fc\u0000"+
		"\u0e92\u0e91\u0001\u0000\u0000\u0000\u0e92\u0e93\u0001\u0000\u0000\u0000"+
		"\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94\u0e95\u0005\u012e\u0000\u0000"+
		"\u0e95\u0317\u0001\u0000\u0000\u0000\u0e96\u0e97\u0003\u01ae\u00d7\u0000"+
		"\u0e97\u0e98\u0003\u031a\u018d\u0000\u0e98\u0319\u0001\u0000\u0000\u0000"+
		"\u0e99\u0e9b\u0005\u007f\u0000\u0000\u0e9a\u0e9c\u0005\u0098\u0000\u0000"+
		"\u0e9b\u0e9a\u0001\u0000\u0000\u0000\u0e9b\u0e9c\u0001\u0000\u0000\u0000"+
		"\u0e9c\u0e9d\u0001\u0000\u0000\u0000\u0e9d\u0e9e\u0005\u011b\u0000\u0000"+
		"\u0e9e\u031b\u0001\u0000\u0000\u0000\u0e9f\u0ea0\u0003\u01ae\u00d7\u0000"+
		"\u0ea0\u0ea1\u0003\u031e\u018f\u0000\u0ea1\u031d\u0001\u0000\u0000\u0000"+
		"\u0ea2\u0ea3\u0003\u0320\u0190\u0000\u0ea3\u0ea4\u0003\u01aa\u00d5\u0000"+
		"\u0ea4\u031f\u0001\u0000\u0000\u0000\u0ea5\u0ea7\u0005\u007f\u0000\u0000"+
		"\u0ea6\u0ea8\u0005\u0098\u0000\u0000\u0ea7\u0ea6\u0001\u0000\u0000\u0000"+
		"\u0ea7\u0ea8\u0001\u0000\u0000\u0000\u0ea8\u0ea9\u0001\u0000\u0000\u0000"+
		"\u0ea9\u0eac\u0005\u0125\u0000\u0000\u0eaa\u0eac\u0005\u0168\u0000\u0000"+
		"\u0eab\u0ea5\u0001\u0000\u0000\u0000\u0eab\u0eaa\u0001\u0000\u0000\u0000"+
		"\u0eac\u0321\u0001\u0000\u0000\u0000\u0ead\u0eae\u0003\u0324\u0192\u0000"+
		"\u0eae\u0eaf\u0003\u0326\u0193\u0000\u0eaf\u0eb4\u0001\u0000\u0000\u0000"+
		"\u0eb0\u0eb1\u0003\u0324\u0192\u0000\u0eb1\u0eb2\u0003\u0328\u0194\u0000"+
		"\u0eb2\u0eb4\u0001\u0000\u0000\u0000\u0eb3\u0ead\u0001\u0000\u0000\u0000"+
		"\u0eb3\u0eb0\u0001\u0000\u0000\u0000\u0eb4\u0323\u0001\u0000\u0000\u0000"+
		"\u0eb5\u0eb6\u0003\u01ae\u00d7\u0000\u0eb6\u0325\u0001\u0000\u0000\u0000"+
		"\u0eb7\u0eb9\u0005\u007f\u0000\u0000\u0eb8\u0eba\u0005\u0098\u0000\u0000"+
		"\u0eb9\u0eb8\u0001\u0000\u0000\u0000\u0eb9\u0eba\u0001\u0000\u0000\u0000"+
		"\u0eba\u0ebb\u0001\u0000\u0000\u0000\u0ebb\u0ebc\u0005\u0138\u0000\u0000"+
		"\u0ebc\u0ebd\u0005\u009e\u0000\u0000\u0ebd\u0ebe\u0003\u032a\u0195\u0000"+
		"\u0ebe\u0327\u0001\u0000\u0000\u0000\u0ebf\u0ec1\u0005\u007f\u0000\u0000"+
		"\u0ec0\u0ec2\u0005\u0098\u0000\u0000\u0ec1\u0ec0\u0001\u0000\u0000\u0000"+
		"\u0ec1\u0ec2\u0001\u0000\u0000\u0000\u0ec2\u0ec3\u0001\u0000\u0000\u0000"+
		"\u0ec3\u0ec4\u0005\u0119\u0000\u0000\u0ec4\u0ec5\u0005\u009e\u0000\u0000"+
		"\u0ec5\u0ec6\u0003\u032a\u0195\u0000\u0ec6\u0329\u0001\u0000\u0000\u0000"+
		"\u0ec7\u0ec8\u0003\u01ae\u00d7\u0000\u0ec8\u032b\u0001\u0000\u0000\u0000"+
		"\u0ec9\u0eca\u0005\u0017\u0000\u0000\u0eca\u0ecb\u0005\u0173\u0000\u0000"+
		"\u0ecb\u0ecc\u0003\u01ae\u00d7\u0000\u0ecc\u0ecd\u0005\u0169\u0000\u0000"+
		"\u0ecd\u0ed2\u0003\u01ae\u00d7\u0000\u0ece\u0ecf\u0005\u0169\u0000\u0000"+
		"\u0ecf\u0ed1\u0003\u01ae\u00d7\u0000\u0ed0\u0ece\u0001\u0000\u0000\u0000"+
		"\u0ed1\u0ed4\u0001\u0000\u0000\u0000\u0ed2\u0ed0\u0001\u0000\u0000\u0000"+
		"\u0ed2\u0ed3\u0001\u0000\u0000\u0000\u0ed3\u0ed5\u0001\u0000\u0000\u0000"+
		"\u0ed4\u0ed2\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0005\u017e\u0000\u0000"+
		"\u0ed6\u032d\u0001\u0000\u0000\u0000\u0ed7\u0ed8\u0005\u00b8\u0000\u0000"+
		"\u0ed8\u0ed9\u0005\u0173\u0000\u0000\u0ed9\u0eda\u0003\u01ae\u00d7\u0000"+
		"\u0eda\u0edb\u0005\u0169\u0000\u0000\u0edb\u0ee0\u0003\u01ae\u00d7\u0000"+
		"\u0edc\u0edd\u0005\u0169\u0000\u0000\u0edd\u0edf\u0003\u01ae\u00d7\u0000"+
		"\u0ede\u0edc\u0001\u0000\u0000\u0000\u0edf\u0ee2\u0001\u0000\u0000\u0000"+
		"\u0ee0\u0ede\u0001\u0000\u0000\u0000\u0ee0\u0ee1\u0001\u0000\u0000\u0000"+
		"\u0ee1\u0ee3\u0001\u0000\u0000\u0000\u0ee2\u0ee0\u0001\u0000\u0000\u0000"+
		"\u0ee3\u0ee4\u0005\u017e\u0000\u0000\u0ee4\u032f\u0001\u0000\u0000\u0000"+
		"\u0ee5\u0ee6\u0005\u00ad\u0000\u0000\u0ee6\u0ee7\u0005\u0173\u0000\u0000"+
		"\u0ee7\u0ee8\u0003\u01ae\u00d7\u0000\u0ee8\u0ee9\u0005\u0169\u0000\u0000"+
		"\u0ee9\u0eea\u0003\u043a\u021d\u0000\u0eea\u0eeb\u0005\u017e\u0000\u0000"+
		"\u0eeb\u0331\u0001\u0000\u0000\u0000\u0eec\u0eed\u0006\u0199\uffff\uffff"+
		"\u0000\u0eed\u0eee\u0007\u0015\u0000\u0000\u0eee\u0eff\u0003\u0332\u0199"+
		"\u000f\u0eef\u0ef0\u0005\u0098\u0000\u0000\u0ef0\u0eff\u0003\u0332\u0199"+
		"\u000b\u0ef1\u0eff\u0003\u0306\u0183\u0000\u0ef2\u0ef4\u0005\u0131\u0000"+
		"\u0000\u0ef3\u0ef2\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0001\u0000\u0000"+
		"\u0000\u0ef4\u0ef5\u0001\u0000\u0000\u0000\u0ef5\u0ef6\u0005\u0121\u0000"+
		"\u0000\u0ef6\u0eff\u0003X,\u0000\u0ef7\u0ef9\u0005\u0116\u0000\u0000\u0ef8"+
		"\u0ef7\u0001\u0000\u0000\u0000\u0ef8\u0ef9\u0001\u0000\u0000\u0000\u0ef9"+
		"\u0efa\u0001\u0000\u0000\u0000\u0efa\u0efb\u0005\u0139\u0000\u0000\u0efb"+
		"\u0eff\u0003\\.\u0000\u0efc\u0eff\u0003\u0334\u019a\u0000\u0efd\u0eff"+
		"\u0003\u034a\u01a5\u0000\u0efe\u0eec\u0001\u0000\u0000\u0000\u0efe\u0eef"+
		"\u0001\u0000\u0000\u0000\u0efe\u0ef1\u0001\u0000\u0000\u0000\u0efe\u0ef3"+
		"\u0001\u0000\u0000\u0000\u0efe\u0ef8\u0001\u0000\u0000\u0000\u0efe\u0efc"+
		"\u0001\u0000\u0000\u0000\u0efe\u0efd\u0001\u0000\u0000\u0000\u0eff\u0f1b"+
		"\u0001\u0000\u0000\u0000\u0f00\u0f01\n\u000e\u0000\u0000\u0f01\u0f02\u0007"+
		"\u0016\u0000\u0000\u0f02\u0f1a\u0003\u0332\u0199\u000f\u0f03\u0f04\n\r"+
		"\u0000\u0000\u0f04\u0f05\u0007\u0015\u0000\u0000\u0f05\u0f1a\u0003\u0332"+
		"\u0199\u000e\u0f06\u0f07\n\f\u0000\u0000\u0f07\u0f08\u0005\u014b\u0000"+
		"\u0000\u0f08\u0f1a\u0003\u0332\u0199\r\u0f09\u0f0a\n\t\u0000\u0000\u0f0a"+
		"\u0f0b\u0005\u0018\u0000\u0000\u0f0b\u0f1a\u0003\u0332\u0199\n\u0f0c\u0f0d"+
		"\n\b\u0000\u0000\u0f0d\u0f0e\u0007\u0017\u0000\u0000\u0f0e\u0f1a\u0003"+
		"\u0332\u0199\t\u0f0f\u0f10\n\n\u0000\u0000\u0f10\u0f12\u0005\u007f\u0000"+
		"\u0000\u0f11\u0f13\u0005\u0098\u0000\u0000\u0f12\u0f11\u0001\u0000\u0000"+
		"\u0000\u0f12\u0f13\u0001\u0000\u0000\u0000\u0f13\u0f14\u0001\u0000\u0000"+
		"\u0000\u0f14\u0f1a\u0003\u03b6\u01db\u0000\u0f15\u0f16\n\u0007\u0000\u0000"+
		"\u0f16\u0f1a\u0003\u0308\u0184\u0000\u0f17\u0f18\n\u0005\u0000\u0000\u0f18"+
		"\u0f1a\u0003\u0316\u018b\u0000\u0f19\u0f00\u0001\u0000\u0000\u0000\u0f19"+
		"\u0f03\u0001\u0000\u0000\u0000\u0f19\u0f06\u0001\u0000\u0000\u0000\u0f19"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f19\u0f0c\u0001\u0000\u0000\u0000\u0f19"+
		"\u0f0f\u0001\u0000\u0000\u0000\u0f19\u0f15\u0001\u0000\u0000\u0000\u0f19"+
		"\u0f17\u0001\u0000\u0000\u0000\u0f1a\u0f1d\u0001\u0000\u0000\u0000\u0f1b"+
		"\u0f19\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0001\u0000\u0000\u0000\u0f1c"+
		"\u0333\u0001\u0000\u0000\u0000\u0f1d\u0f1b\u0001\u0000\u0000\u0000\u0f1e"+
		"\u0f25\u0003\u03ba\u01dd\u0000\u0f1f\u0f25\u0003\u0412\u0209\u0000\u0f20"+
		"\u0f25\u0003\u03fe\u01ff\u0000\u0f21\u0f25\u0003\u041a\u020d\u0000\u0f22"+
		"\u0f25\u0003\u0338\u019c\u0000\u0f23\u0f25\u0003\u03a0\u01d0\u0000\u0f24"+
		"\u0f1e\u0001\u0000\u0000\u0000\u0f24\u0f1f\u0001\u0000\u0000\u0000\u0f24"+
		"\u0f20\u0001\u0000\u0000\u0000\u0f24\u0f21\u0001\u0000\u0000\u0000\u0f24"+
		"\u0f22\u0001\u0000\u0000\u0000\u0f24\u0f23\u0001\u0000\u0000\u0000\u0f25"+
		"\u0335\u0001\u0000\u0000\u0000\u0f26\u0f27\u0003\u0332\u0199\u0000\u0f27"+
		"\u0337\u0001\u0000\u0000\u0000\u0f28\u0f2e\u0003\u033a\u019d\u0000\u0f29"+
		"\u0f2e\u0003\u033c\u019e\u0000\u0f2a\u0f2e\u0003\u033e\u019f\u0000\u0f2b"+
		"\u0f2e\u0003\u0340\u01a0\u0000\u0f2c\u0f2e\u0003\u0342\u01a1\u0000\u0f2d"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f2d\u0f29\u0001\u0000\u0000\u0000\u0f2d"+
		"\u0f2a\u0001\u0000\u0000\u0000\u0f2d\u0f2b\u0001\u0000\u0000\u0000\u0f2d"+
		"\u0f2c\u0001\u0000\u0000\u0000\u0f2e\u0339\u0001\u0000\u0000\u0000\u0f2f"+
		"\u0f30\u0007\u0018\u0000\u0000\u0f30\u0f31\u0005\u0173\u0000\u0000\u0f31"+
		"\u0f32\u0003\u0332\u0199\u0000\u0f32\u0f33\u0005\u0169\u0000\u0000\u0f33"+
		"\u0f34\u0003\u03fa\u01fd\u0000\u0f34\u0f35\u0005\u017e\u0000\u0000\u0f35"+
		"\u033b\u0001\u0000\u0000\u0000\u0f36\u0f37\u0005\u00d2\u0000\u0000\u0f37"+
		"\u0f38\u0005\u0173\u0000\u0000\u0f38\u0f39\u0003\u03f0\u01f8\u0000\u0f39"+
		"\u0f3a\u0005\u017e\u0000\u0000\u0f3a\u033d\u0001\u0000\u0000\u0000\u0f3b"+
		"\u0f3c\u0007\u0019\u0000\u0000\u0f3c\u0f3d\u0005\u0173\u0000\u0000\u0f3d"+
		"\u0f3e\u0003\u0332\u0199\u0000\u0f3e\u0f3f\u0005\u017e\u0000\u0000\u0f3f"+
		"\u033f\u0001\u0000\u0000\u0000\u0f40\u0f41\u0007\u001a\u0000\u0000\u0f41"+
		"\u0f42\u0005\u0173\u0000\u0000\u0f42\u0f45\u0003\u0332\u0199\u0000\u0f43"+
		"\u0f44\u0005\u0169\u0000\u0000\u0f44\u0f46\u0003\u0332\u0199\u0000\u0f45"+
		"\u0f43\u0001\u0000\u0000\u0000\u0f45\u0f46\u0001\u0000\u0000\u0000\u0f46"+
		"\u0f47\u0001\u0000\u0000\u0000\u0f47\u0f48\u0005\u017e\u0000\u0000\u0f48"+
		"\u0341\u0001\u0000\u0000\u0000\u0f49\u0f4a\u0005\u0097\u0000\u0000\u0f4a"+
		"\u0f4b\u0005\u0173\u0000\u0000\u0f4b\u0f4e\u0003\u0332\u0199\u0000\u0f4c"+
		"\u0f4d\u0005\u0169\u0000\u0000\u0f4d\u0f4f\u0003\u03f8\u01fc\u0000\u0f4e"+
		"\u0f4c\u0001\u0000\u0000\u0000\u0f4e\u0f4f\u0001\u0000\u0000\u0000\u0f4f"+
		"\u0f50\u0001\u0000\u0000\u0000\u0f50\u0f51\u0005\u017e\u0000\u0000\u0f51"+
		"\u0343\u0001\u0000\u0000\u0000\u0f52\u0f53\u0003\u034a\u01a5\u0000\u0f53"+
		"\u0345\u0001\u0000\u0000\u0000\u0f54\u0f55\u0003\u034a\u01a5\u0000\u0f55"+
		"\u0347\u0001\u0000\u0000\u0000\u0f56\u0f57\u0003\u0332\u0199\u0000\u0f57"+
		"\u0349\u0001\u0000\u0000\u0000\u0f58\u0f59\u0006\u01a5\uffff\uffff\u0000"+
		"\u0f59\u0f64\u0003\u034c\u01a6\u0000\u0f5a\u0f64\u0003\u037e\u01bf\u0000"+
		"\u0f5b\u0f64\u0003\u0352\u01a9\u0000\u0f5c\u0f64\u0003\u0394\u01ca\u0000"+
		"\u0f5d\u0f64\u0003\u035c\u01ae\u0000\u0f5e\u0f64\u0003\u035e\u01af\u0000"+
		"\u0f5f\u0f64\u0003\u0378\u01bc\u0000\u0f60\u0f64\u0003\u038e\u01c7\u0000"+
		"\u0f61\u0f64\u0003\u035a\u01ad\u0000\u0f62\u0f64\u0003\u0390\u01c8\u0000"+
		"\u0f63\u0f58\u0001\u0000\u0000\u0000\u0f63\u0f5a\u0001\u0000\u0000\u0000"+
		"\u0f63\u0f5b\u0001\u0000\u0000\u0000\u0f63\u0f5c\u0001\u0000\u0000\u0000"+
		"\u0f63\u0f5d\u0001\u0000\u0000\u0000\u0f63\u0f5e\u0001\u0000\u0000\u0000"+
		"\u0f63\u0f5f\u0001\u0000\u0000\u0000\u0f63\u0f60\u0001\u0000\u0000\u0000"+
		"\u0f63\u0f61\u0001\u0000\u0000\u0000\u0f63\u0f62\u0001\u0000\u0000\u0000"+
		"\u0f64\u0f6a\u0001\u0000\u0000\u0000\u0f65\u0f66\n\u0007\u0000\u0000\u0f66"+
		"\u0f67\u0005\u0177\u0000\u0000\u0f67\u0f69\u0003\u043a\u021d\u0000\u0f68"+
		"\u0f65\u0001\u0000\u0000\u0000\u0f69\u0f6c\u0001\u0000\u0000\u0000\u0f6a"+
		"\u0f68\u0001\u0000\u0000\u0000\u0f6a\u0f6b\u0001\u0000\u0000\u0000\u0f6b"+
		"\u034b\u0001\u0000\u0000\u0000\u0f6c\u0f6a\u0001\u0000\u0000\u0000\u0f6d"+
		"\u0f6e\u0005\u0173\u0000\u0000\u0f6e\u0f6f\u0003\u0332\u0199\u0000\u0f6f"+
		"\u0f70\u0005\u017e\u0000\u0000\u0f70\u034d\u0001\u0000\u0000\u0000\u0f71"+
		"\u0f74\u0003\u0350\u01a8\u0000\u0f72\u0f74\u0003\u0390\u01c8\u0000\u0f73"+
		"\u0f71\u0001\u0000\u0000\u0000\u0f73\u0f72\u0001\u0000\u0000\u0000\u0f74"+
		"\u034f\u0001\u0000\u0000\u0000\u0f75\u0f82\u0003\u037e\u01bf\u0000\u0f76"+
		"\u0f82\u0003\u0352\u01a9\u0000\u0f77\u0f82\u0003\u0394\u01ca\u0000\u0f78"+
		"\u0f79\u0003\u034a\u01a5\u0000\u0f79\u0f7a\u0005\u0177\u0000\u0000\u0f7a"+
		"\u0f7b\u0003\u043a\u021d\u0000\u0f7b\u0f82\u0001\u0000\u0000\u0000\u0f7c"+
		"\u0f82\u0003\u035c\u01ae\u0000\u0f7d\u0f82\u0003\u035e\u01af\u0000\u0f7e"+
		"\u0f82\u0003\u0378\u01bc\u0000\u0f7f\u0f82\u0003\u038e\u01c7\u0000\u0f80"+
		"\u0f82\u0003\u035a\u01ad\u0000\u0f81\u0f75\u0001\u0000\u0000\u0000\u0f81"+
		"\u0f76\u0001\u0000\u0000\u0000\u0f81\u0f77\u0001\u0000\u0000\u0000\u0f81"+
		"\u0f78\u0001\u0000\u0000\u0000\u0f81\u0f7c\u0001\u0000\u0000\u0000\u0f81"+
		"\u0f7d\u0001\u0000\u0000\u0000\u0f81\u0f7e\u0001\u0000\u0000\u0000\u0f81"+
		"\u0f7f\u0001\u0000\u0000\u0000\u0f81\u0f80\u0001\u0000\u0000\u0000\u0f82"+
		"\u0351\u0001\u0000\u0000\u0000\u0f83\u0f86\u0003\u0446\u0223\u0000\u0f84"+
		"\u0f86\u0003\u0356\u01ab\u0000\u0f85\u0f83\u0001\u0000\u0000\u0000\u0f85"+
		"\u0f84\u0001\u0000\u0000\u0000\u0f86\u0353\u0001\u0000\u0000\u0000\u0f87"+
		"\u0f8a\u0003\u0464\u0232\u0000\u0f88\u0f8a\u0003\u0358\u01ac\u0000\u0f89"+
		"\u0f87\u0001\u0000\u0000\u0000\u0f89\u0f88\u0001\u0000\u0000\u0000\u0f8a"+
		"\u0355\u0001\u0000\u0000\u0000\u0f8b\u0f8e\u0003\u0358\u01ac\u0000\u0f8c"+
		"\u0f8e\u0005\u00bd\u0000\u0000\u0f8d\u0f8b\u0001\u0000\u0000\u0000\u0f8d"+
		"\u0f8c\u0001\u0000\u0000\u0000\u0f8e\u0357\u0001\u0000\u0000\u0000\u0f8f"+
		"\u0f90\u0005\u0147\u0000\u0000\u0f90\u0359\u0001\u0000\u0000\u0000\u0f91"+
		"\u0f92\u0005\u0082\u0000\u0000\u0f92\u0f93\u0003\u00e2q\u0000\u0f93\u0f94"+
		"\u0005m\u0000\u0000\u0f94\u0f95\u0003\u0332\u0199\u0000\u0f95\u0f96\u0005"+
		"W\u0000\u0000\u0f96\u035b\u0001\u0000\u0000\u0000\u0f97\u0f98\u0005\u00e1"+
		"\u0000\u0000\u0f98\u0f99\u00038\u001c\u0000\u0f99\u035d\u0001\u0000\u0000"+
		"\u0000\u0f9a\u0f9d\u0003\u0360\u01b0\u0000\u0f9b\u0f9d\u0003\u0362\u01b1"+
		"\u0000\u0f9c\u0f9a\u0001\u0000\u0000\u0000\u0f9c\u0f9b\u0001\u0000\u0000"+
		"\u0000\u0f9d\u035f\u0001\u0000\u0000\u0000\u0f9e\u0f9f\u0005\u009c\u0000"+
		"\u0000\u0f9f\u0fa0\u0005\u0173\u0000\u0000\u0fa0\u0fa1\u0003\u0332\u0199"+
		"\u0000\u0fa1\u0fa2\u0005\u0169\u0000\u0000\u0fa2\u0fa3\u0003\u0332\u0199"+
		"\u0000\u0fa3\u0fa4\u0005\u017e\u0000\u0000\u0fa4\u0fb1\u0001\u0000\u0000"+
		"\u0000\u0fa5\u0fa6\u00057\u0000\u0000\u0fa6\u0fa7\u0005\u0173\u0000\u0000"+
		"\u0fa7\u0faa\u0003\u0332\u0199\u0000\u0fa8\u0fa9\u0005\u0169\u0000\u0000"+
		"\u0fa9\u0fab\u0003\u0332\u0199\u0000\u0faa\u0fa8\u0001\u0000\u0000\u0000"+
		"\u0fab\u0fac\u0001\u0000\u0000\u0000\u0fac\u0faa\u0001\u0000\u0000\u0000"+
		"\u0fac\u0fad\u0001\u0000\u0000\u0000\u0fad\u0fae\u0001\u0000\u0000\u0000"+
		"\u0fae\u0faf\u0005\u017e\u0000\u0000\u0faf\u0fb1\u0001\u0000\u0000\u0000"+
		"\u0fb0\u0f9e\u0001\u0000\u0000\u0000\u0fb0\u0fa5\u0001\u0000\u0000\u0000"+
		"\u0fb1\u0361\u0001\u0000\u0000\u0000\u0fb2\u0fb5\u0003\u0364\u01b2\u0000"+
		"\u0fb3\u0fb5\u0003\u0366\u01b3\u0000\u0fb4\u0fb2\u0001\u0000\u0000\u0000"+
		"\u0fb4\u0fb3\u0001\u0000\u0000\u0000\u0fb5\u0363\u0001\u0000\u0000\u0000"+
		"\u0fb6\u0fb7\u0005.\u0000\u0000\u0fb7\u0fb9\u0003\u036e\u01b7\u0000\u0fb8"+
		"\u0fba\u0003\u0368\u01b4\u0000\u0fb9\u0fb8\u0001\u0000\u0000\u0000\u0fba"+
		"\u0fbb\u0001\u0000\u0000\u0000\u0fbb\u0fb9\u0001\u0000\u0000\u0000\u0fbb"+
		"\u0fbc\u0001\u0000\u0000\u0000\u0fbc\u0fbe\u0001\u0000\u0000\u0000\u0fbd"+
		"\u0fbf\u0003\u036c\u01b6\u0000\u0fbe\u0fbd\u0001\u0000\u0000\u0000\u0fbe"+
		"\u0fbf\u0001\u0000\u0000\u0000\u0fbf\u0fc0\u0001\u0000\u0000\u0000\u0fc0"+
		"\u0fc1\u0005W\u0000\u0000\u0fc1\u0365\u0001\u0000\u0000\u0000\u0fc2\u0fc4"+
		"\u0005.\u0000\u0000\u0fc3\u0fc5\u0003\u036a\u01b5\u0000\u0fc4\u0fc3\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fc6\u0001\u0000\u0000\u0000\u0fc6\u0fc4\u0001"+
		"\u0000\u0000\u0000\u0fc6\u0fc7\u0001\u0000\u0000\u0000\u0fc7\u0fc9\u0001"+
		"\u0000\u0000\u0000\u0fc8\u0fca\u0003\u036c\u01b6\u0000\u0fc9\u0fc8\u0001"+
		"\u0000\u0000\u0000\u0fc9\u0fca\u0001\u0000\u0000\u0000\u0fca\u0fcb\u0001"+
		"\u0000\u0000\u0000\u0fcb\u0fcc\u0005W\u0000\u0000\u0fcc\u0367\u0001\u0000"+
		"\u0000\u0000\u0fcd\u0fce\u0005\u00e5\u0000\u0000\u0fce\u0fcf\u0003\u0370"+
		"\u01b8\u0000\u0fcf\u0fd0\u0005\u00ce\u0000\u0000\u0fd0\u0fd1\u0003\u0374"+
		"\u01ba\u0000\u0fd1\u0369\u0001\u0000\u0000\u0000\u0fd2\u0fd3\u0005\u00e5"+
		"\u0000\u0000\u0fd3\u0fd4\u0003\u0304\u0182\u0000\u0fd4\u0fd5\u0005\u00ce"+
		"\u0000\u0000\u0fd5\u0fd6\u0003\u0374\u01ba\u0000\u0fd6\u036b\u0001\u0000"+
		"\u0000\u0000\u0fd7\u0fd8\u0005V\u0000\u0000\u0fd8\u0fd9\u0003\u0374\u01ba"+
		"\u0000\u0fd9\u036d\u0001\u0000\u0000\u0000\u0fda\u0fdd\u0003\u034e\u01a7"+
		"\u0000\u0fdb\u0fdd\u0003\u01ae\u00d7\u0000\u0fdc\u0fda\u0001\u0000\u0000"+
		"\u0000\u0fdc\u0fdb\u0001\u0000\u0000\u0000\u0fdd\u036f\u0001\u0000\u0000"+
		"\u0000\u0fde\u0fe3\u0003\u0372\u01b9\u0000\u0fdf\u0fe0\u0005\u0169\u0000"+
		"\u0000\u0fe0\u0fe2\u0003\u0372\u01b9\u0000\u0fe1\u0fdf\u0001\u0000\u0000"+
		"\u0000\u0fe2\u0fe5\u0001\u0000\u0000\u0000\u0fe3\u0fe1\u0001\u0000\u0000"+
		"\u0000\u0fe3\u0fe4\u0001\u0000\u0000\u0000\u0fe4\u0371\u0001\u0000\u0000"+
		"\u0000\u0fe5\u0fe3\u0001\u0000\u0000\u0000\u0fe6\u0ff0\u0003\u034e\u01a7"+
		"\u0000\u0fe7\u0ff0\u0003\u0308\u0184\u0000\u0fe8\u0ff0\u0003\u0310\u0188"+
		"\u0000\u0fe9\u0ff0\u0003\u0314\u018a\u0000\u0fea\u0ff0\u0003\u0316\u018b"+
		"\u0000\u0feb\u0ff0\u0003\u031a\u018d\u0000\u0fec\u0ff0\u0003\u031e\u018f"+
		"\u0000\u0fed\u0ff0\u0003\u0326\u0193\u0000\u0fee\u0ff0\u0003\u0328\u0194"+
		"\u0000\u0fef\u0fe6\u0001\u0000\u0000\u0000\u0fef\u0fe7\u0001\u0000\u0000"+
		"\u0000\u0fef\u0fe8\u0001\u0000\u0000\u0000\u0fef\u0fe9\u0001\u0000\u0000"+
		"\u0000\u0fef\u0fea\u0001\u0000\u0000\u0000\u0fef\u0feb\u0001\u0000\u0000"+
		"\u0000\u0fef\u0fec\u0001\u0000\u0000\u0000\u0fef\u0fed\u0001\u0000\u0000"+
		"\u0000\u0fef\u0fee\u0001\u0000\u0000\u0000\u0ff0\u0373\u0001\u0000\u0000"+
		"\u0000\u0ff1\u0ff4\u0003\u0376\u01bb\u0000\u0ff2\u0ff4\u0003\u0468\u0234"+
		"\u0000\u0ff3\u0ff1\u0001\u0000\u0000\u0000\u0ff3\u0ff2\u0001\u0000\u0000"+
		"\u0000\u0ff4\u0375\u0001\u0000\u0000\u0000\u0ff5\u0ff6\u0003\u0332\u0199"+
		"\u0000\u0ff6\u0377\u0001\u0000\u0000\u0000\u0ff7\u0ff8\u0005/\u0000\u0000"+
		"\u0ff8\u0ff9\u0005\u0173\u0000\u0000\u0ff9\u0ffa\u0003\u037a\u01bd\u0000"+
		"\u0ffa\u0ffb\u0005\u001b\u0000\u0000\u0ffb\u0ffc\u0003\u037c\u01be\u0000"+
		"\u0ffc\u0ffd\u0005\u017e\u0000\u0000\u0ffd\u0379\u0001\u0000\u0000\u0000"+
		"\u0ffe\u1001\u0003\u0332\u0199\u0000\u0fff\u1001\u0003\u0468\u0234\u0000"+
		"\u1000\u0ffe\u0001\u0000\u0000\u0000\u1000\u0fff\u0001\u0000\u0000\u0000"+
		"\u1001\u037b\u0001\u0000\u0000\u0000\u1002\u1003\u0003\u02a0\u0150\u0000"+
		"\u1003\u037d\u0001\u0000\u0000\u0000\u1004\u1005\u0005>\u0000\u0000\u1005"+
		"\u1006\u0005\u0173\u0000\u0000\u1006\u1007\u0005\u0167\u0000\u0000\u1007"+
		"\u100b\u0005\u017e\u0000\u0000\u1008\u100b\u0003\u0380\u01c0\u0000\u1009"+
		"\u100b\u0003\u0382\u01c1\u0000\u100a\u1004\u0001\u0000\u0000\u0000\u100a"+
		"\u1008\u0001\u0000\u0000\u0000\u100a\u1009\u0001\u0000\u0000\u0000\u100b"+
		"\u037f\u0001\u0000\u0000\u0000\u100c\u100d\u0003\u0384\u01c2\u0000\u100d"+
		"\u100f\u0005\u0173\u0000\u0000\u100e\u1010\u0003\u0386\u01c3\u0000\u100f"+
		"\u100e\u0001\u0000\u0000\u0000\u100f\u1010\u0001\u0000\u0000\u0000\u1010"+
		"\u1011\u0001\u0000\u0000\u0000\u1011\u1012\u0003\u0332\u0199\u0000\u1012"+
		"\u1013\u0005\u017e\u0000\u0000\u1013\u0381\u0001\u0000\u0000\u0000\u1014"+
		"\u1015\u0003\u0388\u01c4\u0000\u1015\u1016\u0005\u0173\u0000\u0000\u1016"+
		"\u1017\u0003\u038a\u01c5\u0000\u1017\u1018\u0005\u0169\u0000\u0000\u1018"+
		"\u1019\u0003\u038c\u01c6\u0000\u1019\u101a\u0005\u017e\u0000\u0000\u101a"+
		"\u0383\u0001\u0000\u0000\u0000\u101b\u101c\u0007\u001b\u0000\u0000\u101c"+
		"\u0385\u0001\u0000\u0000\u0000\u101d\u101e\u0007\u001c\u0000\u0000\u101e"+
		"\u0387\u0001\u0000\u0000\u0000\u101f\u1020\u0007\u001d\u0000\u0000\u1020"+
		"\u0389\u0001\u0000\u0000\u0000\u1021\u1023\u0003\u0386\u01c3\u0000\u1022"+
		"\u1021\u0001\u0000\u0000\u0000\u1022\u1023\u0001\u0000\u0000\u0000\u1023"+
		"\u1024\u0001\u0000\u0000\u0000\u1024\u1025\u0003\u03b8\u01dc\u0000\u1025"+
		"\u038b\u0001\u0000\u0000\u0000\u1026\u1027\u0003\u03b8\u01dc\u0000\u1027"+
		"\u038d\u0001\u0000\u0000\u0000\u1028\u1029\u0005U\u0000\u0000\u1029\u102a"+
		"\u0005\u0173\u0000\u0000\u102a\u102b\u0003\u01ae\u00d7\u0000\u102b\u102c"+
		"\u0005\u017e\u0000\u0000\u102c\u038f\u0001\u0000\u0000\u0000\u102d\u102e"+
		"\u0003\u0444\u0222\u0000\u102e\u0391\u0001\u0000\u0000\u0000\u102f\u1030"+
		"\u0003\u0332\u0199\u0000\u1030\u0393\u0001\u0000\u0000\u0000\u1031\u1032"+
		"\u0003\u0396\u01cb\u0000\u1032\u0395\u0001\u0000\u0000\u0000\u1033\u1034"+
		"\u0005\u00a6\u0000\u0000\u1034\u1035\u0005\u0172\u0000\u0000\u1035\u1036"+
		"\u0003\u0398\u01cc\u0000\u1036\u1037\u0005\u017d\u0000\u0000\u1037\u0397"+
		"\u0001\u0000\u0000\u0000\u1038\u103c\u0003\u039a\u01cd\u0000\u1039\u103b"+
		"\u0003\u039c\u01ce\u0000\u103a\u1039\u0001\u0000\u0000\u0000\u103b\u103e"+
		"\u0001\u0000\u0000\u0000\u103c\u103a\u0001\u0000\u0000\u0000\u103c\u103d"+
		"\u0001\u0000\u0000\u0000\u103d\u0399\u0001\u0000\u0000\u0000\u103e\u103c"+
		"\u0001\u0000\u0000\u0000\u103f\u1040\u0003\u0344\u01a2\u0000\u1040\u039b"+
		"\u0001\u0000\u0000\u0000\u1041\u1042\u0005\u0169\u0000\u0000\u1042\u1043"+
		"\u0003\u0346\u01a3\u0000\u1043\u1044\u0005\u0169\u0000\u0000\u1044\u1045"+
		"\u0003\u0344\u01a2\u0000\u1045\u039d\u0001\u0000\u0000\u0000\u1046\u1047"+
		"\u0003\u0332\u0199\u0000\u1047\u039f\u0001\u0000\u0000\u0000\u1048\u104b"+
		"\u0003\u03a2\u01d1\u0000\u1049\u104b\u0003\u03a4\u01d2\u0000\u104a\u1048"+
		"\u0001\u0000\u0000\u0000\u104a\u1049\u0001\u0000\u0000\u0000\u104b\u03a1"+
		"\u0001\u0000\u0000\u0000\u104c\u104d\u0005\u00d2\u0000\u0000\u104d\u104e"+
		"\u0005\u0173\u0000\u0000\u104e\u104f\u0003\u039e\u01cf\u0000\u104f\u1050"+
		"\u0005\u0169\u0000\u0000\u1050\u1051\u0003\u03b8\u01dc\u0000\u1051\u1052"+
		"\u0005\u017e\u0000\u0000\u1052\u03a3\u0001\u0000\u0000\u0000\u1053\u1054"+
		"\u0005\u011f\u0000\u0000\u1054\u1055\u0005\u0173\u0000\u0000\u1055\u1056"+
		"\u0003\u0392\u01c9\u0000\u1056\u1057\u0005\u017e\u0000\u0000\u1057\u03a5"+
		"\u0001\u0000\u0000\u0000\u1058\u1059\u0003\u03a8\u01d4\u0000\u1059\u03a7"+
		"\u0001\u0000\u0000\u0000\u105a\u105c\u0003\u02f6\u017b\u0000\u105b\u105a"+
		"\u0001\u0000\u0000\u0000\u105b\u105c\u0001\u0000\u0000\u0000\u105c\u105d"+
		"\u0001\u0000\u0000\u0000\u105d\u105f\u0005\u0172\u0000\u0000\u105e\u1060"+
		"\u0003\u03aa\u01d5\u0000\u105f\u105e\u0001\u0000\u0000\u0000\u105f\u1060"+
		"\u0001\u0000\u0000\u0000\u1060\u1061\u0001\u0000\u0000\u0000\u1061\u1062"+
		"\u0005\u017d\u0000\u0000\u1062\u03a9\u0001\u0000\u0000\u0000\u1063\u1068"+
		"\u0003\u03ac\u01d6\u0000\u1064\u1065\u0005\u0169\u0000\u0000\u1065\u1067"+
		"\u0003\u03ac\u01d6\u0000\u1066\u1064\u0001\u0000\u0000\u0000\u1067\u106a"+
		"\u0001\u0000\u0000\u0000\u1068\u1066\u0001\u0000\u0000\u0000\u1068\u1069"+
		"\u0001\u0000\u0000\u0000\u1069\u03ab\u0001\u0000\u0000\u0000\u106a\u1068"+
		"\u0001\u0000\u0000\u0000\u106b\u106c\u0003\u0332\u0199\u0000\u106c\u03ad"+
		"\u0001\u0000\u0000\u0000\u106d\u106f\u0005\u00b0\u0000\u0000\u106e\u106d"+
		"\u0001\u0000\u0000\u0000\u106e\u106f\u0001\u0000\u0000\u0000\u106f\u1070"+
		"\u0001\u0000\u0000\u0000\u1070\u1071\u0003\u03b0\u01d8\u0000\u1071\u03af"+
		"\u0001\u0000\u0000\u0000\u1072\u1074\u0005\u0171\u0000\u0000\u1073\u1075"+
		"\u0003\u03b2\u01d9\u0000\u1074\u1073\u0001\u0000\u0000\u0000\u1074\u1075"+
		"\u0001\u0000\u0000\u0000\u1075\u1076\u0001\u0000\u0000\u0000\u1076\u1077"+
		"\u0005\u017c\u0000\u0000\u1077\u03b1\u0001\u0000\u0000\u0000\u1078\u107d"+
		"\u0003\u03b4\u01da\u0000\u1079\u107a\u0005\u0169\u0000\u0000\u107a\u107c"+
		"\u0003\u03b4\u01da\u0000\u107b\u1079\u0001\u0000\u0000\u0000\u107c\u107f"+
		"\u0001\u0000\u0000\u0000\u107d\u107b\u0001\u0000\u0000\u0000\u107d\u107e"+
		"\u0001\u0000\u0000\u0000\u107e\u03b3\u0001\u0000\u0000\u0000\u107f\u107d"+
		"\u0001\u0000\u0000\u0000\u1080\u1081\u0003\u043c\u021e\u0000\u1081\u1082"+
		"\u0005\u0168\u0000\u0000\u1082\u1083\u0003\u0332\u0199\u0000\u1083\u03b5"+
		"\u0001\u0000\u0000\u0000\u1084\u1085\u0005\u0002\u0000\u0000\u1085\u03b7"+
		"\u0001\u0000\u0000\u0000\u1086\u1087\u0006\u01dc\uffff\uffff\u0000\u1087"+
		"\u1088\u0007\u0015\u0000\u0000\u1088\u108c\u0003\u03b8\u01dc\u0005\u1089"+
		"\u108c\u0003\u034a\u01a5\u0000\u108a\u108c\u0003\u03ba\u01dd\u0000\u108b"+
		"\u1086\u0001\u0000\u0000\u0000\u108b\u1089\u0001\u0000\u0000\u0000\u108b"+
		"\u108a\u0001\u0000\u0000\u0000\u108c\u1095\u0001\u0000\u0000\u0000\u108d"+
		"\u108e\n\u0004\u0000\u0000\u108e\u108f\u0007\u0016\u0000\u0000\u108f\u1094"+
		"\u0003\u03b8\u01dc\u0005\u1090\u1091\n\u0003\u0000\u0000\u1091\u1092\u0007"+
		"\u0015\u0000\u0000\u1092\u1094\u0003\u03b8\u01dc\u0004\u1093\u108d\u0001"+
		"\u0000\u0000\u0000\u1093\u1090\u0001\u0000\u0000\u0000\u1094\u1097\u0001"+
		"\u0000\u0000\u0000\u1095\u1093\u0001\u0000\u0000\u0000\u1095\u1096\u0001"+
		"\u0000\u0000\u0000\u1096\u03b9\u0001\u0000\u0000\u0000\u1097\u1095\u0001"+
		"\u0000\u0000\u0000\u1098\u10a6\u0003\u03bc\u01de\u0000\u1099\u10a6\u0003"+
		"\u03be\u01df\u0000\u109a\u10a6\u0003\u03c8\u01e4\u0000\u109b\u10a6\u0003"+
		"\u03ca\u01e5\u0000\u109c\u10a6\u0003\u03d0\u01e8\u0000\u109d\u10a6\u0003"+
		"\u03d4\u01ea\u0000\u109e\u10a6\u0003\u03da\u01ed\u0000\u109f\u10a6\u0003"+
		"\u03dc\u01ee\u0000\u10a0\u10a6\u0003\u03de\u01ef\u0000\u10a1\u10a6\u0003"+
		"\u03e0\u01f0\u0000\u10a2\u10a6\u0003\u03e6\u01f3\u0000\u10a3\u10a6\u0003"+
		"\u03e8\u01f4\u0000\u10a4\u10a6\u0003\u03ea\u01f5\u0000\u10a5\u1098\u0001"+
		"\u0000\u0000\u0000\u10a5\u1099\u0001\u0000\u0000\u0000\u10a5\u109a\u0001"+
		"\u0000\u0000\u0000\u10a5\u109b\u0001\u0000\u0000\u0000\u10a5\u109c\u0001"+
		"\u0000\u0000\u0000\u10a5\u109d\u0001\u0000\u0000\u0000\u10a5\u109e\u0001"+
		"\u0000\u0000\u0000\u10a5\u109f\u0001\u0000\u0000\u0000\u10a5\u10a0\u0001"+
		"\u0000\u0000\u0000\u10a5\u10a1\u0001\u0000\u0000\u0000\u10a5\u10a2\u0001"+
		"\u0000\u0000\u0000\u10a5\u10a3\u0001\u0000\u0000\u0000\u10a5\u10a4\u0001"+
		"\u0000\u0000\u0000\u10a6\u03bb\u0001\u0000\u0000\u0000\u10a7\u10ab\u0003"+
		"\u03c2\u01e1\u0000\u10a8\u10ab\u0003\u03c4\u01e2\u0000\u10a9\u10ab\u0003"+
		"\u03c6\u01e3\u0000\u10aa\u10a7\u0001\u0000\u0000\u0000\u10aa\u10a8\u0001"+
		"\u0000\u0000\u0000\u10aa\u10a9\u0001\u0000\u0000\u0000\u10ab\u03bd\u0001"+
		"\u0000\u0000\u0000\u10ac\u10ad\u0005-\u0000\u0000\u10ad\u10ae\u0005\u0173"+
		"\u0000\u0000\u10ae\u10af\u0003\u03c0\u01e0\u0000\u10af\u10b0\u0005\u017e"+
		"\u0000\u0000\u10b0\u10b7\u0001\u0000\u0000\u0000\u10b1\u10b2\u0005\u00c2"+
		"\u0000\u0000\u10b2\u10b3\u0005\u0173\u0000\u0000\u10b3\u10b4\u0003\u039e"+
		"\u01cf\u0000\u10b4\u10b5\u0005\u017e\u0000\u0000\u10b5\u10b7\u0001\u0000"+
		"\u0000\u0000\u10b6\u10ac\u0001\u0000\u0000\u0000\u10b6\u10b1\u0001\u0000"+
		"\u0000\u0000\u10b7\u03bf\u0001\u0000\u0000\u0000\u10b8\u10b9\u0003\u0332"+
		"\u0199\u0000\u10b9\u03c1\u0001\u0000\u0000\u0000\u10ba\u10bb\u0007\u001e"+
		"\u0000\u0000\u10bb\u10bc\u0005\u0173\u0000\u0000\u10bc\u10bd\u0003\u03ec"+
		"\u01f6\u0000\u10bd\u10be\u0005\u017e\u0000\u0000\u10be\u03c3\u0001\u0000"+
		"\u0000\u0000\u10bf\u10c0\u0007\u001f\u0000\u0000\u10c0\u10c1\u0005\u0173"+
		"\u0000\u0000\u10c1\u10c2\u0003\u03ee\u01f7\u0000\u10c2\u10c3\u0005\u017e"+
		"\u0000\u0000\u10c3\u03c5\u0001\u0000\u0000\u0000\u10c4\u10c5\u0005\u00a7"+
		"\u0000\u0000\u10c5\u10c6\u0005\u0173\u0000\u0000\u10c6\u10c7\u0003\u0392"+
		"\u01c9\u0000\u10c7\u10c8\u0005\u017e\u0000\u0000\u10c8\u03c7\u0001\u0000"+
		"\u0000\u0000\u10c9\u10ca\u0005\u0014\u0000\u0000\u10ca\u10cb\u0005\u0173"+
		"\u0000\u0000\u10cb\u10cc\u0003\u0332\u0199\u0000\u10cc\u10cd\u0005\u017e"+
		"\u0000\u0000\u10cd\u03c9\u0001\u0000\u0000\u0000\u10ce\u10cf\u0005\u0093"+
		"\u0000\u0000\u10cf\u10d0\u0005\u0173\u0000\u0000\u10d0\u10d1\u0003\u03cc"+
		"\u01e6\u0000\u10d1\u10d2\u0005\u0169\u0000\u0000\u10d2\u10d3\u0003\u03ce"+
		"\u01e7\u0000\u10d3\u10d4\u0005\u017e\u0000\u0000\u10d4\u03cb\u0001\u0000"+
		"\u0000\u0000\u10d5\u10d6\u0003\u03b8\u01dc\u0000\u10d6\u03cd\u0001\u0000"+
		"\u0000\u0000\u10d7\u10d8\u0003\u03b8\u01dc\u0000\u10d8\u03cf\u0001\u0000"+
		"\u0000\u0000\u10d9\u10da\u0003\u03d2\u01e9\u0000\u10da\u10db\u0005\u0173"+
		"\u0000\u0000\u10db\u10dc\u0003\u03b8\u01dc\u0000\u10dc\u10dd\u0005\u017e"+
		"\u0000\u0000\u10dd\u03d1\u0001\u0000\u0000\u0000\u10de\u10df\u0007 \u0000"+
		"\u0000\u10df\u03d3\u0001\u0000\u0000\u0000\u10e0\u10e1\u0005\u008b\u0000"+
		"\u0000\u10e1\u10e2\u0005\u0173\u0000\u0000\u10e2\u10e3\u0003\u03d6\u01eb"+
		"\u0000\u10e3\u10e4\u0005\u0169\u0000\u0000\u10e4\u10e5\u0003\u03d8\u01ec"+
		"\u0000\u10e5\u10e6\u0005\u017e\u0000\u0000\u10e6\u03d5\u0001\u0000\u0000"+
		"\u0000\u10e7\u10e8\u0003\u03b8\u01dc\u0000\u10e8\u03d7\u0001\u0000\u0000"+
		"\u0000\u10e9\u10ea\u0003\u03b8\u01dc\u0000\u10ea\u03d9\u0001\u0000\u0000"+
		"\u0000\u10eb\u10ec\u0005\u008c\u0000\u0000\u10ec\u10ed\u0005\u0173\u0000"+
		"\u0000\u10ed\u10ee\u0003\u03b8\u01dc\u0000\u10ee\u10ef\u0005\u017e\u0000"+
		"\u0000\u10ef\u03db\u0001\u0000\u0000\u0000\u10f0\u10f1\u0005\u0086\u0000"+
		"\u0000\u10f1\u10f2\u0005\u0173\u0000\u0000\u10f2\u10f3\u0003\u03b8\u01dc"+
		"\u0000\u10f3\u10f4\u0005\u017e\u0000\u0000\u10f4\u03dd\u0001\u0000\u0000"+
		"\u0000\u10f5\u10f6\u0005Z\u0000\u0000\u10f6\u10f7\u0005\u0173\u0000\u0000"+
		"\u10f7\u10f8\u0003\u03b8\u01dc\u0000\u10f8\u10f9\u0005\u017e\u0000\u0000"+
		"\u10f9\u03df\u0001\u0000\u0000\u0000\u10fa\u10fb\u0005\u00ab\u0000\u0000"+
		"\u10fb\u10fc\u0005\u0173\u0000\u0000\u10fc\u10fd\u0003\u03e2\u01f1\u0000"+
		"\u10fd\u10fe\u0005\u0169\u0000\u0000\u10fe\u10ff\u0003\u03e4\u01f2\u0000"+
		"\u10ff\u1100\u0005\u017e\u0000\u0000\u1100\u03e1\u0001\u0000\u0000\u0000"+
		"\u1101\u1102\u0003\u03b8\u01dc\u0000\u1102\u03e3\u0001\u0000\u0000\u0000"+
		"\u1103\u1104\u0003\u03b8\u01dc\u0000\u1104\u03e5\u0001\u0000\u0000\u0000"+
		"\u1105\u1106\u0005\u00c6\u0000\u0000\u1106\u1107\u0005\u0173\u0000\u0000"+
		"\u1107\u1108\u0003\u03b8\u01dc\u0000\u1108\u1109\u0005\u017e\u0000\u0000"+
		"\u1109\u03e7\u0001\u0000\u0000\u0000\u110a\u110b\u0005c\u0000\u0000\u110b"+
		"\u110c\u0005\u0173\u0000\u0000\u110c\u110d\u0003\u03b8\u01dc\u0000\u110d"+
		"\u110e\u0005\u017e\u0000\u0000\u110e\u03e9\u0001\u0000\u0000\u0000\u110f"+
		"\u1110\u0007!\u0000\u0000\u1110\u1111\u0005\u0173\u0000\u0000\u1111\u1112"+
		"\u0003\u03b8\u01dc\u0000\u1112\u1113\u0005\u017e\u0000\u0000\u1113\u03eb"+
		"\u0001\u0000\u0000\u0000\u1114\u1115\u0003\u0332\u0199\u0000\u1115\u03ed"+
		"\u0001\u0000\u0000\u0000\u1116\u1117\u0003\u0332\u0199\u0000\u1117\u03ef"+
		"\u0001\u0000\u0000\u0000\u1118\u111a\u0003\u03f4\u01fa\u0000\u1119\u1118"+
		"\u0001\u0000\u0000\u0000\u1119\u111a\u0001\u0000\u0000\u0000\u111a\u111c"+
		"\u0001\u0000\u0000\u0000\u111b\u111d\u0003\u03f6\u01fb\u0000\u111c\u111b"+
		"\u0001\u0000\u0000\u0000\u111c\u111d\u0001\u0000\u0000\u0000\u111d\u111e"+
		"\u0001\u0000\u0000\u0000\u111e\u1120\u0005e\u0000\u0000\u111f\u1119\u0001"+
		"\u0000\u0000\u0000\u111f\u1120\u0001\u0000\u0000\u0000\u1120\u1121\u0001"+
		"\u0000\u0000\u0000\u1121\u1122\u0003\u03f2\u01f9\u0000\u1122\u03f1\u0001"+
		"\u0000\u0000\u0000\u1123\u1124\u0003\u0332\u0199\u0000\u1124\u03f3\u0001"+
		"\u0000\u0000\u0000\u1125\u1126\u0007\"\u0000\u0000\u1126\u03f5\u0001\u0000"+
		"\u0000\u0000\u1127\u1128\u0003\u0332\u0199\u0000\u1128\u03f7\u0001\u0000"+
		"\u0000\u0000\u1129\u112a\u0007#\u0000\u0000\u112a\u03f9\u0001\u0000\u0000"+
		"\u0000\u112b\u112c\u0003\u03b8\u01dc\u0000\u112c\u03fb\u0001\u0000\u0000"+
		"\u0000\u112d\u112e\u0003\u0332\u0199\u0000\u112e\u03fd\u0001\u0000\u0000"+
		"\u0000\u112f\u1135\u0003\u0400\u0200\u0000\u1130\u1135\u0003\u0402\u0201"+
		"\u0000\u1131\u1135\u0003\u0406\u0203\u0000\u1132\u1135\u0003\u0404\u0202"+
		"\u0000\u1133\u1135\u0003\u0408\u0204\u0000\u1134\u112f\u0001\u0000\u0000"+
		"\u0000\u1134\u1130\u0001\u0000\u0000\u0000\u1134\u1131\u0001\u0000\u0000"+
		"\u0000\u1134\u1132\u0001\u0000\u0000\u0000\u1134\u1133\u0001\u0000\u0000"+
		"\u0000\u1135\u03ff\u0001\u0000\u0000\u0000\u1136\u113e\u0005@\u0000\u0000"+
		"\u1137\u1138\u0005F\u0000\u0000\u1138\u113a\u0005\u0173\u0000\u0000\u1139"+
		"\u113b\u0003\u040a\u0205\u0000\u113a\u1139\u0001\u0000\u0000\u0000\u113a"+
		"\u113b\u0001\u0000\u0000\u0000\u113b\u113c\u0001\u0000\u0000\u0000\u113c"+
		"\u113e\u0005\u017e\u0000\u0000\u113d\u1136\u0001\u0000\u0000\u0000\u113d"+
		"\u1137\u0001\u0000\u0000\u0000\u113e\u0401\u0001\u0000\u0000\u0000\u113f"+
		"\u1147\u0005D\u0000\u0000\u1140\u1141\u0005\u00ed\u0000\u0000\u1141\u1143"+
		"\u0005\u0173\u0000\u0000\u1142\u1144\u0003\u040c\u0206\u0000\u1143\u1142"+
		"\u0001\u0000\u0000\u0000\u1143\u1144\u0001\u0000\u0000\u0000\u1144\u1145"+
		"\u0001\u0000\u0000\u0000\u1145\u1147\u0005\u017e\u0000\u0000\u1146\u113f"+
		"\u0001\u0000\u0000\u0000\u1146\u1140\u0001\u0000\u0000\u0000\u1147\u0403"+
		"\u0001\u0000\u0000\u0000\u1148\u114e\u0005\u0089\u0000\u0000\u1149\u114b"+
		"\u0005\u0173\u0000\u0000\u114a\u114c\u0003\u040c\u0206\u0000\u114b\u114a"+
		"\u0001\u0000\u0000\u0000\u114b\u114c\u0001\u0000\u0000\u0000\u114c\u114d"+
		"\u0001\u0000\u0000\u0000\u114d\u114f\u0005\u017e\u0000\u0000\u114e\u1149"+
		"\u0001\u0000\u0000\u0000\u114e\u114f\u0001\u0000\u0000\u0000\u114f\u0405"+
		"\u0001\u0000\u0000\u0000\u1150\u1158\u0005E\u0000\u0000\u1151\u1152\u0005"+
		"\u00ec\u0000\u0000\u1152\u1154\u0005\u0173\u0000\u0000\u1153\u1155\u0003"+
		"\u040e\u0207\u0000\u1154\u1153\u0001\u0000\u0000\u0000\u1154\u1155\u0001"+
		"\u0000\u0000\u0000\u1155\u1156\u0001\u0000\u0000\u0000\u1156\u1158\u0005"+
		"\u017e\u0000\u0000\u1157\u1150\u0001\u0000\u0000\u0000\u1157\u1151\u0001"+
		"\u0000\u0000\u0000\u1158\u0407\u0001\u0000\u0000\u0000\u1159\u1161\u0005"+
		"\u008a\u0000\u0000\u115a\u115b\u0005\u0088\u0000\u0000\u115b\u115d\u0005"+
		"\u0173\u0000\u0000\u115c\u115e\u0003\u040e\u0207\u0000\u115d\u115c\u0001"+
		"\u0000\u0000\u0000\u115d\u115e\u0001\u0000\u0000\u0000\u115e\u115f\u0001"+
		"\u0000\u0000\u0000\u115f\u1161\u0005\u017e\u0000\u0000\u1160\u1159\u0001"+
		"\u0000\u0000\u0000\u1160\u115a\u0001\u0000\u0000\u0000\u1161\u0409\u0001"+
		"\u0000\u0000\u0000\u1162\u1165\u0003\u046a\u0235\u0000\u1163\u1165\u0003"+
		"\u03ae\u01d7\u0000\u1164\u1162\u0001\u0000\u0000\u0000\u1164\u1163\u0001"+
		"\u0000\u0000\u0000\u1165\u040b\u0001\u0000\u0000\u0000\u1166\u1169\u0003"+
		"\u046c\u0236\u0000\u1167\u1169\u0003\u03ae\u01d7\u0000\u1168\u1166\u0001"+
		"\u0000\u0000\u0000\u1168\u1167\u0001\u0000\u0000\u0000\u1169\u040d\u0001"+
		"\u0000\u0000\u0000\u116a\u116d\u0003\u046e\u0237\u0000\u116b\u116d\u0003"+
		"\u03ae\u01d7\u0000\u116c\u116a\u0001\u0000\u0000\u0000\u116c\u116b\u0001"+
		"\u0000\u0000\u0000\u116d\u040f\u0001\u0000\u0000\u0000\u116e\u116f\u0003"+
		"\u0332\u0199\u0000\u116f\u0411\u0001\u0000\u0000\u0000\u1170\u1171\u0005"+
		"T\u0000\u0000\u1171\u1172\u0005\u0173\u0000\u0000\u1172\u1173\u0003\u0414"+
		"\u020a\u0000\u1173\u1175\u0005\u017e\u0000\u0000\u1174\u1176\u0003\u02d6"+
		"\u016b\u0000\u1175\u1174\u0001\u0000\u0000\u0000\u1175\u1176\u0001\u0000"+
		"\u0000\u0000\u1176\u0413\u0001\u0000\u0000\u0000\u1177\u1178\u0003\u0416"+
		"\u020b\u0000\u1178\u1179\u0005\u0169\u0000\u0000\u1179\u117a\u0003\u0418"+
		"\u020c\u0000\u117a\u0415\u0001\u0000\u0000\u0000\u117b\u117c\u0003\u03fc"+
		"\u01fe\u0000\u117c\u0417\u0001\u0000\u0000\u0000\u117d\u117e\u0003\u03fc"+
		"\u01fe\u0000\u117e\u0419\u0001\u0000\u0000\u0000\u117f\u1182\u0003\u041c"+
		"\u020e\u0000\u1180\u1182\u0003\u03c8\u01e4\u0000\u1181\u117f\u0001\u0000"+
		"\u0000\u0000\u1181\u1180\u0001\u0000\u0000\u0000\u1182\u041b\u0001\u0000"+
		"\u0000\u0000\u1183\u1184\u0005S\u0000\u0000\u1184\u1185\u0005\u0173\u0000"+
		"\u0000\u1185\u1186\u0003\u041e\u020f\u0000\u1186\u1187\u0005\u017e\u0000"+
		"\u0000\u1187\u041d\u0001\u0000\u0000\u0000\u1188\u118b\u0003\u0472\u0239"+
		"\u0000\u1189\u118b\u0003\u03ae\u01d7\u0000\u118a\u1188\u0001\u0000\u0000"+
		"\u0000\u118a\u1189\u0001\u0000\u0000\u0000\u118b\u041f\u0001\u0000\u0000"+
		"\u0000\u118c\u118d\u0003\u0456\u022b\u0000\u118d\u0421\u0001\u0000\u0000"+
		"\u0000\u118e\u118f\u0003\u0458\u022c\u0000\u118f\u0423\u0001\u0000\u0000"+
		"\u0000\u1190\u1191\u0003\u0456\u022b\u0000\u1191\u0425\u0001\u0000\u0000"+
		"\u0000\u1192\u1193\u0003\u0456\u022b\u0000\u1193\u0427\u0001\u0000\u0000"+
		"\u0000\u1194\u1197\u0003\u0458\u022c\u0000\u1195\u1197\u0003\u042a\u0215"+
		"\u0000\u1196\u1194\u0001\u0000\u0000\u0000\u1196\u1195\u0001\u0000\u0000"+
		"\u0000\u1197\u0429\u0001\u0000\u0000\u0000\u1198\u1199\u0007$\u0000\u0000"+
		"\u1199\u042b\u0001\u0000\u0000\u0000\u119a\u119b\u0003\u0456\u022b\u0000"+
		"\u119b\u042d\u0001\u0000\u0000\u0000\u119c\u119d\u0003\u0456\u022b\u0000"+
		"\u119d\u042f\u0001\u0000\u0000\u0000\u119e\u119f\u0003\u0456\u022b\u0000"+
		"\u119f\u0431\u0001\u0000\u0000\u0000\u11a0\u11a3\u0003\u0458\u022c\u0000"+
		"\u11a1\u11a3\u0003\u0434\u021a\u0000\u11a2\u11a0\u0001\u0000\u0000\u0000"+
		"\u11a2\u11a1\u0001\u0000\u0000\u0000\u11a3\u0433\u0001\u0000\u0000\u0000"+
		"\u11a4\u11a5\u0007$\u0000\u0000\u11a5\u0435\u0001\u0000\u0000\u0000\u11a6"+
		"\u11a7\u0003\u0456\u022b\u0000\u11a7\u0437\u0001\u0000\u0000\u0000\u11a8"+
		"\u11a9\u0003\u0456\u022b\u0000\u11a9\u0439\u0001\u0000\u0000\u0000\u11aa"+
		"\u11ab\u0003\u0456\u022b\u0000\u11ab\u043b\u0001\u0000\u0000\u0000\u11ac"+
		"\u11ad\u0003\u0456\u022b\u0000\u11ad\u043d\u0001\u0000\u0000\u0000\u11ae"+
		"\u11af\u0003\u0444\u0222\u0000\u11af\u043f\u0001\u0000\u0000\u0000\u11b0"+
		"\u11b1\u0003\u0444\u0222\u0000\u11b1\u0441\u0001\u0000\u0000\u0000\u11b2"+
		"\u11b3\u0003\u0458\u022c\u0000\u11b3\u0443\u0001\u0000\u0000\u0000\u11b4"+
		"\u11b5\u0003\u0458\u022c\u0000\u11b5\u0445\u0001\u0000\u0000\u0000\u11b6"+
		"\u11b9\u0003\u045e\u022f\u0000\u11b7\u11b9\u0003\u0448\u0224\u0000\u11b8"+
		"\u11b6\u0001\u0000\u0000\u0000\u11b8\u11b7\u0001\u0000\u0000\u0000\u11b9"+
		"\u0447\u0001\u0000\u0000\u0000\u11ba\u11c3\u0005\u0002\u0000\u0000\u11bb"+
		"\u11c3\u0003\u045c\u022e\u0000\u11bc\u11c3\u0005\u0007\u0000\u0000\u11bd"+
		"\u11c3\u0003\u044a\u0225\u0000\u11be\u11c3\u0003\u0470\u0238\u0000\u11bf"+
		"\u11c3\u0003\u0468\u0234\u0000\u11c0\u11c3\u0003\u0452\u0229\u0000\u11c1"+
		"\u11c3\u0003\u0454\u022a\u0000\u11c2\u11ba\u0001\u0000\u0000\u0000\u11c2"+
		"\u11bb\u0001\u0000\u0000\u0000\u11c2\u11bc\u0001\u0000\u0000\u0000\u11c2"+
		"\u11bd\u0001\u0000\u0000\u0000\u11c2\u11be\u0001\u0000\u0000\u0000\u11c2"+
		"\u11bf\u0001\u0000\u0000\u0000\u11c2\u11c0\u0001\u0000\u0000\u0000\u11c2"+
		"\u11c1\u0001\u0000\u0000\u0000\u11c3\u0449\u0001\u0000\u0000\u0000\u11c4"+
		"\u11c8\u0003\u044c\u0226\u0000\u11c5\u11c8\u0003\u044e\u0227\u0000\u11c6"+
		"\u11c8\u0003\u0450\u0228\u0000\u11c7\u11c4\u0001\u0000\u0000\u0000\u11c7"+
		"\u11c5\u0001\u0000\u0000\u0000\u11c7\u11c6\u0001\u0000\u0000\u0000\u11c8"+
		"\u044b\u0001\u0000\u0000\u0000\u11c9\u11ca\u0005F\u0000\u0000\u11ca\u11cb"+
		"\u0003\u046a\u0235\u0000\u11cb\u044d\u0001\u0000\u0000\u0000\u11cc\u11cd"+
		"\u0005\u00cf\u0000\u0000\u11cd\u11ce\u0003\u046c\u0236\u0000\u11ce\u044f"+
		"\u0001\u0000\u0000\u0000\u11cf\u11d0\u0007%\u0000\u0000\u11d0\u11d1\u0003"+
		"\u046e\u0237\u0000\u11d1\u0451\u0001\u0000\u0000\u0000\u11d2\u11d3\u0003"+
		"\u03a8\u01d4\u0000\u11d3\u0453\u0001\u0000\u0000\u0000\u11d4\u11d5\u0003"+
		"\u03ae\u01d7\u0000\u11d5\u0455\u0001\u0000\u0000\u0000\u11d6\u11da\u0003"+
		"\u0458\u022c\u0000\u11d7\u11da\u0005\u0004\u0000\u0000\u11d8\u11da\u0005"+
		"\u0005\u0000\u0000\u11d9\u11d6\u0001\u0000\u0000\u0000\u11d9\u11d7\u0001"+
		"\u0000\u0000\u0000\u11d9\u11d8\u0001\u0000\u0000\u0000\u11da\u0457\u0001"+
		"\u0000\u0000\u0000\u11db\u11de\u0005\u0145\u0000\u0000\u11dc\u11de\u0003"+
		"\u047a\u023d\u0000\u11dd\u11db\u0001\u0000\u0000\u0000\u11dd\u11dc\u0001"+
		"\u0000\u0000\u0000\u11de\u0459\u0001\u0000\u0000\u0000\u11df\u11e0\u0003"+
		"\u045c\u022e\u0000\u11e0\u045b\u0001\u0000\u0000\u0000\u11e1\u11e2\u0007"+
		"&\u0000\u0000\u11e2\u045d\u0001\u0000\u0000\u0000\u11e3\u11e6\u0003\u0460"+
		"\u0230\u0000\u11e4\u11e6\u0003\u0462\u0231\u0000\u11e5\u11e3\u0001\u0000"+
		"\u0000\u0000\u11e5\u11e4\u0001\u0000\u0000\u0000\u11e6\u045f\u0001\u0000"+
		"\u0000\u0000\u11e7\u11ed\u0005\b\u0000\u0000\u11e8\u11ed\u0005\u000b\u0000"+
		"\u0000\u11e9\u11ed\u0005\f\u0000\u0000\u11ea\u11ed\u0005\u000e\u0000\u0000"+
		"\u11eb\u11ed\u0003\u0464\u0232\u0000\u11ec\u11e7\u0001\u0000\u0000\u0000"+
		"\u11ec\u11e8\u0001\u0000\u0000\u0000\u11ec\u11e9\u0001\u0000\u0000\u0000"+
		"\u11ec\u11ea\u0001\u0000\u0000\u0000\u11ec\u11eb\u0001\u0000\u0000\u0000"+
		"\u11ed\u0461\u0001\u0000\u0000\u0000\u11ee\u11ef\u0007\'\u0000\u0000\u11ef"+
		"\u0463\u0001\u0000\u0000\u0000\u11f0\u11f1\u0007(\u0000\u0000\u11f1\u0465"+
		"\u0001\u0000\u0000\u0000\u11f2\u11f3\u0005\u0010\u0000\u0000\u11f3\u0467"+
		"\u0001\u0000\u0000\u0000\u11f4\u11f5\u0005\u009a\u0000\u0000\u11f5\u0469"+
		"\u0001\u0000\u0000\u0000\u11f6\u11f7\u0003\u045c\u022e\u0000\u11f7\u046b"+
		"\u0001\u0000\u0000\u0000\u11f8\u11f9\u0003\u045c\u022e\u0000\u11f9\u046d"+
		"\u0001\u0000\u0000\u0000\u11fa\u11fb\u0003\u045c\u022e\u0000\u11fb\u046f"+
		"\u0001\u0000\u0000\u0000\u11fc\u11fd\u0005S\u0000\u0000\u11fd\u11fe\u0003"+
		"\u0472\u0239\u0000\u11fe\u0471\u0001\u0000\u0000\u0000\u11ff\u1200\u0003"+
		"\u045c\u022e\u0000\u1200\u0473\u0001\u0000\u0000\u0000\u1201\u1202\u0007"+
		")\u0000\u0000\u1202\u0475\u0001\u0000\u0000\u0000\u1203\u1204\u0007*\u0000"+
		"\u0000\u1204\u0477\u0001\u0000\u0000\u0000\u1205\u1206\u0007+\u0000\u0000"+
		"\u1206\u0479\u0001\u0000\u0000\u0000\u1207\u1208\u0007,\u0000\u0000\u1208"+
		"\u047b\u0001\u0000\u0000\u0000\u01ff\u047e\u0485\u0489\u048e\u0493\u0498"+
		"\u049b\u04a0\u04a2\u04a6\u04a9\u04ad\u04b5\u04bb\u04c9\u04cc\u04d3\u04e0"+
		"\u04e7\u04ea\u04ef\u04f5\u04f8\u0502\u0509\u0512\u0527\u052a\u0531\u0536"+
		"\u053c\u0542\u0546\u054b\u0552\u0555\u055d\u0564\u0567\u0573\u0576\u0581"+
		"\u0589\u0591\u0596\u059a\u05a2\u05a9\u05b1\u05b7\u05bd\u05c2\u05c5\u05ca"+
		"\u05cd\u05d0\u05d4\u05d7\u05db\u05df\u05e2\u05e5\u05e8\u05f4\u05f9\u05ff"+
		"\u0606\u060b\u060f\u0615\u061a\u061d\u0625\u062b\u0633\u0637\u063c\u0643"+
		"\u0647\u064c\u0652\u0656\u065c\u0669\u066f\u067b\u068b\u0690\u069b\u06a5"+
		"\u06b7\u06bc\u06c0\u06c4\u06c8\u06ca\u06d0\u06d5\u06dc\u06ec\u06f0\u06f5"+
		"\u06f9\u0700\u0704\u0715\u071a\u0721\u072b\u0733\u0738\u0748\u074b\u074f"+
		"\u0752\u0756\u0759\u075f\u0763\u0766\u076a\u0771\u0776\u077d\u0781\u0785"+
		"\u0788\u078b\u078e\u0791\u0794\u0796\u079d\u07a2\u07ad\u07b4\u07be\u07c1"+
		"\u07c8\u07cb\u07d1\u07da\u07e0\u07e4\u07eb\u07f8\u0802\u0807\u080c\u0810"+
		"\u0813\u0817\u0821\u0824\u0828\u082b\u0832\u0836\u0839\u084d\u0856\u085b"+
		"\u0862\u0866\u086c\u0872\u0878\u087b\u087e\u0883\u0888\u088b\u088f\u0893"+
		"\u089a\u089e\u08a1\u08a7\u08aa\u08ad\u08b5\u08ba\u08bd\u08c2\u08c5\u08ca"+
		"\u08cd\u08d1\u08d4\u08d7\u08e3\u08ea\u08ec\u08f1\u08fa\u08ff\u0903\u090a"+
		"\u090d\u0910\u0913\u091e\u092c\u0935\u093e\u0960\u0963\u0967\u097a\u0982"+
		"\u0984\u098f\u0997\u099b\u09aa\u09cb\u09d4\u09de\u09e8\u09f3\u09f9\u0a03"+
		"\u0a0c\u0a27\u0a31\u0a3e\u0a43\u0a53\u0a57\u0a67\u0a6c\u0a6f\u0a79\u0a86"+
		"\u0a8c\u0a95\u0a9b\u0aa2\u0aa7\u0aae\u0ab6\u0ab9\u0ac1\u0ac4\u0acd\u0ad1"+
		"\u0ad4\u0ada\u0ae1\u0ae9\u0aeb\u0afa\u0aff\u0b03\u0b07\u0b0b\u0b0f\u0b12"+
		"\u0b18\u0b1d\u0b21\u0b24\u0b28\u0b2b\u0b34\u0b37\u0b41\u0b44\u0b48\u0b4c"+
		"\u0b50\u0b55\u0b5c\u0b5f\u0b63\u0b66\u0b6d\u0b70\u0b7a\u0b9a\u0b9d\u0ba5"+
		"\u0ba8\u0bb1\u0bb5\u0bd8\u0bdf\u0be4\u0bed\u0bf2\u0bf9\u0c09\u0c0c\u0c13"+
		"\u0c16\u0c1b\u0c1e\u0c21\u0c26\u0c2a\u0c32\u0c37\u0c42\u0c45\u0c47\u0c49"+
		"\u0c55\u0c59\u0c60\u0c65\u0c68\u0c6f\u0c72\u0c79\u0c7c\u0c7e\u0c85\u0c8a"+
		"\u0c8d\u0c94\u0c97\u0c9e\u0ca1\u0ca3\u0cad\u0cb1\u0cb5\u0cb9\u0cbd\u0cc1"+
		"\u0cc5\u0cc9\u0ccd\u0cd1\u0cd8\u0cdb\u0cdf\u0ce2\u0ce5\u0ce9\u0ced\u0cf1"+
		"\u0cf5\u0cf9\u0cfd\u0d01\u0d08\u0d0b\u0d0f\u0d13\u0d17\u0d1b\u0d1f\u0d23"+
		"\u0d27\u0d2b\u0d30\u0d37\u0d3a\u0d3f\u0d41\u0d48\u0d4c\u0d4e\u0d56\u0d5a"+
		"\u0d5e\u0d62\u0d66\u0d6d\u0d71\u0d74\u0d78\u0d7c\u0d7f\u0d81\u0d85\u0d8c"+
		"\u0d91\u0d98\u0d9a\u0d9f\u0da5\u0da8\u0daa\u0dae\u0db3\u0dba\u0dbc\u0dc1"+
		"\u0dc8\u0dca\u0dd1\u0dd9\u0ddf\u0de3\u0dea\u0dee\u0df1\u0df6\u0dfa\u0dfe"+
		"\u0e02\u0e06\u0e0a\u0e0d\u0e11\u0e15\u0e19\u0e1c\u0e20\u0e24\u0e27\u0e2e"+
		"\u0e32\u0e35\u0e39\u0e3b\u0e3f\u0e48\u0e50\u0e5f\u0e78\u0e7f\u0e88\u0e8f"+
		"\u0e92\u0e9b\u0ea7\u0eab\u0eb3\u0eb9\u0ec1\u0ed2\u0ee0\u0ef3\u0ef8\u0efe"+
		"\u0f12\u0f19\u0f1b\u0f24\u0f2d\u0f45\u0f4e\u0f63\u0f6a\u0f73\u0f81\u0f85"+
		"\u0f89\u0f8d\u0f9c\u0fac\u0fb0\u0fb4\u0fbb\u0fbe\u0fc6\u0fc9\u0fdc\u0fe3"+
		"\u0fef\u0ff3\u1000\u100a\u100f\u1022\u103c\u104a\u105b\u105f\u1068\u106e"+
		"\u1074\u107d\u108b\u1093\u1095\u10a5\u10aa\u10b6\u1119\u111c\u111f\u1134"+
		"\u113a\u113d\u1143\u1146\u114b\u114e\u1154\u1157\u115d\u1160\u1164\u1168"+
		"\u116c\u1175\u1181\u118a\u1196\u11a2\u11b8\u11c2\u11c7\u11d9\u11dd\u11e5"+
		"\u11ec";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}