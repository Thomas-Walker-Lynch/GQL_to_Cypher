task setup {
  doLast {
    def dirs = [
      "$(ANTLR_IN_PRIMARY_DIR)"
      ,"$(JAVA_COMP_IN_DIR)"
      ,"$(JAVA_COMP_IN_PRIMARY_DIR)"
      ,"$(JAVA_COMP_IN_ANTLR_DIR)"
      ,"$(JAVA_COMP_IN_SYN_DIR)"
      ,"$(JVM_IN_DIR)"
      ,"$(EXECUTOR_IN_DIR)"
      ,"test"
      ,"deprecated"
      ,"experiment"
      ,"ologist"
      ,"temporary"
    ]
    dirs.each { dir ->
      if (!file(dir).exists()) {
        mkdir dir
      }
    }
  }
}

task tool(type: Exec) {
  dependsOn setup
  commandLine '$(BIN_MAKE)', '-f', '$(EXECUTOR_IN_DIR)/makefile-tool.mk', '-$(MAKEFLAGS)', 'all'
}

task project(type: Exec) {
  dependsOn tool
  commandLine '$(BIN_MAKE)', '-f', '$(EXECUTOR_IN_DIR)/makefile-project.mk', '-$(MAKEFLAGS)', 'all'
}

task clean {
  doLast {
    println "Use the command `clean <option>` instead of make."
  }
}

task version {
  doLast {
    println "ANTLR_JAR is '${notdir(ANTLR_JAR)}'"
    exec {
      commandLine '$(JAVA_COMP)', '--version'
    }
    exec {
      commandLine '$(JAVA_ARCHIVE)', '--version'
    }
    exec {
      commandLine 'make', '-v'
    }
    println "makefile 0.4"
  }
}

task all {
  dependsOn project
}

task nothing {
  doLast {
    // useful for distinguishing between make syntax errors and build errors
  }
}

tasks.withType(Exec) {
  doFirst {
    println "Executing $name"
  }
}
