
defaultTasks 'installTools', ':developer:preface'

//--------------------------------------------------------------------------------
// Project manager should set these configuration variables
//
// tool versions
def antlrVersion = '4.11.1'
def jdkVersion   = '22.0.1'
def jdkBuild     = '8'

// The urls for upstream files
def antlrUrl = "https://www.antlr.org/download/antlr-${antlrVersion}-complete.jar"
def jdkUrl = "https://github.com/adoptium/temurin22-binaries/releases/download/jdk-${jdkVersion}%2B${jdkBuild}/OpenJDK22U-jdk_x64_linux_hotspot_${jdkVersion}_${jdkBuild}.tar.gz"

//--------------------------------------------------------------------------------
// project structure
//
def repoHome    = rootDir
def toolDir     = "${repoHome}/tool"
def upstreamDir = "${toolDir}/upstream"
def executorDir = "${toolDir}/executor"
def erebusDir   = file("${rootDir}/Erebus")

//--------------------------------------------------------------------------------
// Configuration phase code
//
// Check that we are in the correct environment
def repoHomeVar = System.getenv('REPO_HOME')
def projectVar = System.getenv('PROJECT')
if(
  !repoHomeVar 
  || !projectVar
){
  println "REPO_HOME or PROJECT not set, has 'env_pm' or 'env_dev' been sourced?"
  throw new GradleException("Bailing due to not being able to make sense of the environment.")
}
if(
  projectVar != "GQL_to_Cypher" 
  && projectVar != "GQL_to_Cypher_PM"
){
  println "Expected project 'GQL_to_Cypher', or 'GQL_to_Cypher_PM' but found '${projectVar}'."
  throw new GradleException("Bailing due to apparently being in the wrong project.")
}

//--------------------------------------------------------------------------------
// build
//

task preface {
  doLast {
    println "================================================================================"
    println "installing tools .."
  }
}

task installAntlr {
  dependsOn preface
  doLast {
    def antlrJar_FN = "antlr-${antlrVersion}-complete.jar"
    def antlrJar_FP = file("${upstreamDir}/${antlrJar_FN}")
    def antlrExecutorJar_FP = file("${executorDir}/${antlrJar_FN}")

    mkdir(upstreamDir)
    mkdir(executorDir)

    if (!antlrJar_FP.exists()) {
      println "Downloading ANTLR..."
      new URL(antlrUrl).withInputStream { i -> antlrJar_FP.withOutputStream { it << i } }
    }

    if (!antlrExecutorJar_FP.exists()) {
      copy {
        from antlrJar_FP
        into executorDir
      }
      println "ANTLR installed in executor."
    } else {
      println "ANTLR already installed."
    }
    project.ext.ANTLRjar = antlrExecutorJar_FP.absolutePath

  }
}

task installJava {
  dependsOn preface
  doLast {
    def jdkTar = file("${upstreamDir}/jdk-${jdkVersion}.tar.gz")
    def jdkDir = file("${toolDir}/jdk-${jdkVersion}+${jdkBuild}")

    mkdir(upstreamDir)
    mkdir(toolDir)

    if (!jdkTar.exists()) {
      println "Downloading JDK..."
      new URL(jdkUrl).withInputStream { i -> jdkTar.withOutputStream { it << i } }
    }

    if (!jdkDir.exists()) {
      println "Extracting JDK..."
      copy {
        from tarTree(resources.gzip(jdkTar))
        into toolDir
      }
      println "JDK installed."
    } else {
      println "JDK already installed."
    }

    // Set JAVA_HOME and test Java installation
    def javaHome = file("${jdkDir}")
    if (!javaHome.exists()) {
      throw new GradleException("JDK extraction failed.")
    }

    // variables saved for use in subproject build scripts
    project.ext.javaHome = jdkDir

    println "Java installation complete."
  }
}

// Add a task to install both tools
task installTools {
  dependsOn installAntlr, installJava
}

//--------------------------------------------------------------------------------
// additional tool install targets
//

task cleanTool {
  description = 'Cleans the installed tools (but not upstream files)'
  doLast {
    // Define the directories or files to clean
    def toolDirs = [
      file("${rootDir}/tool/bin"),
      file("${rootDir}/tool/executor"),
      file("${rootDir}/tool/jdk-22.0.1+8")
    ]

    // Delete the tool directories
    toolDirs.each { dir ->
      if (dir.exists()) {
        println "Deleting ${dir}..."
        delete dir
      }
    }

    println " ./tool cleaned."
  }
}

task cleanErebus {
  description = "Cleans the project level temporary directory 'Erebus'"  
  doLast {
    if (erebusDir.exists()) {
      erebusDir.eachFile { file ->
        if (file.name != '.gitignore') {
          if (file.isDirectory()) {
            file.deleteDir()
          } else {
            file.delete()
          }
        }
      }
      println "Erebus directory cleaned, except for .gitignore."
    } else {
      println "Erebus directory does not exist."
    }
  }
}


