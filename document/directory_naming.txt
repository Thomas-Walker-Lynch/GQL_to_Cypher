
Directories Naming Convention
-----------------------------

Property based file organization

  I am experimenting with a file system where instead of having directories, we
  have collections of files that have a property in common.

  In this distribution the project is on a conventional file system, but we still
  have the directory names. These following properties have been used, in
  order of preference:

  1. Who the file is for. This is typically a role of a contributor
     to the project, or the name of a program.

  2. The role that the file plays in the project.  This is more general than
     saying a file is for a specific program, or even kind of program. As an
     example, the 'tool' directory.

  3. A role that the directory plays. As an example, 'scratch_pad'. Another
     example is 'deprecated' which is a short term archived file.

  In this third category the file property is imposed upon the file,
  rather than being a description of the file's contents.

  One side effect of grouping files based on a shared property is that
  the directory name, coming from the property name, is often singular.

Who the file is for

  These file groups fit the model well: developer, tester, user. Also in the
  developer directory, directories named after programs work well, as examples,
  python, groovy, cc, linker, javac, etc.

Generalization of who the file is for, e.g. executor

  Sometimes multiple related actors operate on the files in a directory. In
  which case we give the directory a more general name that describes the
  actors as a group.

  So if we had a directory that held a mix of files for various compilers we might
  name the directory 'compiler_input' or even 'compiler'. If the files are
  interpreted and multiple interpreters are involved, then 'interpreter_input'.

  A such generalization you will see in this project is 'executor'. An executor
  is any program that runs another program; examples include shells that
  interpret shell scripts; various language interpreter; and most famously the
  machine loader, which will load an instruction sequence into memory and point
  the program counter at it.

document

  What role do people play when reading documents? That this question does not
  have an obvious direct answer says something about our values, and this in
  turn might explain why so few people actually read the documents.

  An author will call the person reading his work 'the reader', perhaps even
  addressing a reader directly, 'Dear Reader'.  However, the are a large number
  of reader programs and devices, such as Adobe Reader and a bar card reader.
  Unlike toolsmith, developer, and tester, being a 'reader' is not a job
  title that a person is going to be addressed by.

  A person might reach for latin and use the word, 'lector'. However it is
  a stretch to get the meaning from this one. Perhaps we move to Greek, and
  imagine the role 'projectologist'.  lol. Perhaps shortened to 'ologist'? 

  Actually, there is a word for a person who studies books, articles, and
  documents, a 'student'. It is actually a fairly accurate description of the
  role a person plays while trying to learn about the project. The only drawback
  is that it is not a professional role title. Perhaps it is not much of a
  stretch to say someone is still in the student phase learning about a project.
  I tried this label out for a while, but it did not really fit.

  There is a clear property choice.  Each file in the document directory has the
  property of being a document, hence, the directory name is 'document'. The
  document directory at the top level is for the project manager, while the
  document directory in the developer's directory is about the code being
  developed and hold to build it.
  

Purpose - tool, temporary, deprecated

  For some other directories it is even more of a stretch to try and say
  they are for an actor.

  Ancient man would make up spirits in such situations.  Perhaps then files in a
  temporary directory are for the 'tanuki', a real animal in Japan who that has
  taken on mythical proportions causing things to disappear or playing tricks. A
  directory of deprecated files could said to be for 'Lethe', the river that
  carries away the memories of those who are reincarnated - which reminds me of
  the rivers in so many places that carry away trash. I tried these names
  out. It was good entertainment, but when trying to explain them I met with
  blank expressions.

  Since in these cases we can not answer the question of who the files are for,
  we instead choose another common property shared by each and every file in the
  directory.  Hence we end up with 'tool' for the directory with tools, instead
  of saying they are for the tool smith, or even for Hephaestus, besides tool
  smiths such as Hephaestus create tools, and the tool directory is full of
  tools that were already created.

Top level directory

  The top level of a github project is of course named after the project. Here
  to us programmers have appealed to mythology to find actors. Just look at all
  the mythical animals on the covers of the O'Reilley manuals.

  The top level directory of our git project is reserved for project manager to
  use. The 'project manager', in this context, builds the directory structure,
  initializes the repository, installs tools that will be needed, and generally
  administers the project.

  In the environment, the top level directory is located at `$REPO_HOME`

developer

  The developer's directory is located at `$REPO_HOME/developer`.

  This directory contains the developer's workspace.  Developers are free to
  organize it in any manner they see fit, though they should continue to follow
  the convention of naming directories after properties when it is practical to
  do so.

  As examples,

  - Files for the **C compiler** are placed in the `cc` directory, since they
    are "for" the C compiler.

  - Files for the **Java compiler** (javac) are stored in the `javac` directory.

  - Similar naming conventions are followed for other tools. For instance, if
    the project involves files for another tool or compiler, the directory is
    named after that tool.

scratch_pad

  This is a temporary directory used by programs. Files in this directory are
  typically removed by the program that placed the file, or by a `clean` script.
  There is no reason a developer can not manually add a file, but scripts such
  as `make clean`, might delete it. Directories with this name should be git
  ignored.

deprecated

  As a developer I often have files that I set aside just in case I want to look
  at them again. Sometimes I plan to bring them back later. Unlike temporary files,
  they are not deleted by any clean script or any program that is using them as
  intermediate files. This directory is similar in intent to `git stash` or
  using to and going back to look at old versions. The contents of this directory
  do end up in the repo.

LocalWords:  projectologist
